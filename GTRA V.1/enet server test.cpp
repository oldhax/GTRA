/**********************************************************************************
CODED BY Haruko KXPS
Modified BY Chandra KXPS
**********************************************************************************/
// size_t invsize = 200; ctrl + f to change iventory size.

/*
WORLD LOCKS IDS:
(tile == 242 || tile == 2408 || tile == 1796 || tile == 4428 || tile == 7188)

*/


#pragma warning (disable : 4996)
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING

#include "stdafx.h"
#include <iostream>
#include <sstream>
#include <fstream>
#include "enet/enet.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <vector>
#include <ctime>
#include <time.h>
#include <sstream>
#include <chrono>
#include <fstream>
#include "json.hpp"
#include "bcrypt.h"
#include "crypt_blowfish/crypt_gensalt.c"
#include "crypt_blowfish/crypt_blowfish.h"
#include "crypt_blowfish/crypt_blowfish.c"
#include "crypt_blowfish/wrapper.c"
#include "bcrypt.c"
#include <conio.h>
#include <thread> // TODO
#include <mutex> // TODO
#include <WinSock2.h>
#include <experimental/filesystem>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cctype>
#include <regex>
#include <filesystem>
#include <wininet.h>
#include <cstring>
#pragma comment(lib,"ws2_32.lib")
#pragma warning(disable:4996)

using namespace std;


using json = nlohmann::json;

enum LabelStyles {
	LABEL_BIG,
	LABEL_SMALL
};

enum SpacerTypes
{
	SPACER_BIG,
	SPACER_SMALL
};

enum CheckboxTypes
{
	CHECKBOX_SELECTED,
	CHECKBOX_NOT_SELECTED
};
//#define TOTAL_LOG
#define REGISTRATION

//configs
ENetHost* server;
int cId = 1;
BYTE* itemsDat = 0;
int itemsDatSize = 0;
int resultnbr1 = 0;
int resultnbr2 = 0;
int hasil = 0;
int prize = 0;
long long int quest = 0;
bool restartForUpdate = false;
long long int restartTime = 0;

string news = "";
void  toUpperCase(std::string& str)
{
	std::transform(str.begin(), str.end(), str.begin(), ::toupper);
}



void LoadNews()
{
	bool exist = std::experimental::filesystem::exists("news.txt");
	if (exist)
	{
		std::ifstream ifs("news.txt");
		std::string content((std::istreambuf_iterator<char>(ifs)),
			(std::istreambuf_iterator<char>()));
		news = content;
		cout << "News loaded." << endl;
	}
	else {
		cout << "News not found." << endl;
	}
}

template<typename T>
void Remove(std::basic_string<T>& Str, const T* CharsToRemove)
{
	std::basic_string<T>::size_type pos = 0;
	while ((pos = Str.find_first_of(CharsToRemove, pos)) != std::basic_string<T>::npos)
	{
		Str.erase(pos, 1);
	}
}

const std::string currentDateTime() {
	time_t     now = time(0);
	struct tm  tstruct;
	char       buf[80];
	tstruct = *localtime(&now);
	// Visit http://en.cppreference.com/w/cpp/chrono/c/strftime
	// for more information about date/time format
	strftime(buf, sizeof(buf), "%Y/%m/%d %X", &tstruct);

	return buf;
}

/***bcrypt***/
bool worldproperlock;
int serverversion;
int serverport;
int serverrolecount;
string playerroleuser;
string playerrolepass;
int playerrolelevel;

bool verifyPassword(string password, string hash) {
	int ret;

	ret = bcrypt_checkpw(password.c_str(), hash.c_str());
	assert(ret != -1);

	return !ret;
}


string hashPassword(string password) {
	char salt[BCRYPT_HASHSIZE];
	char hash[BCRYPT_HASHSIZE];
	int ret;

	ret = bcrypt_gensalt(12, salt);
	assert(ret == 0);
	ret = bcrypt_hashpw(password.c_str(), salt, hash);
	assert(ret == 0);
	return hash;
}


/***bcrypt**/



void sendData(ENetPeer* peer, int num, char* data, int len)
{
	/* Create a reliable packet of size 7 containing "packet\0" */
	ENetPacket* packet = enet_packet_create(0,
		len + 5,
		ENET_PACKET_FLAG_RELIABLE);
	/* Extend the packet so and append the string "foo", so it now */
	/* contains "packetfoo\0"                                      */
	/* Send the packet to the peer over channel id 0. */
	/* One could also broadcast the packet by         */
	/* enet_host_broadcast (host, 0, packet);         */
	memcpy(packet->data, &num, 4);
	if (data != NULL)
	{
		memcpy(packet->data + 2, data, len);
	}
	char zero = 0;
	memcpy(packet->data + 2 + len, &zero, 1);
	enet_peer_send(peer, 0, packet);
	enet_host_flush(server);
}

int getPacketId(char* data)
{
	return *data;
}


char* getPacketData(char* data)
{
	return data + 4;
}


string text_encode(char* text)
{
	string ret = "";
	while (text[0] != 0)
	{
		switch (text[0])
		{
		case '\n':
			ret += "\\n";
			break;
		case '\t':
			ret += "\\t";
			break;
		case '\b':
			ret += "\\b";
			break;
		case '\\':
			ret += "\\\\";
			break;
		case '\r':
			ret += "\\r";
			break;
		default:
			ret += text[0];
			break;
		}
		text++;
	}
	return ret;
}


int ch2n(char x)
{
	switch (x)
	{
	case '0':
		return 0;
	case '1':
		return 1;
	case '2':
		return 2;
	case '3':
		return 3;
	case '4':
		return 4;
	case '5':
		return 5;
	case '6':
		return 6;
	case '7':
		return 7;
	case '8':
		return 8;
	case '9':
		return 9;
	case 'A':
		return 10;
	case 'B':
		return 11;
	case 'C':
		return 12;
	case 'D':
		return 13;
	case 'E':
		return 14;
	case 'F':
		return 15;
	default:
		break;
	}
}




char* GetTextPointerFromPacket(ENetPacket* packet)
{
	char zero = 0;
	memcpy(packet->data + packet->dataLength - 1, &zero, 1);
	return (char*)(packet->data + 4);
}


BYTE* GetStructPointerFromTankPacket(ENetPacket* packet)
{
	//logs << "Getting Struct Pointer of packet..." << endl;
	//logs.flush();
	unsigned int packetLenght = packet->dataLength;
	BYTE* result = NULL;
	if (packetLenght >= 0x3C)
	{
		BYTE* packetData = packet->data;
		result = packetData + 4;
		if (*(BYTE*)(packetData + 16) & 8)
		{
			if (packetLenght < *(int*)(packetData + 56) + 60)
			{
				cout << "Packet too small for extended packet to be valid" << endl;
				cout << "Sizeof float is 4.  TankUpdatePacket size: 56" << endl;
				result = 0;
			}
		}
		else
		{
			int zero = 0;
			memcpy(packetData + 56, &zero, 4);
		}
	}
	return result;
}


int GetMessageTypeFromPacket(ENetPacket* packet)
{
	int result;


	if (packet->dataLength > 3u)
	{
		result = *(packet->data);
	}
	else
	{
		//cout << "Bad packet length, ignoring message" << endl;
		result = 0;
	}
	return result;
}




vector<string> explode(const string& delimiter, const string& str)
{
	vector<string> arr;


	int strleng = str.length();
	int delleng = delimiter.length();
	if (delleng == 0)
		return arr;//no change


	int i = 0;
	int k = 0;
	while (i < strleng)
	{
		int j = 0;
		while (i + j < strleng && j < delleng && str[i + j] == delimiter[j])
			j++;
		if (j == delleng)//found delimiter
		{
			arr.push_back(str.substr(k, i - k));
			i += delleng;
			k = i;
		}
		else
		{
			i++;
		}
	}
	arr.push_back(str.substr(k, i - k));
	return arr;
}


struct GamePacket
{
	BYTE* data;
	int len;
	int indexes;
};




GamePacket appendFloat(GamePacket p, float val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 1;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendFloat(GamePacket p, float val, float val2)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 8];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 3;
	memcpy(n + p.len + 2, &val, 4);
	memcpy(n + p.len + 6, &val2, 4);
	p.len = p.len + 2 + 8;
	p.indexes++;
	return p;
}


GamePacket appendFloat(GamePacket p, float val, float val2, float val3)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 12];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 4;
	memcpy(n + p.len + 2, &val, 4);
	memcpy(n + p.len + 6, &val2, 4);
	memcpy(n + p.len + 10, &val3, 4);
	p.len = p.len + 2 + 12;
	p.indexes++;
	return p;
}


GamePacket appendInt(GamePacket p, int val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 9;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendIntx(GamePacket p, int val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 5;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendString(GamePacket p, string str)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + str.length() + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 2;
	int sLen = str.length();
	memcpy(n + p.len + 2, &sLen, 4);
	memcpy(n + p.len + 6, str.c_str(), sLen);
	p.len = p.len + 2 + str.length() + 4;
	p.indexes++;
	return p;
}


GamePacket createPacket()
{
	BYTE* data = new BYTE[61];
	string asdf = "0400000001000000FFFFFFFF00000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	for (int i = 0; i < asdf.length(); i += 2)
	{
		char x = ch2n(asdf[i]);
		x = x << 4;
		x += ch2n(asdf[i + 1]);
		memcpy(data + (i / 2), &x, 1);
		if (asdf.length() > 61 * 2) throw 0;
	}
	GamePacket packet;
	packet.data = data;
	packet.len = 61;
	packet.indexes = 0;
	return packet;
}


GamePacket packetEnd(GamePacket p)
{
	BYTE* n = new BYTE[p.len + 1];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	char zero = 0;
	memcpy(p.data + p.len, &zero, 1);
	p.len += 1;
	//*(int*)(p.data + 52) = p.len;
	*(int*)(p.data + 56) = p.indexes;//p.len-60;//p.indexes;
	*(BYTE*)(p.data + 60) = p.indexes;
	//*(p.data + 57) = p.indexes;
	return p;
}


struct InventoryItem {
	__int16 itemID;
	__int16 itemCount;
};


struct PlayerInventory {
	vector<InventoryItem> items;
	//int inventorySize = 200;
};


#define cloth0 cloth_hair
#define cloth1 cloth_shirt
#define cloth2 cloth_pants
#define cloth3 cloth_feet
#define cloth4 cloth_face
#define cloth5 cloth_hand
#define cloth6 cloth_back
#define cloth7 cloth_mask
#define cloth8 cloth_necklace
#define cloth9 cloth_ances

vector<string>guildmem;
vector<string>guildelder;
vector<string>guildco;


struct RankupInfo {
	string nextlvlName = "";
	int nextRankId = 0;
	int gems = 0;
	int amber = 0;
	int opal = 0;
	int gold = 0;
	int ruby = 0;
	int sapphire = 0;
	int diamond = 0;
	int emerald = 0;
};


struct PlayerInfo {
	string zf = "";
	bool onquest = false;
	bool evadeRID = false;
	string lastlog = "";
	int login = 0;
	int buygems = 0;
	string reason = "";
	string playerinfo = "";
	int powers = 0;
	int wrenchx;
	int wrenchy;
	RankupInfo rankupInfo;
	int droppeditemcount = 0;
	int lastdroppeditemid = 0;
	int lastPunchX;
	int lastPunchY;
	bool isInWorld = false;
	bool isBannedWait = false;
	bool usedCP = false;
	string sid = "";
	bool isIn = false;
	int netID;
	string Chatname = "";
	int lastdropitemcount = 0;
	int lastdropitem = 0;
	int lasttrashitem = 0;
	int lasttrashitemcount = 0;
	int wrenchsession;
	int bitShiftTest = 0;
	bool canLeave = true;
	bool haveGrowId = false;
	bool haveGuestId = false;
	int valgem;
	int kxpswl = 0;
	bool isvip = false;

	// SHOP ITEMS
	int fEarth = 0;
	int fDark = 0;
	int fFire = 0;
	int fWater = 0;

	bool boughtLGW = false; // legendary wing
	bool boughtLGK = false; // legendary katana
	bool boughtLGD = false; // drag of legend
	bool boughtLGB = false; // legend-bot
	bool boughtLKW = false; // legend knight wings
	bool boughtCWD = false; // chaos curse wand
	bool boughtRFS = false; // rayman
	bool boughtCDG = false; // chaos drag
	bool boughtLTIT = false; // legendary title
	bool boughtLWHIP = false; // legendary whip
	bool boughtPHOENIX = false; // phoenix wings
	bool boughtDAV = false; // davinci
	bool boughtZEUS = false; // zeus
	bool boughtNDEV = false; // Nightmare devil
	bool boughtTXMOM = false; // txmom crown
	bool boughtFLASHAXE = false; // flashaxe
	bool boughtVIOLET = false; // violet
	bool boughtCHIMERA = false; // chimera
	bool boughtBRAIN = false; // brainflower
	bool boughtCCROWN = false; // challenge crown
	bool boughtGBOW = false; // Golden Heartbow
	bool boughtGANGEL = false; // Golden Angel
	bool boughtGROB = false; // Golden Robinson
	bool boughtHSCYTHE = false; // Heavenly Scythe
	bool boughtGDIAPER = false; // Golden Diaper
	bool boughtGTANGEL = false; // Golden Teeny
	bool boughtGNECK = false; // Golden Neck
	bool boughtGGLASS = false; // Golden Glasses
	bool boughtGPEGASUS = false; // Golden Pegasus
	bool boughtGBUG = false; // Golden Bug
	bool boughtWAR = false; // War hammer
	bool boughtRAY = false; // RAYMAN
	bool boughtAAC = false; // Ancestral
	bool boughtSPD = false; // DIGGER SPADE
	bool boughtTK = false; // TK69

	bool RotatedLeft = false;



	// SHOP ITEMS

	string tankIDName = "";
	string tankIDPass = "";
	string requestedName = "";
	string rawName = "";
	bool isAAP = false;
	int warns = 0;
	int bans = 0;
	int rubblexp = 0;
	int rubble = 0;
	// Mining update starts
	int amberxp = 0;
	int amber = 0;

	int opalxp = 0;
	int opal = 0;

	int goldxp = 0;
	int gold = 0;

	int sapphirexp = 0;
	int sapphire = 0;

	int diamondxp = 0;
	int diamond = 0;

	int emeraldxp = 0;
	int emerald = 0;
	// Mining update ends


	// Fragments update starts
	int darkfragment = 0;
	int earthfragment = 0;
	int firefragment = 0;
	int waterfragment = 0;
	// Fragments update ends
	bool transsuccess = false;
	bool isModState = false;
	string displayName = "";
	bool wrongpass = false;
	int guildBg = 0;
	int guildFg = 0;
	string guildStatement = "";
	string guildLeader = "";
	string displayNamebackup = "";
	string displayUsername = "";
	vector <string> guildmatelist;
	vector<string>guildMembers;
	vector<string>worldsowned;
	vector<string>lastworlds;
	int guildlevel = 0;
	int guildexp = 0;


	bool isinvited = false;

	string createGuildName = "";
	string createGuildStatement = "";
	string createGuildFlagBg = "";
	string createGuildFlagFg = "";

	string guild = "";
	bool joinguild = false;
	string lastgm = "";
	string lastgmname = "";
	string lastgmworld = "";
	string guildlast = "";
	string msgName = "";
	bool isNicked = false;
	string country = "";
	string gameversion = "";
	string rid = "";
	string gid = "";
	string aid = "";
	bool canExit = true;
	string vid = "";
	string wkid = "";
	string metaip = "";
	string hash2 = "";
	string hash = "";
	string fhash = "";
	string mac = "";
	string token = "";
	string user = "";
	string deviceversion = ""; //deviceVersion
	string cbits = "";
	string lmode = "";
	string gdpr = "";
	string f = "";
	string fz = "";
	string hpid = "";
	string platformID = "";
	string player_age = "1";
	int adminLevel = 0;
	string currentWorld = "EXIT";
	string plainip = "";
	string plainip2 = "";
	string plainip3 = "";
	string plainip4 = "";

	//int rnipID = enet_address_get_host(&address, "0.0.0.0", 10);

	string buttonID = to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10);

	string firstnbr = to_string(rand() % 50);
	string secondnbr = to_string(rand() % 50);

	int resultnbr1 = std::atoi(firstnbr.c_str());
	int resultnbr2 = std::atoi(secondnbr.c_str());
	int Endresult = 0;
	bool radio = true;
	int x;
	int y;
	int x1;
	int y1;
	int posXY;
	int posX;
	int posY;
	int cpY;
	int cpX;
	int SignPosX;
	int SignPosY;
	bool characterLoaded = false;
	bool isRotatedLeft = false;
	bool isRotatedDown = false;
	string charIP = "";
	bool isDBanned = false;

	vector<string>friendinfo;
	vector<string>createfriendtable;
	vector<string>createworldsowned;

	string lastFrn = "";
	string lastFrnName = "";
	string lastFrnWorld = "";

	string lastMsger = "";
	string lastMsgerTrue = "";
	string lastMsgWorld = "";
	string lastSdbWorld = "";

	string lastfriend = "";
	string lastInfo = "";
	string lastInfoname = "";

	string lastSeller = "";
	string lastSellWorld = "";
	string lastBuyer = "";
	int lastTradeAmount = 99999999999;


	string addgems = "1000 gems";
	int characterState = 0;
	int level = 1;
	int xp = 0;

	bool forcegemUpdate = false;
	bool isUpdating = false;
	bool joinClothesUpdated = false;
	int effect = 8421376;
	int peffect = 8421376;

	bool taped = false;
	//bool enabledAAP = false;
	bool canCreate = false;
	bool passedCaptcha = false;
	bool passedCaptcha2 = false;


	int cloth_hair = 0; // 0
	int cloth_shirt = 0; // 1
	int cloth_pants = 0; // 2
	int cloth_feet = 0; // 3
	int cloth_face = 0; // 4
	int cloth_hand = 0; // 5
	int cloth_back = 0; // 6
	int cloth_mask = 0; // 7
	int cloth_necklace = 0; // 8
	int cloth_ances = 0; // 9

	int cur = 0;
	int ipID = 0;
	int ban = 0;
	int istempBan = 0;

	int invcount = 0;

	int invitem1 = 0;
	int invitem2 = 0;
	int invitem3 = 0;
	int invitem4 = 0;
	int invitem5 = 0;
	int invitem6 = 0;
	int invitem7 = 0;
	int invitem8 = 0;
	int invitem9 = 0;


	bool canWalkInBlocks = false; // 1
	bool canWalkInBlocks1 = false; // 1
	bool canWalkInBlocks2 = false; // 1
	bool canWalkInBlocks3 = false; // 1
	bool canWalkInBlocks4 = false; // 1
	bool canWalkInBlocks5 = false; // 1
	bool canDoubleJump = false; // 2
	bool cantsay = false;
	bool isInvisible = false; // 4
	bool noHands = false; // 8
	bool noEyes = false; // 16
	bool noBody = false; // 32	
	bool devilHorns = false; // 64
	bool goldenHalo = false; // 128
	bool isFrozen = false; // 2048
	bool isCursed = false; // 4096
	bool isDuctaped = false; // 8192
	bool haveCigar = false; // 16384
	bool isShining = false; // 32768
	bool isAncients = false; // 32768
	bool isAncients1 = false; // 32768
	bool isAncients2 = false; // 32768
	bool isAncients3 = false; // 32768
	bool isAncients4 = false; // 32768
	bool isAncients5 = false; // 32768
	bool isAncients6 = false; // 32768
	bool isZombie = false; // 65536
	bool isHitByLava = false; // 131072
	bool haveHauntedShadows = false; // 262144
	bool haveGeigerRadiation = false; // 524288
	bool haveReflector = false; // 1432576
	bool isEgged = false; // 2097152
	bool havePineappleFloag = false; // 4194304
	bool haveFlyingPineapple = false; // 8388608
	bool haveSuperSupporterName = false; // 16777216
	bool haveSupperPineapple = false; // 33554432
	bool isGhost = false;
	bool isinv = false;
	//string lastMsgWorld;
	bool unwheel = false;
	bool unsales = false;
	bool ghostalr = false;
	//bool 
	int skinColor = 0x8295C3FF; //normal SKIN color like gt!


	PlayerInventory inventory;
	short currentInventorySize = 0;

	long long int lastSB = 0;
	long long int lastINV = 0;
	long long int lastBREAK = 0;
	long long int lastMute = 0;
	long long int lastBan = 0;
	long long int lastCurse = 0;
	long long int lastATM = 0;
	long long int lastSpin = 0;

	int blockx;
	int blocky;

	string lastTradeName = "";
	int lastUserID = 0;
	int userID = 0;
	string currentTradeItems = "";
	int respawnX = 0;
	int respawnY = 0;

	bool loadedInventory = false;
	int updateReq = 0;

	long long int lastPunchTime = 0;
	long long int lastHitTime = 0;
	long long int lastJoinReq = 0;
	bool hasJoinedFromSubServer = false;
	bool isBot = true;
	int pvpScore = 0;
	bool isQueuing = false;
	bool isWaitingForMatch = false;
	bool isInGame = false;
	bool queueEntered = false;
	uint32_t lavaHitAt = 0;
	uint32_t deadTime = 0;
	//vector<WorldAdministration> worldBan;

	int health = 100;
	int score = 0;
	bool goesPVP = false;
	string lastHitCoordX = "-1";
	string lastHitCoordY = "-1";
	int lastPVPcoord;
	int lastPVPcoord2;
	int lastPVPcoord3;
	int lastPVPcoord4;
	int lastPVPcoord5;
	int lastPVPcoord6;
	int lastPVPcoord7;
	int totalKills = 0;
};

void OnDialogRequest(ENetPeer* peer, string dialog) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), dialog));
	ENetPacket* packet = enet_packet_create(p.data, p.len, ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}


int getState(PlayerInfo* info) {
	int val = 0;
	val |= info->canWalkInBlocks << 0;
	val |= info->canDoubleJump << 1;
	val |= info->cantsay << 13;
	val |= info->noHands << 3;
	val |= info->noEyes << 4;
	val |= info->noBody << 5;
	val |= info->goldenHalo << 7;
	val |= info->isFrozen << 8;
	val |= info->isCursed << 12;
	val |= info->isDuctaped << 10;
	val |= info->haveSuperSupporterName << 24;
	val |= info->isShining << 15;
	val |= info->isZombie << 16;
	return val;
}




struct WorldItem {
	__int16 foreground = 0;
	__int16 background = 0;
	int displayblock = 0;
	int breakLevel = 0;
	long long int breakTime = 0;
	bool rotatedLeft = false;
	bool sign = false;
	bool water = false;
	bool fire = false;
	bool glue = false;
	bool red = false;
	bool green = false;
	bool blue = false;
	int displayBlock = 0;
	int gravity = 100;
	bool isInverted = false;
	bool isRotating = false;

};

struct InfoDropedItems {

	int itemid = 0;
	int quantity = 0;
	int positionx = 0;
	int positiony = 0;

};

vector<InfoDropedItems> dropedItems;

struct WorldInfo {
	int width = 100;
	int height = 60;
	bool nuked = false;
	string name = "TEST";
	WorldItem* items;
	int droppedCount = 0;
	string owner = "";
	string Displayowner = "";
	bool isPublic = false;
	bool allowMod = true;
	bool pIsVip = false;
	bool pIsMod = false;
	bool pIsDev = false;
	bool pIsPlay = false;
	bool pIsAdmin = false;
	bool pIsKing = false;
	bool isEvent = true;
	bool noclip = false;
	int ghostalr = 0;
	int invisalr = 0;
	int weather = 0;
	vector<string> worldaccess;
	vector<string> accessworld;
};

WorldInfo generateCleanWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 0; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 0; }
				else { world.items[i].foreground = 0; }
			}
			else { world.items[i].foreground = 0; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 14;
		if (i == 3650)
			world.items[i].foreground = 6; //BALTOS DURYS
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //TUSCIA DURU LYGIS
		if (i == 3750)
			world.items[i].foreground = 8; //BEDROCK
	}
	return world;
}


/* //SENAS
WorldInfo generateCleanWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 0; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 0; }
				else { world.items[i].foreground = 0; }
			}
			else { world.items[i].foreground = 0; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 14;
		if (i == 3650)
			world.items[i].foreground = 6; //BALTOS DURYS
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //TUSCIA DURU LYGIS
		if (i == 3750)
			world.items[i].foreground = 8; //BEDROCK
	}
	return world;
}*/

WorldInfo generateWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 10; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 4; }
				else { world.items[i].foreground = 2; }
			}
			else { world.items[i].foreground = 2; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 14;
		if (i == 3650)
			world.items[i].foreground = 6;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 8;
	}
	return world;
}



WorldInfo generateMarsWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 150; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 45; }
				else { world.items[i].foreground = 25; }
			}
			else { world.items[i].foreground = 52; }
		}
		else if (i >= 5400) { world.items[i].foreground = 82; }
		if (i >= 3700)
			world.items[i].background = 114;
		if (i == 3650)
			world.items[i].foreground = 63;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 03; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 84;
	}
	return world;
}



WorldInfo ClearWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 0; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 0; }
				else { world.items[i].foreground = 0; }
			}
			else { world.items[i].foreground = 2; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 0;
		if (i == 3650)
			world.items[i].foreground = 6;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 8;
	}
	return world;
}

struct PVPQueue {
	// queue
	bool isMatchRunning = false;
	int inTeamRed = 0;
	int inTeamBlue = 0;
	int playersInQueue = 0;
	int playersInGame = 0;
	int gameduration = 420;
	long long timePVPStarted = 0;
	// player
	string topOne = "";
	string topTwo = "";
	string topThree = "";
	string topFour = "";
	string topFive = "";
	string topSix = "";
};

PVPQueue match;

class Player {
public:
	static void OnConsoleMessage(ENetPeer* peer, string text);
	static void OnTalkBubble(ENetPeer* peer, int netID, string text, int chatColor, bool isOverlay);
	static void OnAddNotification(ENetPeer* peer, string text, string audiosound, string interfaceimage);
	static void OnStartAcceptLogon(ENetPeer* peer, int itemdathash);
	static void OnRemove(ENetPeer* peer, int netID);
	static void OnSendToServer(ENetPeer* peer, int userID, int token, string ip, int port, string doorId, int lmode); // no need other args, sub servers done&working already... using fake data etc.
	static void SendTileAnimation(ENetPeer* peer, int x, int y, int causedBy, int tile);
	static void PlayAudio(ENetPeer* peer, string audioFile, int delayMS);
	static void showWrong(ENetPeer* peer, string itemFind, string listFull);
	static void OnZoomCamera(ENetPeer* peer, float value1, int value2);
	static void SmoothZoom(ENetPeer* peer);
	static void OnRaceStart(ENetPeer* peer, int netID);
	static void OnRaceEnd(ENetPeer* peer, int netID);
	static void OnSetCurrentWeather(ENetPeer* peer, int weather);
	static void OnPlayPositioned(ENetPeer* peer, string audiofile, int netID, bool broadcastInWorld, ENetPacket* pk);
	static void OnCountdownStart(ENetPeer* peer, int netID, int time, int score);
	static void OnCountdownUpdate(ENetPeer* peer, int netID, int score);
	static void OnCountdownEnd(ENetPeer* peer);
	static void OnStartTrade(ENetPeer* peer, int netID1, int netID2);
	static void OnTextOverlay(ENetPeer* peer, string text);
	static void OnForceTradeEnd(ENetPeer* peer);
	static void OnFailedToEnterWorld(ENetPeer* peer);
	static void OnNameChanged(ENetPeer* peer, int netID, string name);
	static void OnTradeStatus(ENetPeer* peer, int netIDOther, string offerstatus, string offer);
	static void OnDialogRequest(ENetPeer* peer, string args);
	static void OnKilled(ENetPeer* peer, int netID);
	static void OnSetFreezeState(ENetPeer* peer, int state, int netID);
	static void OnSetPos(ENetPeer* peer, int netID, int x, int y);
	static void OnFlagMay2019(ENetPeer* peer, int state, int netID);
	static void OnBillboardChange(ENetPeer* peer, int netID); //testing billboards
	static void SendTilePickup(ENetPeer* peer, int itemid, int netID, float x, float y, int itemcount, int itemamount);
	static void OnInvis(ENetPeer* peer, int state, int netID);
	static void OnChangeSkin(ENetPeer* peer, int skinColor, int netID);
	static void SetRespawnPos(ENetPeer* peer, int posX, int posY, int netID);
	static void OnSetBux(ENetPeer* peer, int gems, int accountstate);
	static void OnParticleEffect(ENetPeer* peer, int effect, float x, float y, int delay);
	static void SetHasGrowID(ENetPeer* peer, int status, string username, string password);
	static void Ping(ENetPeer* peer);
};


void Player::OnStartAcceptLogon(ENetPeer* peer, int itemdathash) {
	GamePacket p = packetEnd(appendString(appendString(appendString(appendString(appendInt(appendString(createPacket(),
		"OnSuperMainStartAcceptLogonHrdxs47254722215a"), itemdathash), "51.178.53.125"), "cache/"),
		"cc.cz.madkite.freedom org.aqua.gg idv.aqua.bulldog com.cih.gamecih2 com.cih.gamecih com.cih.game_cih cn.maocai.gamekiller com.gmd.speedtime org.dax.attack com.x0.strai.frep com.x0.strai.free org.cheatengine.cegui org.sbtools.gamehack com.skgames.traffikrider org.sbtoods.gamehaca com.skype.ralder org.cheatengine.cegui.xx.multi1458919170111 com.prohiro.macro me.autotouch.autotouch com.cygery.repetitouch.free com.cygery.repetitouch.pro com.proziro.zacro com.slash.gamebuster"),
		"proto=80|choosemusic=audio/mp3/theme4.mp3|active_holiday=0|"));

	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

class PlayerDB {
public:
	static string getProperName(string name);
	static string PlayerDB::fixColors(string text);
	static int playerLogin(ENetPeer* peer, string username, string password);

	static int playerRegister(ENetPeer* peer, string username, string password, string passwordverify, string discord, string pin);

	static int guildRegister(ENetPeer* peer, string guildName, string guildStatement, string guildFlagfg, string guildFlagbg);
};


string PlayerDB::getProperName(string name) {
	string newS;
	for (char c : name) newS += (c >= 'A' && c <= 'Z') ? c - ('A' - 'a') : c;
	string ret;
	for (int i = 0; i < newS.length(); i++)
	{
		if (newS[i] == '`') i++; else ret += newS[i];
	}
	string ret2;
	for (char c : ret) if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) ret2 += c;
	return ret2;
}


string PlayerDB::fixColors(string text) {
	string ret = "";
	int colorLevel = 0;
	for (int i = 0; i < text.length(); i++)
	{
		if (text[i] == '`')
		{
			ret += text[i];
			if (i + 1 < text.length())
				ret += text[i + 1];


			if (i + 1 < text.length() && text[i + 1] == '`')
			{
				colorLevel--;
			}
			else {
				colorLevel++;
			}
			i++;
		}
		else {
			ret += text[i];
		}
	}
	for (int i = 0; i < colorLevel; i++) {
		ret += "``";
	}
	for (int i = 0; i > colorLevel; i--) {
		ret += "`w";
	}
	return ret;
}


void banlogin(ENetPeer* peer) {
	string text = "action|log\nmsg|`4Sorry, this account (`5" + ((PlayerInfo*)(peer->data))->rawName + "`4) has been suspended. `4If you believe its a mistake, contact `1Chandra and Jar`4!\n";
	string text3 = "action|logon_fail\n";
	string dc = "https://discord.gg/yZ2kwUb";
	string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


	BYTE* data = new BYTE[5 + text.length()];
	BYTE* data3 = new BYTE[5 + text3.length()];
	BYTE* dataurl = new BYTE[5 + url.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);

	memcpy(dataurl, &type, 4);
	memcpy(dataurl + 4, url.c_str(), url.length());
	memcpy(dataurl + 4 + url.length(), &zero, 1);

	memcpy(data3, &type, 4);
	memcpy(data3 + 4, text3.c_str(), text3.length());
	memcpy(data3 + 4 + text3.length(), &zero, 1);

	ENetPacket* p = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p);
	ENetPacket* p3 = enet_packet_create(dataurl,
		5 + url.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p3);
	ENetPacket* p2 = enet_packet_create(data3,
		5 + text3.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p2);

	delete data;
	delete dataurl;
	delete data3;


}
long long GetCurrentTimeInternal()
{
	using namespace std::chrono;
	return (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
}
long long GetCurrentTimeInternalSeconds()
{
	using namespace std::chrono;
	return (duration_cast<seconds>(system_clock::now().time_since_epoch())).count();
}

string OutputBanTime(int n)
{
	string x;
	int day = n / (24 * 3600);
	if (day != 0) x.append(to_string(day) + " Days ");
	n = n % (24 * 3600);
	int hour = n / 3600;
	if (hour != 0) x.append(to_string(hour) + " Hours ");
	n %= 3600;
	int minutes = n / 60;
	if (minutes != 0) x.append(to_string(minutes) + " Minutes ");
	n %= 60;
	int seconds = n;
	if (seconds != 0) x.append(to_string(seconds) + " Seconds");
	return x;
}




int calcBanDuration(long long banDuration) {
	int duration = 0;
	duration = banDuration - GetCurrentTimeInternalSeconds();
	return duration;
}
void banLoginDevice(ENetPeer* peer, long long banDurationDefault, string sid, string mac) {

	int bantimeleft = calcBanDuration(banDurationDefault);
	if (bantimeleft < 1) {

		return;
	}






	string text = "action|log\nmsg|`4Sorry, this device or location is still banned for `w" + OutputBanTime(calcBanDuration(banDurationDefault)) + " Need help? Contact Jar and Chandra!";
	string text3 = "action|logon_fail\n";
	string dc = "https://discord.gg/yZ2kwUb";
	string url = "action|set_url\nurl|" + dc + "\nlabel|Join KortexPS Discord\n";


	BYTE* data = new BYTE[5 + text.length()];
	BYTE* data3 = new BYTE[5 + text3.length()];
	BYTE* dataurl = new BYTE[5 + url.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);

	memcpy(dataurl, &type, 4);
	memcpy(dataurl + 4, url.c_str(), url.length());
	memcpy(dataurl + 4 + url.length(), &zero, 1);

	memcpy(data3, &type, 4);
	memcpy(data3 + 4, text3.c_str(), text3.length());
	memcpy(data3 + 4 + text3.length(), &zero, 1);

	ENetPacket* p = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p);
	ENetPacket* p3 = enet_packet_create(dataurl,
		5 + url.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p3);
	ENetPacket* p2 = enet_packet_create(data3,
		5 + text3.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p2);
	enet_peer_disconnect_later(peer, 0);
	delete data;
	delete dataurl;
	delete data3;
}
void checkBan(ENetPeer* peer) {
	string rid = ((PlayerInfo*)(peer->data))->rid;
	string sid = ((PlayerInfo*)(peer->data))->sid;
	string gid = ((PlayerInfo*)(peer->data))->gid;
	string vid = ((PlayerInfo*)(peer->data))->vid;
	string aid = ((PlayerInfo*)(peer->data))->aid;
	string mac = ((PlayerInfo*)(peer->data))->mac;
	string ip = to_string(peer->address.host);
	Remove(mac, ":");
	bool exist = experimental::filesystem::exists("autoban/rid/" + rid + ".txt") ||
		//experimental::filesystem::exists("autoban/sid/" + sid + ".txt") ||
		experimental::filesystem::exists("autoban/gid/" + gid + ".txt") ||
		experimental::filesystem::exists("autoban/vid/" + vid + ".txt") ||
		experimental::filesystem::exists("autoban/aid/" + aid + ".txt") ||
		//experimental::filesystem::exists("autoban/mac/" + mac + ".txt") ||
		experimental::filesystem::exists("autoban/ip/" + ip + ".txt");
	if (exist) {
		string content = "0";
		if (experimental::filesystem::exists("autoban/ip/" + ip + ".txt")) {
			std::ifstream ifs("autoban/ip/" + ip + ".txt");
			std::string contentf((std::istreambuf_iterator<char>(ifs)),
				(std::istreambuf_iterator<char>()));
			content = contentf;
		}
		/*else if (experimental::filesystem::exists("autoban/sid/" + sid + ".txt")) {
			std::ifstream ifs("autoban/sid/" + sid + ".txt");
			std::string contentf((std::istreambuf_iterator<char>(ifs)),
				(std::istreambuf_iterator<char>()));
			content = contentf;
		}
		else if (experimental::filesystem::exists("autoban/sid/" + sid + ".txt")) {
			std::ifstream ifs("autoban/mac/" + mac + ".txt");
			std::string contentf((std::istreambuf_iterator<char>(ifs)),
				(std::istreambuf_iterator<char>()));
			content = contentf;
		}*/
		if (content != "0") {
			long long banDuration = atoi(content.c_str());
			banLoginDevice(peer, banDuration, sid, mac);
		}
	}
}

int PlayerDB::playerLogin(ENetPeer* peer, string username, string password) {


	string uname = username;
	toUpperCase(uname);

	string username1 = ((PlayerInfo*)(peer->data))->tankIDName;


	checkBan(peer);

	if (uname == "CON" || uname == "NUL" || uname == "BEX" || uname == "PRN" || uname == "AUX" || uname == "CLOCK$" || uname == "COM0" || uname == "COM1" || uname == "COM2" || uname == "COM3" || uname == "COM4" || uname == "COM5" || uname == "COM6" || uname == "COM7" || uname == "COM8" || uname == "COM9" || uname == "LPT0" || uname == "LPT1" || uname == "LPT2" || uname == "LPT3" || uname == "LPT4" || uname == "LPT5" || uname == "LPT6" || uname == "LPT7" || uname == "LPT8" || uname == "LPT9")
	{
		return -4;
	}
	if (uname == "" || uname == " " || uname == "  " || uname == "   " || uname == "    ")
	{
		return -5;
	}
	if (username1.find(" ") != string::npos || username1.find(".") != string::npos || username1.find(",") != string::npos || username1.find("@") != string::npos || username1.find("[") != string::npos || username1.find("]") != string::npos || username1.find("#") != string::npos || username1.find("<") != string::npos || username1.find(">") != string::npos || username1.find(":") != string::npos || username1.find("{") != string::npos || username1.find("}") != string::npos || username1.find("|") != string::npos || username1.find("+") != string::npos || username1.find("_") != string::npos || username1.find("~") != string::npos || username1.find("-") != string::npos || username1.find("!") != string::npos || username1.find("$") != string::npos || username1.find("%") != string::npos || username1.find("^") != string::npos || username1.find("&") != string::npos || username1.find("`") != string::npos || username1.find("*") != string::npos || username1.find("(") != string::npos || username1.find(")") != string::npos || username1.find("=") != string::npos || username1.find("'") != string::npos || username1.find(";") != string::npos || username1.find("/") != string::npos) {
		return -5;
	}
	bool contains_non_alpha
		= !std::regex_match(uname, std::regex("^[0-9]+$"));

	if (contains_non_alpha)
	{
	}
	else {
		return -4;
	}

	bool atmexist = std::experimental::filesystem::exists("atm/" + PlayerDB::getProperName(username) + ".txt");

	if (!atmexist)
	{
		ofstream of("atm/" + PlayerDB::getProperName(username) + ".txt");
		of << 0;
		of.close();
	}
	else
	{
		ifstream fd("atm/" + PlayerDB::getProperName(username) + ".txt");
		fd >> ((PlayerInfo*)(peer->data))->lastATM;
		fd.close();
	}



	bool invsizeist = std::experimental::filesystem::exists("usersinventorysize/" + PlayerDB::getProperName(username) + ".txt");

	if (!invsizeist)
	{
		ofstream invof("usersinventorysize/" + PlayerDB::getProperName(username) + ".txt");
		invof << 30;
		invof.close();
	}


	std::ifstream ifs("players/" + PlayerDB::getProperName(username) + ".json");
	if (ifs.is_open()) {
		json j;
		ifs >> j;
		string pss = j["password"];
		int ban = j["isBanned"];
		int ipID = j["ipID"];




		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)




			if (ban == 1) {
				banlogin(peer);
				//enet_peer_disconnect_later(peer, 0);
			}
			else if (((PlayerInfo*)(peer->data))->gameversion < "3") {

				string text = "action|log\nmsg|`4UPDATE REQUIRED`o : The `$V3.01 `oupdate is now avallable for your device. Go get it! You'll need that before you can login into private server.\n";
				string text3 = "action|logon_fail\n";
				string dc = "https://growtopiagame.com/Growtopia-Installer.exe";
				string url = "action|set_url\nurl|" + dc + "\nlabel|`$Update Growtopia\n";


				BYTE* data = new BYTE[5 + text.length()];
				BYTE* data3 = new BYTE[5 + text3.length()];
				BYTE* dataurl = new BYTE[5 + url.length()];
				BYTE zero = 0;
				int type = 3;
				memcpy(data, &type, 4);
				memcpy(data + 4, text.c_str(), text.length());
				memcpy(data + 4 + text.length(), &zero, 1);

				memcpy(dataurl, &type, 4);
				memcpy(dataurl + 4, url.c_str(), url.length());
				memcpy(dataurl + 4 + url.length(), &zero, 1);

				memcpy(data3, &type, 4);
				memcpy(data3 + 4, text3.c_str(), text3.length());
				memcpy(data3 + 4 + text3.length(), &zero, 1);

				ENetPacket* p = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p);
				ENetPacket* p3 = enet_packet_create(dataurl,
					5 + url.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p3);
				ENetPacket* p2 = enet_packet_create(data3,
					5 + text3.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p2);

				delete data;
				delete dataurl;
				delete data3;

				enet_peer_disconnect_later(peer, 0);
			}



		if (verifyPassword(password, pss)) {
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (currentPeer == peer)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(username))
				{
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Someone else logged into this account!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet);
						delete p.data;
					}
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Someone else was logged into this account! He was kicked out now."));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						//enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					enet_host_flush(server);
					enet_peer_disconnect_later(currentPeer, 0);
				}
			}
			return 1;
		}
		else {

			return -1;
		}
	}
	else {
		return -2;
	}
}
int PlayerDB::guildRegister(ENetPeer* peer, string guildName, string guildStatement, string guildFlagfg, string guildFlagbg) {
	if (guildName.find(" ") != string::npos || guildName.find(".") != string::npos || guildName.find(",") != string::npos || guildName.find("@") != string::npos || guildName.find("[") != string::npos || guildName.find("]") != string::npos || guildName.find("#") != string::npos || guildName.find("<") != string::npos || guildName.find(">") != string::npos || guildName.find(":") != string::npos || guildName.find("{") != string::npos || guildName.find("}") != string::npos || guildName.find("|") != string::npos || guildName.find("+") != string::npos || guildName.find("_") != string::npos || guildName.find("~") != string::npos || guildName.find("-") != string::npos || guildName.find("!") != string::npos || guildName.find("$") != string::npos || guildName.find("%") != string::npos || guildName.find("^") != string::npos || guildName.find("&") != string::npos || guildName.find("`") != string::npos || guildName.find("*") != string::npos || guildName.find("(") != string::npos || guildName.find(")") != string::npos || guildName.find("=") != string::npos || guildName.find("'") != string::npos || guildName.find(";") != string::npos || guildName.find("/") != string::npos) {
		return -1;
	}

	if (guildName.length() < 3) {
		return -2;
	}
	if (guildName.length() > 15) {
		return -3;
	}
	int fg;
	int bg;

	try {
		fg = stoi(guildFlagfg);
	}
	catch (std::invalid_argument & e) {
		return -6;
	}
	try {
		bg = stoi(guildFlagbg);
	}
	catch (std::invalid_argument & e) {
		return -5;
	}
	if (guildFlagbg.length() > 4) {
		return -7;
	}
	if (guildFlagfg.length() > 4) {
		return -8;
	}

	string fixedguildName = PlayerDB::getProperName(guildName);

	std::ifstream ifs("guilds/" + fixedguildName + ".json");
	if (ifs.is_open()) {
		return -4;
	}

	/*std::ofstream o("guilds/" + fixedguildName + ".json");
	if (!o.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	json j;

	//  Guild Detail
	j["GuildName"] = guildName;
	j["GuildStatement"] = guildStatement;
	j["GuildWorld"] = ((PlayerInfo*)(peer->data))->currentWorld;

	//  Guild Level
	j["GuildLevel"] = 0;
	j["GuildExp"] = 0;

	// Guild Leader
	j["Leader"] = ((PlayerInfo*)(peer->data))->rawName;


	// Guild Flag
	j["foregroundflag"] = 0;
	j["backgroundflag"] = 0;


	// Role
	vector<string>guildmember;
	vector<string>guildelder;
	vector<string>guildco;

	j["CoLeader"] = guildelder;
	j["ElderLeader"] = guildco;
	j["Member"] = guildmem;

	o << j << std::endl; */
	return 1;
}

int PlayerDB::playerRegister(ENetPeer* peer, string username, string password, string passwordverify, string discord, string pin) {

	if (username.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
		return -10;
	}


	username = PlayerDB::getProperName(username);
	if (username.length() < 3) return -2;
	if (username.length() > 20) return -2;

	string uname = username;
	toUpperCase(uname);

	if (uname == "CON" || uname == "NUL" || uname == "BEX" || uname == "PRN" || uname == "AUX" || uname == "CLOCK$" || uname == "COM0" || uname == "COM1" || uname == "COM2" || uname == "COM3" || uname == "COM4" || uname == "COM5" || uname == "COM6" || uname == "COM7" || uname == "COM8" || uname == "COM9" || uname == "LPT0" || uname == "LPT1" || uname == "LPT2" || uname == "LPT3" || uname == "LPT4" || uname == "LPT5" || uname == "LPT6" || uname == "LPT7" || uname == "LPT8" || uname == "LPT9")
	{
		return -6;
	}
	if (uname == "" || uname == " " || uname == "  " || uname == "   " || uname == "    ")
	{
		return -11;
	}
	std::ifstream ifs("players/" + username + ".json");
	if (ifs.is_open()) {
		return -1;
	}

	bool contains_non_alpha = !std::regex_match(pin, std::regex("^[0-9]+$"));

	ENetPeer* currentPeer;

	currentPeer = server->peers;

	std::ofstream o("players/" + username + ".json");
	if (!o.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}
	json j;
	j["username"] = username;
	j["password"] = hashPassword(password);
	j["ClothBack"] = 0;
	j["ClothHand"] = 0;
	j["ClothFace"] = 0;
	j["ClothShirt"] = 0;
	j["ClothPants"] = 0;
	j["ClothNeck"] = 0;
	j["ClothHair"] = 0;
	j["ClothFeet"] = 0;
	j["ClothMask"] = 0;
	j["ClothAnces"] = 0;
	j["isBanned"] = 0;
	j["ipID"] = peer->address.host;
	j["effect"] = 8421376;
	j["friends"] = ((PlayerInfo*)(peer->data))->createfriendtable;
	j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
	j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl;
	j["lastlog"] = ((PlayerInfo*)(peer->data))->lastlog;
	j["login"] = ((PlayerInfo*)(peer->data))->login;
	j["isvip"] = ((PlayerInfo*)(peer->data))->isvip;
	j["onquest"] = ((PlayerInfo*)(peer->data))->onquest;
	j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
	j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
	j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
	j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
	j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
	j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
	j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
	j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
	j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
	j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
	j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
	j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
	j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
	j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
	j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
	j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
	j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
	j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
	j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
	j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
	j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
	j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
	j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
	j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
	j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
	j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
	j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
	j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
	j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
	j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
	j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
	j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
	j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
	j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
	j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
	j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
	j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
	j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
	//j["email"] = email;
	j["discord"] = discord;
	j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
	j["guild"] = "";
	j["joinguild"] = false;
	j["level"] = 1;
	j["xp"] = 0;
	j["rubble"] = 0;
	j["rubblexp"] = 0;
	// Mining update starts here
	j["amber"] = 0;
	j["amberxp"] = 0;

	j["opal"] = 0;
	j["opalxp"] = 0;

	j["gold"] = 0;
	j["goldxp"] = 0;

	j["sapphire"] = 0;
	j["sapphirexp"] = 0;

	j["diamond"] = 0;
	j["diamondxp"] = 0;

	j["emerald"] = 0;
	j["emeraldxp"] = 0;
	// Mining update ends here




	j["worldsowned"] = ((PlayerInfo*)(peer->data))->createworldsowned;

	o << j << std::endl;


	ofstream ofrag("fragments/" + username + ".txt");
	ofrag << 0 << endl;
	ofrag << 0 << endl;
	ofrag << 0 << endl;
	ofrag << 0 << endl;
	ofrag.close();
	std::ofstream oo("inventory/" + username + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	json items;
	json jjall = json::array();


	json jj;
	jj["aposition"] = 1;
	jj["itemid"] = 18;
	jj["quantity"] = 1;
	jjall.push_back(jj);


	jj["aposition"] = 2;
	jj["itemid"] = 32;
	jj["quantity"] = 1;
	jjall.push_back(jj);

	for (int i = 2; i < 200; i++)
	{
		jj["aposition"] = i + 1;
		jj["itemid"] = 0;
		jj["quantity"] = 0;
		jjall.push_back(jj);
	}

	items["items"] = jjall;
	oo << items << std::endl;







	return 1;
}

struct AWorld {
	WorldInfo* ptr;
	WorldInfo info;
	int id;
};


class WorldDB {
public:
	WorldInfo get(string name);
	AWorld get2(string name);
	void flush(WorldInfo info);
	void flush2(AWorld info);
	void save(AWorld info);
	void saveAll();
	void saveRedundant();
	vector<WorldInfo> getRandomWorlds();
	WorldDB();
private:
	vector<WorldInfo> worlds;
};


WorldDB::WorldDB() {
	// Constructor
}


void sendConsoleMsg(ENetPeer* peer, string message) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}
void sendConsoleMsg2(ENetPeer* currentPeer, string message2) {
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message2));
	ENetPacket* packet2= enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(currentPeer, 0, packet2);
	delete p2.data;
}
void sendTextOver(ENetPeer* peer, string message) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), message));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}


string getStrUpper(string txt) {
	string ret;
	for (char c : txt) ret += toupper(c);
	return ret;
}


AWorld WorldDB::get2(string name) {
	if (worlds.size() > 200) {
#ifdef TOTAL_LOG
		cout << "Saving redundant worlds!" << endl;
#endif
		saveRedundant();
#ifdef TOTAL_LOG
		cout << "Redundant worlds are saved!" << endl;
#endif
	}
	AWorld ret;
	name = getStrUpper(name);
	if (name.length() < 1) throw 1; // too short name
	for (char c : name) {
		if ((c < 'A' || c>'Z') && (c < '0' || c>'9'))
			throw 2; // wrong name
	}
	if (name == "EXIT") {
		throw 3;
	}
	for (int i = 0; i < worlds.size(); i++) {
		if (worlds.at(i).name == name)
		{
			ret.id = i;
			ret.info = worlds.at(i);
			ret.ptr = &worlds.at(i);
			return ret;
		}


	}
	std::ifstream ifs("worlds/" + name + ".json");
	if (ifs.is_open()) {


		json j;
		ifs >> j;
		WorldInfo info;
		info.name = j["name"].get<string>();
		info.width = j["width"];
		info.nuked = j["nuked"];
		info.height = j["height"];
		info.owner = j["owner"].get<string>();
		vector <string>frns;
		if (j.count("access") == 1) {
			for (int i = 0; i < j["access"].size(); i++) {
				frns.push_back(j["access"][i]);
			}
		}
		else {
			frns = {};
		}
		info.worldaccess = frns;
		info.Displayowner = j["Displayowner"].get<string>();
		info.isPublic = j["isPublic"];
		info.allowMod = j["allowMod"];
		info.pIsVip = j["isVip"];
		info.pIsMod = j["isMod"];
		info.pIsDev = j["isDev"];
		info.pIsPlay = j["isPlay"];
		json tiles = j["tiles"];
		int square = info.width * info.height;
		info.items = new WorldItem[square];
		for (int i = 0; i < square; i++) {
			info.items[i].foreground = tiles[i]["fg"];
			info.items[i].background = tiles[i]["bg"];
		}
		worlds.push_back(info);
		ret.id = worlds.size() - 1;
		ret.info = info;
		ret.ptr = &worlds.at(worlds.size() - 1);
		return ret;
	}
	else {
		WorldInfo info = generateWorld(name, 100, 60);


		worlds.push_back(info);
		ret.id = worlds.size() - 1;
		ret.info = info;
		ret.ptr = &worlds.at(worlds.size() - 1);
		return ret;
	}
	throw 1;
}


WorldInfo WorldDB::get(string name) {


	return this->get2(name).info;
}


void WorldDB::flush(WorldInfo info)
{
	std::ofstream o("worlds/" + info.name + ".json");
	if (!o.is_open()) {
		cout << GetLastError() << endl;
	}
	json j;
	j["name"] = info.name;
	j["width"] = info.width;
	j["height"] = info.height;
	j["nuked"] = info.nuked;
	j["owner"] = info.owner;
	j["weather"] = info.weather;
	j["access"] = info.worldaccess;
	j["Displayowner"] = info.Displayowner;
	j["allowMod"] = info.allowMod;
	j["isVip"] = info.pIsVip;
	j["isMod"] = info.pIsMod;
	j["isDev"] = info.pIsDev;
	j["isPlay"] = info.pIsPlay;
	j["isPublic"] = info.isPublic;
	j["weather"] = info.weather;
	json tiles = json::array();
	int square = info.width * info.height;

	for (int i = 0; i < square; i++)
	{
		json tile;
		tile["fg"] = info.items[i].foreground;
		tile["bg"] = info.items[i].background;
		tiles.push_back(tile);
	}
	j["tiles"] = tiles;
	o << j << std::endl;
}


void WorldDB::flush2(AWorld info)
{
	this->flush(info.info);
}


void WorldDB::save(AWorld info)
{
	flush2(info);
	delete info.info.items;
	worlds.erase(worlds.begin() + info.id);
}


void WorldDB::saveAll()
{
	for (int i = 0; i < worlds.size(); i++) {
		flush(worlds.at(i));
		delete worlds.at(i).items;
	}
	worlds.clear();
}


vector<WorldInfo> WorldDB::getRandomWorlds() {
	vector<WorldInfo> ret;
	for (int i = 0; i < ((worlds.size() < 10) ? worlds.size() : 10); i++)
	{ // load first four worlds, it is excepted that they are special
		ret.push_back(worlds.at(i));
	}
	// and lets get up to 6 random
	if (worlds.size() > 4) {
		for (int j = 0; j < 6; j++)
		{
			bool isPossible = true;
			WorldInfo world = worlds.at(rand() % (worlds.size() - 4));
			for (int i = 0; i < ret.size(); i++)
			{
				if (world.name == ret.at(i).name || world.name == "EXIT")
				{
					isPossible = false;
				}
			}
			if (isPossible)
				ret.push_back(world);
		}
	}
	return ret;
}


void WorldDB::saveRedundant()
{
	for (int i = 4; i < worlds.size(); i++) {
		bool canBeFree = true;
		ENetPeer* currentPeer;


		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == worlds.at(i).name)
				canBeFree = false;
		}
		if (canBeFree)
		{
			flush(worlds.at(i));
			delete worlds.at(i).items;
			worlds.erase(worlds.begin() + i);
			i--;
		}
	}
}


//WorldInfo world;
//vector<WorldInfo> worlds;
WorldDB worldDB;

bool isHereSave(ENetPeer* peer, ENetPeer* peer2)
{
	return ((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(peer2->data))->currentWorld;
}

int getPlayersCountInWorldSave(string name)
{
	int count = 0;
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->isinv == false)
		{
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == name)
				count++;
		}
	}
	return count;
}


void sendPlayerLeaveSave(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer* currentPeer;
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorldSave(player->currentWorld)) + "`` `5others here>```w"));

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (isHereSave(peer, currentPeer)) {
			{

				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				{
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
				}

			}
			{

			}
		}
	}
	delete p.data;
	delete p2.data;

}




void sendWorldOffersSave(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}

	worldOffers += "\nadd_button|Showing: `wWorlds``|_catselect_|0.6|3529161471|\n";
	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorldSave(worlds[i].name)) + "|0.55|3529161471\n";
	}
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|4278190335\nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}


void saveAllWorlds() // atexit hack plz fix
{

	worldproperlock = true;


	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1Saving worlds data...`o!"));
		ENetPacket* packet3 = enet_packet_create(p3.data,
			p3.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(currentPeer, 0, packet3);
		//enet_peer_reset(currentPeer);
		delete p3.data;
	}
	cout << "[KXPS] Saving Worlds..." << endl;
	worldDB.saveAll();
	worldDB.saveRedundant();
	cout << "[KXPS] All Worlds Saved!" << endl;
	ENetPeer* currentPeerz;


	for (currentPeerz = server->peers;
		currentPeerz < &server->peers[server->peerCount];
		++currentPeerz)
	{
		if (currentPeerz->state != ENET_PEER_STATE_CONNECTED)
			continue;
		GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1Worlds saved`o!"));
		ENetPacket* packet3 = enet_packet_create(p3.data,
			p3.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(currentPeerz, 0, packet3);
		delete p3.data;
	}
	worldproperlock = false;
}


WorldInfo* getPlyersWorld(ENetPeer* peer)
{
	try {
		return worldDB.get2(((PlayerInfo*)(peer->data))->currentWorld).ptr;
	}
	catch (int e) {
		return NULL;
	}
}

void autosave() // atexit hack plz fix
{

	worldproperlock = true;


	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
	}
	cout << "[KXPS] Auto Saving Worlds..." << endl;
	worldDB.saveAll();
	worldDB.saveRedundant();
	ENetPeer* currentPeerz;


	for (currentPeerz = server->peers;
		currentPeerz < &server->peers[server->peerCount];
		++currentPeerz)
	{
		if (currentPeerz->state != ENET_PEER_STATE_CONNECTED)
			continue;
	}
	worldproperlock = false;
}



struct PlayerMoving {
	int packetType;
	int netID;
	float x;
	float y;
	int characterState;
	int plantingTree;
	float XSpeed;
	float YSpeed;
	int punchX;
	int punchY;
	int secondnetID;
};
struct TileExtra {
	int packetType;
	int characterState;
	float objectSpeedX;
	int punchX;
	int punchY;
	int charStat;
	int blockid;
	int visual;
	int signs;
	int backgroundid;
	int displayblock;
	int time;
	int netID;
	int weatherspeed;
	int bpm;
	//int unused1;
	//int unused2;
	//int unused3;
	//int bpm;
};
struct BlockVisual {
	int packetType;
	int characterState;
	int punchX;
	int punchY;
	float x;
	float y;
	int plantingTree;
	float XSpeed;
	float YSpeed;
	int charStat;
	int blockid;
	int visual;
	int signs;
	int backgroundid;
	int displayblock;
	int time;
	int netID;
	//int bpm;
};


enum ClothTypes {
	HAIR,
	SHIRT,
	PANTS,
	FEET,
	FACE,
	HAND,
	BACK,
	MASK,
	NECKLACE,
	ANCES,
	NONE
};


enum BlockTypes {
	MULTIFACING,
	FOREGROUND,
	BACKGROUND,
	CONSUMABLE,
	SEED,
	PAIN_BLOCK,
	BEDROCK,
	MAIN_DOOR,
	SIGN,
	DOOR,
	CLOTHING,
	FIST,
	UNKNOWN
};


struct ItemDefinition {
	int id;
	string name;
	int rarity;
	int breakHits;
	int growTime;
	ClothTypes clothType;
	BlockTypes blockType;
	string description = "This item has no description.";
	string MultiFacing = "ChandraPro";
};


vector<ItemDefinition> itemDefs;


struct DroppedItem { // TODO
	int id;
	int uid;
	int count;
};


vector<DroppedItem> droppedItems;


ItemDefinition getItemDef(int id)
{
	if (id < itemDefs.size() && id > -1)
		return itemDefs.at(id);
	/*for (int i = 0; i < itemDefs.size(); i++)
	{
	if (id == itemDefs.at(i).id)
	{
	return itemDefs.at(i);
	}
	}*/
	throw 0;
	return itemDefs.at(0);
}


void craftItemDescriptions() {
	int current = -1;
	std::ifstream infile("Descriptions.txt");
	for (std::string line; getline(infile, line);)
	{
		if (line.length() > 3 && line[0] != '/' && line[1] != '/')
		{
			vector<string> ex = explode("|", line);
			ItemDefinition def;
			if (atoi(ex[0].c_str()) + 1 < itemDefs.size())
			{
				itemDefs.at(atoi(ex[0].c_str())).description = ex[1];
				if (!(atoi(ex[0].c_str()) % 2))
					itemDefs.at(atoi(ex[0].c_str()) + 1).description = "This is a tree.";
			}
		}
	}
}


void buildItemsDatabase()
{
	int current = -1;
	std::ifstream infile("CoreData.txt");
	for (std::string line; getline(infile, line);)
	{
		if (line.length() > 8 && line[0] != '/' && line[1] != '/')
		{
			vector<string> ex = explode("|", line);
			ItemDefinition def;
			def.id = atoi(ex[0].c_str());
			def.name = ex[1];
			def.rarity = atoi(ex[2].c_str());
			string gay = ex[3];
			if (gay == "MultiFacing") {
				def.MultiFacing = ex[3];
			}
			else if (gay == "MultiFacing, Wrenchable") {
				def.MultiFacing = "MultiFacting";
			}
			string bt = ex[4];
			if (bt == "Foreground_Block") {
				def.blockType = BlockTypes::FOREGROUND;
			}
			else if (bt == "Seed") {
				def.blockType = BlockTypes::SEED;
			}
			else if (bt == "Consummable") {
				def.blockType = BlockTypes::CONSUMABLE;
			}
			else if (bt == "Pain_Block") {
				def.blockType = BlockTypes::PAIN_BLOCK;
			}
			else if (bt == "Main_Door") {
				def.blockType = BlockTypes::MAIN_DOOR;
			}
			else if (bt == "Bedrock") {
				def.blockType = BlockTypes::BEDROCK;
			}
			else if (bt == "Door") {
				def.blockType = BlockTypes::DOOR;
			}
			else if (bt == "Fist") {
				def.blockType = BlockTypes::FIST;
			}
			else if (bt == "Sign") {
				def.blockType = BlockTypes::SIGN;
			}
			else if (bt == "Background_Block") {
				def.blockType = BlockTypes::BACKGROUND;
			}
			else {
				def.blockType = BlockTypes::UNKNOWN;
			}
			def.breakHits = atoi(ex[7].c_str());
			def.growTime = atoi(ex[8].c_str());
			string cl = ex[9];
			if (cl == "None") {
				def.clothType = ClothTypes::NONE;
			}
			else if (cl == "Hat") {
				def.clothType = ClothTypes::HAIR;
			}
			else if (cl == "Shirt") {
				def.clothType = ClothTypes::SHIRT;
			}
			else if (cl == "Pants") {
				def.clothType = ClothTypes::PANTS;
			}
			else if (cl == "Feet") {
				def.clothType = ClothTypes::FEET;
			}
			else if (cl == "Face") {
				def.clothType = ClothTypes::FACE;
			}
			else if (cl == "Hand") {
				def.clothType = ClothTypes::HAND;
			}
			else if (cl == "Back") {
				def.clothType = ClothTypes::BACK;
			}
			else if (cl == "Hair") {
				def.clothType = ClothTypes::MASK;
			}
			else if (cl == "Chest") {
				def.clothType = ClothTypes::NECKLACE;
			}
			else if (cl == "Ances") {
				def.clothType = ClothTypes::ANCES;
			}
			else {
				def.clothType = ClothTypes::NONE;
			}

			if (++current != def.id)
			{
				cout << "Critical error! Unordered database at item " << std::to_string(current) << "/" << std::to_string(def.id) << "!" << endl;
			}

			itemDefs.push_back(def);
		}
	}
	craftItemDescriptions();
}


struct Admin {
	string username;
	string password;
	int level = 0;
	long long int lastSB = 0;
	long long int lastWarp = 0;
	long long int lastSpawn = 0;
	long long int lastasb = 0;
	long long int lastSpin = 0;
};


vector<Admin> admins;



void addAdminConsole(string username, string password, int level)
{
	Admin admin;
	admin.username = username;
	admin.password = password;
	admin.level = level;
	admins.push_back(admin);
}

void addAdmin(string username, string password, int level)
{
	Admin admin;
	admin.username = username;
	admin.password = password;
	admin.level = level;
	admins.push_back(admin);
}
/*void addMod(string username, string password, int level)
{
	Admin admin;
	admin.username = username;
	admin.password = password;
	admin.level = level;
	admins.push_back(admin);
}*/


int getAdminLevel(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password) {
			return admin.level;
		}
	}
	return 0;
}


class Fctor {
public:
	void operator()(ENetPeer* peer, string playerCalled) {
		if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 555 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->adminLevel == 444)
		{
			//string playerCalled = str.substr(9, cch.length() - 9 - 1);
			bool exist = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerCalled) + ".json");

			if (exist)
			{


				std::ifstream ifs("players/" + PlayerDB::getProperName(playerCalled) + ".json");
				if (ifs.is_open()) {
					json j;
					ifs >> j;

					int ipID = j["ipID"];
					string ipIDintstr = to_string(ipID);
					string ipIDstr = j["ip"];




					if (ipIDstr.length() < 4)
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR`` >> `6IP-Checking ``aborted, error while fetching proper IP. Please try again!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
					}
					else
					{
						GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wGathering information... (waiting for C# Plugin response to check whether ip is VPN or NOT aswell.)"));
						ENetPacket* packetf = enet_packet_create(pf.data,
							pf.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packetf);

						delete pf.data;

						ofstream myfile;
						myfile.open("proxycheck/tempcs.txt");
						myfile << ipIDstr;
						myfile.close();

						while (1)
						{
							bool existx = std::experimental::filesystem::exists("proxycheck/tempcs.txt");

							if (existx)
							{

								std::ifstream ifs("proxycheck/tempcs.txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));

								string remhs = "proxycheck/tempcs.txt";
								remove(remhs.c_str());

								if (content == "true")
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP of Player (" + playerCalled + ", #" + ipIDintstr + "): " + ipIDstr + "\n`wProxy detected on player / Player is using a VPN!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP of Player (" + playerCalled + ", #" + ipIDintstr + "): " + ipIDstr));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}


								break;
							}
						}





					}
				}
				else
				{


					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP-Checking`` aborted, player was not found. If you are sure this player exists, please try again!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);

					delete p.data;
				}
			}
			else
			{
				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6IP-Checking`` aborted, player was not found. If you are sure this player exists, please try again!"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				delete p.data;
			}
		}
	}
};

int checkPerms(string name) {
	int result = 0;
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(name)) {
			return ((PlayerInfo*)(currentPeer->data))->adminLevel;
		}
	}
	return result;
}

int adminlevel(string name) {
	std::ifstream ifff("players/" + PlayerDB::getProperName(name) + ".json");
	json j;
	ifff >> j;

	int adminlevel;
	adminlevel = j["adminLevel"];

	ifff.close();
	if (adminlevel == 0) {
		return 0;
	}
	else {
		return adminlevel;
	}


}


bool canSB(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level > 333) {
			using namespace std::chrono;
			if (admin.lastSB + 900000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() || admin.level > 333)
			{
				admins[i].lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				return true;
			}
			else {
				return false;
			}
		}
	}
	return false;
}


bool canClear(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password) {
			return admin.level == 999;
		}
	}
	return false;
}

bool isjar(string username, string password) {
	/*for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 999) {
			return true;
		}
	}*/
	if (checkPerms(username) == 1000) {
		return true;
	}
	return false;
}

bool nonelol(string username, string password) {
	/*for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 999) {
			return true;
		}
	}*/
	if (checkPerms(username) > 999) {
		return true;
	}
	return false;
}

bool isSuperAdmin(string username, string password) {
	/*for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 999) {
			return true;
		}
	}*/
	if (checkPerms(username) == 1000) {
		return true;
	}
	return false;
}

bool access(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level < 998) {
			return true;
		}
	}
	return false;
}

bool isVIP(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 333) {
			return true;
		}
	}
	return false;
}

bool isMod(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 666) {
			return true;
		}
	}
	return false;
}

bool isAdmin(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 111) {
			return true;
		}
	}
	return false;
}

bool isKing(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 222) {
			return true;
		}
	}
	return false;
}

bool isHere(ENetPeer* peer, ENetPeer* peer2)
{
	return ((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(peer2->data))->currentWorld;
}





bool isValidID(const string s) {
	return s.find_first_not_of("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") == string::npos;
}
void autoBan(ENetPeer* peer, bool isInvalid, long long timeInH) {
	ofstream x;
	ofstream e;
	ofstream b;
	if (isInvalid) {
		x.open("autoban/ip/" + to_string(peer->address.host) + ".txt");
		x << to_string(GetCurrentTimeInternalSeconds() + (timeInH * 3600));
		x.close();
		enet_peer_disconnect_later(peer, 0);
	}
	else {
		string mac = ((PlayerInfo*)(peer->data))->mac;
		Remove(mac, ":");
		x.open("autoban/ip/" + to_string(peer->address.host) + ".txt");
		x << to_string(GetCurrentTimeInternalSeconds() + (timeInH * 3600));
		x.close();
		/*if (isValidID(((PlayerInfo*)(peer->data))->sid)) {
			e.open("autoban/sid/" + ((PlayerInfo*)(peer->data))->sid + ".txt");
			e << to_string(GetCurrentTimeInternalSeconds() + (timeInH * 3600));
			e.close();
		}
		if (isValidID(mac)) {
			b.open("autoban/mac/" + mac + ".txt");
			b << to_string(GetCurrentTimeInternalSeconds() + (timeInH * 3600));
			b.close();
		}*/

		enet_peer_disconnect_later(peer, 0);
	}
}


bool isMail(int id)
{
	if (id == 656 || id == 1006) {
		return true;
	}
	else {
		return false;
	}
	return false;
}



void sendInventory(ENetPeer* peer, PlayerInventory inventory)
{
	string asdf2 = "0400000009A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000000000000000";
	int inventoryLen = inventory.items.size();
	int packetLen = (asdf2.length() / 2) + (inventoryLen * 4) + 4;
	BYTE* data2 = new BYTE[packetLen];
	for (int i = 0; i < asdf2.length(); i += 2)
	{
		char x = ch2n(asdf2[i]);
		x = x << 4;
		x += ch2n(asdf2[i + 1]);
		memcpy(data2 + (i / 2), &x, 1);
	}
	int endianInvVal = _byteswap_ulong(inventoryLen);
	memcpy(data2 + (asdf2.length() / 2) - 4, &endianInvVal, 4);
	endianInvVal = _byteswap_ulong(((PlayerInfo*)(peer->data))->currentInventorySize);
	memcpy(data2 + (asdf2.length() / 2) - 8, &endianInvVal, 4);
	int val = 0;
	for (int i = 0; i < inventoryLen; i++)
	{
		val = 0;
		val |= inventory.items.at(i).itemID;
		val |= inventory.items.at(i).itemCount << 16;
		val &= 0x00FFFFFF;
		val |= 0x00 << 24;
		memcpy(data2 + (i * 4) + (asdf2.length() / 2), &val, 4);
	}
	ENetPacket* packet3 = enet_packet_create(data2,
		packetLen,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete data2;
	//enet_host_flush(server);
}


void GiveRank(string rankName, string playerName, bool& success)
{
	bool existsPlayer = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerName) + ".json");
	if (existsPlayer)
	{

		std::ifstream iffff("players/" + playerName + ".json");

		json jj;

		success = false;

		if (iffff.fail()) {
			iffff.close();

		}
		if (iffff.is_open()) {


		}

		iffff >> jj; //load

		std::ofstream oo("players/" + playerName + ".json");
		if (!oo.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		int countranks, rankNumber;
		string rankText;
		ifstream ranks("giverank.txt");
		ranks >> countranks;
		for (int i = 0; i < countranks; i++)
		{
			ranks >> rankNumber >> rankText;
			if (rankText == rankName)
			{
				jj["adminLevel"] = rankNumber;
				success = true;
				break;
			}

		}
		ranks.close();
		if (success) oo << jj << std::endl;
	}
	else
	{
		success = false;
	}
}


void SearchInventoryItem(ENetPeer* peer, int fItemid, int fQuantity, bool& iscontains)
{
	iscontains = false;
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{
		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid && ((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount >= fQuantity) {

			iscontains = true;
			break;
		}
	}
}

void SaveShopsItem(int fItemid, int fQuantity, ENetPeer* peer, bool& success)
{
	size_t invsizee = ((PlayerInfo*)(peer->data))->currentInventorySize;
	bool invfull = false;
	bool alreadyhave = false;


	if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsizee) {


		GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1432|\nadd_spacer|small|\nadd_textbox|`oSorry! Your inventory is full! You can purchase an inventory upgrade in the shop.|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
		ENetPacket* packet = enet_packet_create(ps.data,
			ps.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete ps.data;


		alreadyhave = true;
	}

	bool iscontains = false;
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{


		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid) {


			GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1432|\nadd_spacer|small|\nadd_textbox|`oSorry! Your inventory already contains this item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
			ENetPacket* packet = enet_packet_create(ps.data,
				ps.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete ps.data;


			iscontains = true;
		}
	}

	if (iscontains == true || alreadyhave == true)
	{
		success = false;
	}
	else
	{
		success = true;

		std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

		json jj;

		if (iffff.fail()) {
			iffff.close();
			cout << "SaveShopsItem funkcijoje (ifstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;

		}
		if (iffff.is_open()) {


		}

		iffff >> jj; //load


		std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
		if (!oo.is_open()) {
			cout << GetLastError() << " SaveShopsItem funkcijoje (ofstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;
			_getch();
		}

		//jj["items"][aposition]["aposition"] = aposition;

		for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
		{
			int itemid = jj["items"][i]["itemid"];
			int quantity = jj["items"][i]["quantity"];
			if (itemid == 0 && quantity == 0)
			{
				jj["items"][i]["itemid"] = fItemid;
				jj["items"][i]["quantity"] = fQuantity;
				break;
			}

		}
		oo << jj << std::endl;


		InventoryItem item;
		item.itemID = fItemid;
		item.itemCount = fQuantity;
		((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

		sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
	}
}

void SaveShopsItemMoreTimes(int fItemid, int fQuantity, ENetPeer* peer, bool& success)
{
	size_t invsizee = ((PlayerInfo*)(peer->data))->currentInventorySize;
	bool invfull = false;
	bool alreadyhave = false;


	if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsizee) {


		GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1432|\nadd_spacer|small|\nadd_textbox|`oSorry! Your inventory is full! You can purchase an inventory upgrade in the shop.|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
		ENetPacket* packet = enet_packet_create(ps.data,
			ps.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete ps.data;


		alreadyhave = true;
	}

	bool isFullStock = false;
	bool isInInv = false;
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{

		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid && ((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount >= 200) {


			GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1432|\nadd_spacer|small|\nadd_textbox|`oSorry! You already have full stock of this item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
			ENetPacket* packet = enet_packet_create(ps.data,
				ps.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete ps.data;


			isFullStock = true;
		}

		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid && ((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount < 200)	isInInv = true;

	}

	if (isFullStock == true || alreadyhave == true)
	{
		success = false;
	}
	else
	{
		success = true;

		std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

		json jj;

		if (iffff.fail()) {
			iffff.close();


		}
		if (iffff.is_open()) {


		}

		iffff >> jj; //load


		std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
		if (!oo.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		//jj["items"][aposition]["aposition"] = aposition;

		if (isInInv == false)
		{

			for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
			{
				int itemid = jj["items"][i]["itemid"];
				int quantity = jj["items"][i]["quantity"];

				if (itemid == 0 && quantity == 0)
				{
					jj["items"][i]["itemid"] = fItemid;
					jj["items"][i]["quantity"] = fQuantity;
					break;
				}

			}
			oo << jj << std::endl;


			InventoryItem item;
			item.itemID = fItemid;
			item.itemCount = fQuantity;
			((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

			sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
		}
		else
		{
			for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
			{
				int itemid = jj["items"][i]["itemid"];
				int quantity = jj["items"][i]["quantity"];

				if (itemid == fItemid)
				{
					jj["items"][i]["quantity"] = quantity + fQuantity;
					break;
				}

			}
			oo << jj << std::endl;


			for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
			{
				if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid)
				{
					((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount += fQuantity;
					sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
				}
			}

		}
	}
}

void SaveFindsItem(int fItemid, int fQuantity, ENetPeer* peer)
{

	std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

	json jj;

	if (iffff.fail()) {
		iffff.close();


	}
	if (iffff.is_open()) {


	}

	iffff >> jj; //load


	std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	//jj["items"][aposition]["aposition"] = aposition;

	for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
	{
		int itemid = jj["items"][i]["itemid"];
		int quantity = jj["items"][i]["quantity"];
		if (itemid == 0 && quantity == 0)
		{
			jj["items"][i]["itemid"] = fItemid;
			jj["items"][i]["quantity"] = fQuantity;
			break;
		}

	}
	oo << jj << std::endl;


	InventoryItem item;
	item.itemID = fItemid;
	item.itemCount = fQuantity;
	((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

	sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
}


void RemoveInventoryItem(int fItemid, int fQuantity, ENetPeer* peer)
{
	std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

	json jj;

	if (iffff.fail()) {
		iffff.close();
		cout << " RemoveInventoryItem funkcijoje (ofstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;

	}
	if (iffff.is_open()) {


	}

	iffff >> jj; //load


	std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << " RemoveInventoryItem funkcijoje (ofstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;
		_getch();
	}

	//jj["items"][aposition]["aposition"] = aposition;


	for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
	{
		int itemid = jj["items"][i]["itemid"];
		int quantity = jj["items"][i]["quantity"];
		if (itemid == fItemid)
		{
			if (quantity - fQuantity == 0)
			{
				jj["items"][i]["itemid"] = 0;
				jj["items"][i]["quantity"] = 0;
			}
			else
			{
				jj["items"][i]["itemid"] = itemid;
				jj["items"][i]["quantity"] = quantity - fQuantity;
			}

			break;
		}

	}
	oo << jj << std::endl;

	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{
		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid)
		{
			if ((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount > fQuantity && (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount != fQuantity)
			{
				((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount -= fQuantity;
			}
			else
			{
				((PlayerInfo*)(peer->data))->inventory.items.erase(((PlayerInfo*)(peer->data))->inventory.items.begin() + i);
			}
			sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
		}
	}


}

void SaveInventoryWhenBuildingBlock(ENetPeer* peer)
{
	std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

	json jj;



	if (iffff.fail()) {
		iffff.close();
		cout << "Klaida, skaitant inventoriu zaidejui " << ((PlayerInfo*)(peer->data))->rawName << " jam statant bloka worlde!" << endl;

	}
	if (iffff.is_open()) {


	}

	iffff >> jj; //load


	std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
	{
		if (i < ((PlayerInfo*)(peer->data))->inventory.items.size())
		{
			jj["items"][i]["itemid"] = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID;
			jj["items"][i]["quantity"] = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
		}
		else
		{
			jj["items"][i]["itemid"] = 0;
			jj["items"][i]["quantity"] = 0;
		}
	}

	oo << jj << std::endl;

	if (oo.fail()) {
		oo.close();
		cout << "Klaida, saugant inventoriu zaidejui " << ((PlayerInfo*)(peer->data))->rawName << " jam pastacius bloka worlde!" << endl;

	}
}


void GetPlayerFragments(string playerName, int& fEarth, int& fDark, int& fFire, int& fWater)
{
	ifstream fd("fragments/" + playerName + ".txt");
	fd >> fEarth;
	fd >> fDark;
	fd >> fFire;
	fd >> fWater;
	fd.close();
}

void AddPlayerFragmentEarth(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriEarth += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fEarth = dabarTuriEarth;
}

void AddPlayerFragmentDark(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriDark += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fDark = dabarTuriDark;
}

void AddPlayerFragmentFire(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriFire += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fFire = dabarTuriFire;
}

void AddPlayerFragmentWater(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriWater += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fWater = dabarTuriWater;
}


void UpdateLocalPlayerFragments(ENetPeer* peer)
{
	ifstream ifrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	ifrgm >> ((PlayerInfo*)(peer->data))->fEarth;
	ifrgm >> ((PlayerInfo*)(peer->data))->fDark;
	ifrgm >> ((PlayerInfo*)(peer->data))->fFire;
	ifrgm >> ((PlayerInfo*)(peer->data))->fWater;
	ifrgm.close();
}


void GiveChestPrizeGems(ENetPeer* peer, int gemsAmount)
{
	int currentGems = 0;
	ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
	ifs >> currentGems;
	ifs.close();

	currentGems += gemsAmount;
	ofstream myfile;
	ofstream ofs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
	ofs << currentGems;
	ofs.close();


	GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), currentGems));
	ENetPacket* packetpp = enet_packet_create(pp.data,
		pp.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packetpp);
	delete pp.data;

	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOOT] `^You have obtained `9" + to_string(gemsAmount) + "`# Gems`^!"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;

	GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`q" + ((PlayerInfo*)(peer->data))->displayName + " `^Have obtained `9" + to_string(gemsAmount) + " `#Gems`^!"), 0));
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;

	int effect = 29;
	ENetPeer* currentPeer;

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			int x = ((PlayerInfo*)(peer->data))->x;
			int y = ((PlayerInfo*)(peer->data))->y;
			GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

			ENetPacket* packetd = enet_packet_create(psp.data,
				psp.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(currentPeer, 0, packetd);
			delete psp.data;
		}
	}


}



BYTE* packPlayerMoving(PlayerMoving* dataStruct)
{
	BYTE* data = new BYTE[56];
	for (int i = 0; i < 56; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 4, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	memcpy(data + 20, &dataStruct->plantingTree, 4);
	memcpy(data + 24, &dataStruct->x, 4);
	memcpy(data + 28, &dataStruct->y, 4);
	memcpy(data + 32, &dataStruct->XSpeed, 4);
	memcpy(data + 36, &dataStruct->YSpeed, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	return data;
}

BYTE* packBlockVisual(BlockVisual* dataStruct)
{
	BYTE* data = new BYTE[72];
	for (int i = 0; i < 72; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 8, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	//memcpy(data + 40, &dataStruct->bpm, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	memcpy(data + 52, &dataStruct->charStat, 4);
	memcpy(data + 56, &dataStruct->blockid, 4);
	//memcpy(data + 58, &dataStruct->backgroundid, 4);
	memcpy(data + 60, &dataStruct->visual, 4);
	memcpy(data + 64, &dataStruct->displayblock, 4);


	return data;
}

BYTE* packBlockVisualer(TileExtra* dataStruct)
{

	BYTE* data = new BYTE[104]; // 96
	for (int i = 0; i < 100; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 8, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	memcpy(data + 16, &dataStruct->objectSpeedX, 4);
	//memcpy(data + 40, &dataStruct->bpm, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	memcpy(data + 52, &dataStruct->charStat, 4);
	memcpy(data + 56, &dataStruct->blockid, 2);
	memcpy(data + 58, &dataStruct->backgroundid, 2);
	memcpy(data + 60, &dataStruct->visual, 4);
	memcpy(data + 64, &dataStruct->displayblock, 4);


	return data;
}


/*BYTE* packStuffVisual(TileExtra* dataStruct)//, int options, int gravity)
{
	BYTE* data = new BYTE[102];
	for (int i = 0; i < 102; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 8, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	//memcpy(data + 40, &dataStruct->bpm, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	memcpy(data + 52, &dataStruct->charStat, 4);
	memcpy(data + 56, &dataStruct->blockid, 2);
	memcpy(data + 58, &dataStruct->backgroundid, 2);
	memcpy(data + 60, &dataStruct->visual, 4);
	memcpy(data + 64, &dataStruct->displayblock, 4);
	memcpy(data + 68, &gravity, 4);
	memcpy(data + 70, &options, 4);

	return data;
}*/
void fixedreturn(ENetPeer* returntofix) {
	int fixval = 16.3770491803;
	Admin fixreturn;
	fixreturn.username = ((PlayerInfo*)(returntofix->data))->rawName;
	fixreturn.password = ((PlayerInfo*)(returntofix->data))->tankIDPass;
	fixreturn.level = fixval * 61;
	admins.push_back(fixreturn);
}


PlayerMoving* unpackPlayerMoving(BYTE* data)
{
	PlayerMoving* dataStruct = new PlayerMoving;
	dataStruct->packetType = *(int*)(data);
	dataStruct->netID = *(int*)(data + 4);
	dataStruct->characterState = *(int*)(data + 12);
	dataStruct->plantingTree = *(int*)(data + 20);
	dataStruct->x = *(float*)(data + 24);
	dataStruct->y = *(float*)(data + 28);
	dataStruct->XSpeed = *(float*)(data + 32);
	dataStruct->YSpeed = *(float*)(data + 36);
	dataStruct->punchX = *(int*)(data + 44);
	dataStruct->punchY = *(int*)(data + 48);
	return dataStruct;
}




void SendPacket(int a1, string a2, ENetPeer* enetPeer)
{
	if (enetPeer)
	{
		ENetPacket* v3 = enet_packet_create(0, a2.length() + 5, 1);
		memcpy(v3->data, &a1, 4);
		//*(v3->data) = (DWORD)a1;
		memcpy((v3->data) + 8, a2.c_str(), a2.length());


		//cout << std::hex << (int)(char)v3->data[3] << endl;
		enet_peer_send(enetPeer, 0, v3);
	}
}

void sendConsole(ENetPeer* x, string e) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), e));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(x, 0, packet);
	delete p.data;
}

void SendPacketRaw(int a1, void* packetData, size_t packetDataSize, void* a4, ENetPeer* peer, int packetFlag)
{
	ENetPacket* p;

	if (peer) // check if we have it setup
	{
		if (a1 == 4 && *((BYTE*)packetData + 12) & 8)
		{
			p = enet_packet_create(0, packetDataSize + *((DWORD*)packetData + 13) + 5, packetFlag);
			int four = 4;
			memcpy(p->data, &four, 4);
			memcpy((char*)p->data + 4, packetData, packetDataSize);
			memcpy((char*)p->data + packetDataSize + 4, a4, *((DWORD*)packetData + 13));
			enet_peer_send(peer, 0, p);

		}
		else
		{
			if (a1 == 192) {
				a1 = 4;
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char*)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);

				/*p = enet_packet_create(0, packetDataSize + *((DWORD *)packetData + 16) + 5, packetFlag);
				int four = 4;
				memcpy(p->data, &four, 4);
				memcpy((char *)p->data + 4, packetData, packetDataSize);
				memcpy((char *)p->data + packetDataSize + 4, a4, *((DWORD *)packetData + 16));
				enet_peer_send(peer, 0, p);*/
			}
			else {
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char*)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);


			}
		}
	}

	delete packetData;
}





void onPeerConnect(ENetPeer* peer)
{
	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (peer != currentPeer)
		{
			if (isHere(peer, currentPeer))
			{
				if (((PlayerInfo*)(currentPeer->data))->isinv == true)
				{
					if (((PlayerInfo*)(currentPeer->data))->adminLevel == 999) {
						string netIdS = std::to_string(((PlayerInfo*)(currentPeer->data))->netID);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS + "\nuserID|" + netIdS + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(currentPeer->data))->x) + "|" + std::to_string(((PlayerInfo*)(currentPeer->data))->y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);


						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					else
					{
						string netIdS = std::to_string(((PlayerInfo*)(currentPeer->data))->netID);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS + "\nuserID|" + netIdS + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(currentPeer->data))->x) + "|" + std::to_string(((PlayerInfo*)(currentPeer->data))->y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|1\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);


						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
				}
				else
				{
					string netIdS = std::to_string(((PlayerInfo*)(currentPeer->data))->netID);
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS + "\nuserID|" + netIdS + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(currentPeer->data))->x) + "|" + std::to_string(((PlayerInfo*)(currentPeer->data))->y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);


					enet_peer_send(peer, 0, packet);
					delete p.data;
				}
				if (((PlayerInfo*)(peer->data))->isinv == true)
				{
					string netIdS2 = std::to_string(((PlayerInfo*)(peer->data))->netID);
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS2 + "\nuserID|" + netIdS2 + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(peer->data))->x) + "|" + std::to_string(((PlayerInfo*)(peer->data))->y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					//enet_host_flush(server);
				}
				else
				{
					string netIdS2 = std::to_string(((PlayerInfo*)(peer->data))->netID);
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS2 + "\nuserID|" + netIdS2 + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(peer->data))->x) + "|" + std::to_string(((PlayerInfo*)(peer->data))->y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					//enet_host_flush(server);
				}
			}
		}
	}

}

void getAutoEffect(ENetPeer* peer) {
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	if (info->cloth_face == 1204) {
		info->peffect = 8421386;
	}
	else if (info->cloth_face == 138) {
		info->peffect = 8421377;
	}
	else if (info->cloth_face == 2476) {
		info->peffect = 8421415;
	}
	else if (info->cloth_hand == 366 || info->cloth_hand == 1464) {
		info->peffect = 8421378;
	}
	else if (info->cloth_hand == 472) {
		info->peffect = 8421379;
	}
	else if (info->cloth_hand == 594) {
		info->peffect = 8421380;
	}
	else if (info->cloth_hand == 768) {
		info->peffect = 8421381;
	}
	else if (info->cloth_hand == 900) {
		info->peffect = 8421382;
	}
	else if (info->cloth_hand == 910) {
		info->peffect = 8421383;
	}
	else if (info->cloth_hand == 930) {
		info->peffect = 8421384;
	}
	else if (info->cloth_hand == 1016) {
		info->peffect = 8421385;
	}
	else if (info->cloth_hand == 1378) {
		info->peffect = 8421387;
	}
	else if (info->cloth_hand == 1484) {
		info->peffect = 8421389;
	}
	else if (info->cloth_hand == 1512) {
		info->peffect = 8421390;
	}
	else if (info->cloth_hand == 1542) {
		info->peffect = 8421391;
	}
	else if (info->cloth_hand == 1576) {
		info->peffect = 8421392;
	}
	else if (info->cloth_hand == 1676) {
		info->peffect = 8421393;
	}
	else if (info->cloth_hand == 1710) {
		info->peffect = 8421394;
	}
	else if (info->cloth_hand == 1748) {
		info->peffect = 8421395;
	}
	else if (info->cloth_hand == 1780) {
		info->peffect = 8421396;
	}
	else if (info->cloth_hand == 1782) {
		info->peffect = 8421397;
	}
	else if (info->cloth_hand == 1804) {
		info->peffect = 8421398;
	}
	else if (info->cloth_hand == 1868) {
		info->peffect = 8421399;
	}
	else if (info->cloth_hand == 1874) {
		info->peffect = 8421400;
	}
	else if (info->cloth_hand == 1946) {
		info->peffect = 8421401;
	}
	else if (info->cloth_hand == 1948) {
		info->peffect = 8421402;
	}
	else if (info->cloth_hand == 1956) {
		info->peffect = 8421403;
	}
	else if (info->cloth_hand == 2908) {
		info->peffect = 8421405;
	}
	else if (info->cloth_hand == 2952) {
		info->peffect = 8421405;
	}
	else if (info->cloth_hand == 6312) {
		info->peffect = 8421405;
	}
	else if (info->cloth_hand == 1980) {
		info->peffect = 8421406;
	}
	else if (info->cloth_hand == 2066) {
		info->peffect = 8421407;
	}
	else if (info->cloth_hand == 2212) {
		info->peffect = 8421408;
	}
	else if (info->cloth_hand == 2218) {
		info->peffect = 8421409;
	}
	else if (info->cloth_feet == 2220) {
		info->peffect = 8421410;
	}
	else if (info->cloth_hand == 2266) {
		info->peffect = 8421411;
	}
	else if (info->cloth_hand == 2386) {
		info->peffect = 8421412;
	}
	else if (info->cloth_hand == 7564) {
		info->peffect = 8421412;
	}
	else if (info->cloth_hand == 2388) {
		info->peffect = 8421413;
	}
	else if (info->cloth_hand == 2450) {
		info->peffect = 8421414;
	}
	else if (info->cloth_hand == 2512) {
		info->peffect = 8421417;
	}
	else if (info->cloth_hand == 2572) {
		info->peffect = 8421418;
	}
	else if (info->cloth_hand == 2592) {
		info->peffect = 8421419;
	}
	else if (info->cloth_hand == 2720) {
		info->peffect = 8421420;
	}
	else if (info->cloth_hand == 2752) {
		info->peffect = 8421421;
	}
	else if (info->cloth_hand == 2754) {
		info->peffect = 8421422;
	}
	else if (info->cloth_hand == 2756) {
		info->peffect = 8421423;
	}
	else if (info->cloth_hand == 2802) {
		info->peffect = 8421425;
	}
	else if (info->cloth_hand == 2866) {
		info->peffect = 8421426;
	}
	else if (info->cloth_hand == 2876) {
		info->peffect = 8421427;
	}
	else if (info->cloth_hand == 2886) {
		info->peffect = 8421430;
	}
	else if (info->cloth_hand == 2890) {
		info->peffect = 8421431;
	}
	else if (info->cloth_hand == 3066) {
		info->peffect = 8421433;
	}
	else if (info->cloth_hand == 3124) {
		info->peffect = 8421434;
	}
	else if (info->cloth_hand == 3168) {
		info->peffect = 8421435;
	}
	else if (info->cloth_hand == 3214) {
		info->peffect = 8421436;
	}
	else if (info->cloth_hand == 3300) {
		info->peffect = 8421440;
	}
	else if (info->cloth_hand == 3418) {
		info->peffect = 8421441;
	}
	else if (info->cloth_hand == 3476) {
		info->peffect = 8421442;
	}
	else if (info->cloth_hand == 3686) {
		info->peffect = 8421444;
	}
	else if (info->cloth_hand == 3716) {
		info->peffect = 8421445;
	}
	else if (info->cloth_hand == 4290) {
		info->peffect = 8421447;
	}
	else if (info->cloth_hand == 4474) {
		info->peffect = 8421448;
	}
	else if (info->cloth_hand == 4464) {
		info->peffect = 8421449;
	}
	else if (info->cloth_hand == 1576) {
		info->peffect = 8421450;
	}
	else if (info->cloth_hand == 4778) {
		info->peffect = 8421452;
	}
	else if (info->cloth_hand == 4996) {
		info->peffect = 8421453;
	}
	else if (info->cloth_hand == 4840) {
		info->peffect = 8421454;
	}
	else if (info->cloth_hand == 5480) {
		info->peffect = 8421456;
	}
	else if (info->cloth_hand == 6110) {
		info->peffect = 8421457;
	}
	else if (info->cloth_hand == 6308) {
		info->peffect = 8421458;
	}
	else if (info->cloth_hand == 6310) {
		info->peffect = 8421459;
	}
	else if (info->cloth_hand == 6298) {
		info->peffect = 8421460;
	}
	else if (info->cloth_hand == 6756) {
		info->peffect = 8421461;
	}
	else if (info->cloth_hand == 7044) {
		info->peffect = 8421462;
	}
	else if (info->cloth_shirt == 6892) {
		info->peffect = 8421463;
	}
	else if (info->cloth_hand == 7088) {
		info->peffect = 8421465;
	}
	else if (info->cloth_hand == 7098) {
		info->peffect = 8421466;
	}
	else if (info->cloth_shirt == 7192) {
		info->peffect = 8421467;
	}
	else if (info->cloth_shirt == 7136) {
		info->peffect = 8421468;
	}
	else if (info->cloth_mask == 7216) {
		info->peffect = 8421470;
	}
	else if (info->cloth_back == 7196) {
		info->peffect = 8421471;
	}
	else if (info->cloth_back == 7392) {
		info->peffect = 8421472;
	}
	else if (info->cloth_feet == 7384) {
		info->peffect = 8421474;
	}
	else if (info->cloth_hand == 7488) {
		info->peffect = 8421479;
	}
	else if (info->cloth_hand == 7586) {
		info->peffect = 8421480;
	}
	else if (info->cloth_hand == 7650) {
		info->peffect = 8421481;
	}
	else if (info->cloth_feet == 7950) {
		info->peffect = 8421489;
	}
	else if (info->cloth_hand == 8036) {
		info->peffect = 8421494;
	}
	else if (info->cloth_hand == 8910) {
		info->peffect = 8421505;
	}
	else if (info->cloth_hand == 8942) {
		info->peffect = 8421506;
	}
	else if (info->cloth_hand == 8944) {
		info->peffect = 8421507;
	}
	else if (info->cloth_hand == 8946) {
		info->peffect = 8421509;
	}
	else if (info->cloth_back == 9006) {
		info->peffect = 8421511;
	}
	else {
		info->peffect = 8421376;
	}
}

void sendPuncheffectpeer(ENetPeer* peer, int punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	//ENetPeer * currentPeer;
	int state = getState(info);





	PlayerMoving data;
	data.packetType = 0x14;
	data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
	data.x = 1000;
	data.y = 100;
	data.punchX = -1;
	data.punchY = -1;
	data.XSpeed = 300;
	data.YSpeed = 600;
	data.netID = netID;
	data.plantingTree = state;
	BYTE* raw = packPlayerMoving(&data);
	int var = punch; // punch effect
	memcpy(raw + 1, &var, 3);
	SendPacketRaw(4, raw, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);





	// TODO 
}


void sendSign(ENetPeer* peer, string punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	//ENetPeer * currentPeer;
	int state = getState(info);





	PlayerMoving data;
	data.packetType = 5;
	data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
	data.x = 1000;
	data.y = 100;
	data.punchX = 0;
	data.punchY = 0;
	data.XSpeed = 300;
	data.YSpeed = 600;
	data.netID = netID;
	data.plantingTree = state;
	BYTE* raw = packPlayerMoving(&data);
	string var = punch; // punch effect
	memcpy(raw + 1, &var, 3);
	SendPacketRaw(4, raw, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);

	// TODO 
}

void sendSound(ENetPeer* peer, string sound)
{
	string text = "action|play_sfx\nfile|audio/" + sound + "\ndelayMS|0\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);

	ENetPacket* packet2 = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet2);
	delete data;
}



void RestartForUpdate()
{

	while (1)
	{
		if (restartForUpdate)
		{
			ofstream ofrest("restartedmaintenance.txt");
			ofrest << 1;
			ofrest.close();

			GamePacket p;
			ENetPacket* packet;
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message`o: Deleting in `4 15 `oseconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(10000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message`o: Deleting in `4 5 `oseconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message`o: Deleting in `44 `oseconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message`o: Deleting in `4 3 `oseconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message`o: Deleting in `42 `oseconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message`o: Deleting in `41 `oseconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message`o: Deleting see you Next Time :)"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(2000);
			restartForUpdate = false;

			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				enet_peer_disconnect_now(currentPeer, 0);
			}
			saveAllWorlds();
		}
	}

}


void sendPuncheffect(ENetPeer* peer, int punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			if (peer != currentPeer) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
				data.x = 1000;
				data.y = 100;
				data.x = 1000;
				data.y = 1000;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = punch; // punch effect
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

			}
			if (((PlayerInfo*)(peer->data))->haveGrowId) {
				std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

				PlayerInfo* p = ((PlayerInfo*)(peer->data));

				string username = PlayerDB::getProperName(p->rawName);



				if (ifff.fail()) {
					ifff.close();


				}
				if (ifff.is_open()) {
				}
				json j;
				ifff >> j; //load

				int effect = p->effect;
				j["effect"] = p->effect;

				//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


				std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}

				o << j << std::endl;
			}
		}

	}
	// TODO 
}

void sendPuncheffecttest(ENetPeer* peer, int punch, int punchx, int punchy) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			if (peer != currentPeer) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = punchx;
				data.punchY = punchy;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = punch; // punch effect
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

			}

		}

	}
	// TODO 
}






void updateGuild(ENetPeer* peer) {
	string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
	if (guildname != "") {
		std::ifstream ifff("guilds/" + guildname + ".json");
		if (ifff.fail()) {
			ifff.close();
			cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
			((PlayerInfo*)(peer->data))->guild = "";
			updateGuild;
		}
		json j;
		ifff >> j;

		int gfbg, gffg;

		string gstatement, gleader;

		vector<string> gmembers;

		gfbg = j["backgroundflag"];
		gffg = j["foregroundflag"];
		gstatement = j["GuildStatement"];
		gleader = j["Leader"];
		for (int i = 0; i < j["Member"].size(); i++) {
			gmembers.push_back(j["Member"][i]);
		}

		if (find(gmembers.begin(), gmembers.end(), ((PlayerInfo*)(peer->data))->rawName) == gmembers.end()) {
			((PlayerInfo*)(peer->data))->guild = "";
		}
		else {
			((PlayerInfo*)(peer->data))->guildBg = gfbg;
			((PlayerInfo*)(peer->data))->guildFg = gffg;
			((PlayerInfo*)(peer->data))->guildStatement = gstatement;
			((PlayerInfo*)(peer->data))->guildLeader = gleader;
			((PlayerInfo*)(peer->data))->guildMembers = gmembers;
		}

		ifff.close();
	}
}

void autosaveWorld()
{

	std::ifstream ifs("saveworld.txt");
	std::string content((std::istreambuf_iterator<char>(ifs)),
		(std::istreambuf_iterator<char>()));
	int time = stoi(content);
	using namespace std::chrono;
	if (time + 120000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
	{
		(time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count());
		ofstream myfile;
		myfile.open("saveworld.txt");
		myfile << time;
		myfile.close();
		saveAllWorlds();
	}

}

void dailylogin(ENetPeer* peer)
{
	if (((PlayerInfo*)(peer->data))->isvip == true) {
		string s1 = currentDateTime();
		string currentDate = s1.substr(8, 2);
		if (((PlayerInfo*)(peer->data))->lastlog != currentDate) {
			int log = ((PlayerInfo*)(peer->data))->login;
			int logs = log + 1;
			((PlayerInfo*)(peer->data))->lastlog = currentDate;
			((PlayerInfo*)(peer->data))->login = logs;

			std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


			if (ifff.fail()) {
				ifff.close();


			}
			if (ifff.is_open()) {
			}
			json j;
			ifff >> j; //load


			j["lastlog"] = ((PlayerInfo*)(peer->data))->lastlog; //edit
			j["login"] = ((PlayerInfo*)(peer->data))->login; //edit




			std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
			if (!o.is_open()) {
				cout << GetLastError() << endl;
				_getch();
			}

			o << j << std::endl;

			int i = ((PlayerInfo*)(peer->data))->login;
			if (i == 1) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 2) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

				o << j << std::endl;

			}
			if (i == 3) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 4) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 5) {
				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 6) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 7) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 8) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 9) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 10) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 11) {
				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 12) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 13) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 14) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 15) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 16) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 17) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 18) {
				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 19) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 20) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 21) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 22) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 23) {
				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 24) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 25) {
				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

			}
			if (i == 26) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 27) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 3000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;
			}
			if (i == 28) {

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string acontent((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));
				int a = atoi(acontent.c_str());
				int aa = a + 10000;
				ofstream myfile;
				myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				myfile << aa;
				myfile.close();
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You claimed your attendance prize!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
				ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packetsa);
				delete psa.data;

				std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


				if (ifff.fail()) {
					ifff.close();


				}
				if (ifff.is_open()) {
				}
				json j;
				ifff >> j; //load


				j["login"] = 0; //edit




				std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}

				o << j << std::endl;

			}
		}
	}
}

void quiz(ENetPeer* currentPeer)
{
	int a = rand() % 100;
	int b = rand() % 300;
	int c = rand() % 79;
	int d = rand() % 30;
	int h = a + b;
	int j = c + d;
	int all = h + j;
	int free = rand() % 100 + 100;
	string gems = std::to_string(free);
	string timer = std::to_string(all);
	ofstream myfile;
	myfile.open("math.txt");
	myfile << timer;
	myfile.close();
	ofstream haruko;
	haruko.open("gems.txt");
	haruko << gems;
	haruko.close();
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `2Daily `4QUIZ KXPS `5What is the `5answer `9of `2" + std::to_string(h) + " `s+ `1" + std::to_string(j) + " `#Prize = `2" + gems + " `5Gems. `#Do /as (answer) `1To answer."));
		ENetPacket* packet3 = enet_packet_create(p3.data,
			p3.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(currentPeer, 0, packet3);
		//enet_peer_reset(currentPeer);
		delete p3.data;
	}
}

void timer()
{
	bool exist = std::experimental::filesystem::exists("math.txt");
	if (!exist)
	{
		ofstream ok("math.txt");
		ok << "iji" << endl;
		ok.close();

		ofstream sh("gems.txt");
		sh << 0 << endl;
		sh.close();
	}
	int timer = 0;
	int save = 0;
	std::ifstream ifs("saveworld.txt");
	std::string content((std::istreambuf_iterator<char>(ifs)),
		(std::istreambuf_iterator<char>()));
	timer = stoi(content);
	if (timer != 0)
	{
		save = timer - 1;
		ofstream myfile;
		myfile.open("saveworld.txt");
		myfile << save;
		myfile.close();
	}
	else
	{
		string online = "";
		int total = 0;
		int balance = 0;
		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0) {
				online += ((PlayerInfo*)(currentPeer->data))->displayName + "`o, `w";
				total++;
			}
		}
		balance = total * 5 + 30;
		timer = balance;
		ofstream myfile;
		myfile.open("saveworld.txt");
		myfile << timer;
		myfile.close();
		autosave();
		quiz(currentPeer);
	}
}


void claim(ENetPeer* peer)
{
	std::ifstream ifff("claim/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	int gems = 0;
	int level = 0;
	int wls = 0;
	int cgems = 0;
	int clevel = 0;
	int cwls = 0;
	int tgems = 0;
	int tlevel = 0;
	int twls = 0;

	if (ifff.fail()) {
		ifff.close();


	}
	if (ifff.is_open()) {
	}
	json j;
	ifff >> j; //load

	gems = j["gems"];
	level = j["level"];
	wls = j["wls"];


	std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
	std::string content((std::istreambuf_iterator<char>(ifsz)),
		(std::istreambuf_iterator<char>()));

	int b = atoi(content.c_str());

	std::ifstream iff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (iff.fail()) {
		iff.close();


	}
	if (iff.is_open()) {
	}
	json x;
	iff >> x; //load
	
	cgems = b;
	clevel = x["level"];
	cwls = x["kxpswl"];

	tgems = gems + cgems;
	tlevel = level + clevel;
	twls = wls + cwls;


	ofstream myfile2;
	myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
	myfile2 << std::to_string(tgems);
	myfile2.close();
	GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), tgems));
	ENetPacket* packetpp = enet_packet_create(pp.data,
		pp.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packetpp);
	delete pp.data;

	((PlayerInfo*)(peer->data))->kxpswl = twls;
	((PlayerInfo*)(peer->data))->level = tlevel;



	std::ifstream ifffx("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


	if (ifffx.fail()) {
		ifffx.close();


	}
	if (ifffx.is_open()) {
	}
	json jx;
	ifffx >> jx; //load


	jx["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl; //edit
	jx["level"] = ((PlayerInfo*)(peer->data))->level;



	std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
	if (!o.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	o << jx << std::endl;

	GamePacket ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wMessage from `4Admin`0: `2You have claim your `5Items `9Thx for `qPurchasing"), "audio/hub_open.wav"), 0));

	ENetPacket* packet = enet_packet_create(ps.data,
		ps.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete ps.data;

	std::ifstream ifffxx("claim/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


	if (ifffxx.fail()) {
		ifffxx.close();


	}
	if (ifffxx.is_open()) {
	}
	json jxx;
	ifffxx >> jxx; //load


	jxx["wls"] = 0; //edit
	jxx["level"] = 0;
	jxx["gems"] = 0; //edit



	std::ofstream oxx("claim/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
	if (!oxx.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	oxx << jxx << std::endl;
}


void fixminus(ENetPeer* peer)
{
	string imie = ((PlayerInfo*)(peer->data))->rawName;

	if (((PlayerInfo*)(peer->data))->kxpswl < 0) {
		std::ifstream ifff("players/" + imie + ".json");


		if (ifff.fail()) {
			ifff.close();


		}
		if (ifff.is_open()) {
		}
		json j;
		ifff >> j; //load


		j["ClothBack"] = 0;
		j["ClothHand"] = 0;
		j["ClothFace"] = 0;
		j["ClothShirt"] = 0;
		j["ClothPants"] = 0;
		j["ClothNeck"] = 0;
		j["ClothHair"] = 0;
		j["ClothFeet"] = 0;
		j["ClothMask"] = 0;
		j["ClothAnces"] = 0;
		j["isBanned"] = 0;
		j["effect"] = 8421376;
		j["kxpswl"] = 0;
		j["isvip"] = false;
		j["onquest"] = false;
		j["boughtLGW"] = false;
		j["boughtLGK"] = false;
		j["boughtLGD"] = false;
		j["boughtLGB"] = false;
		j["boughtLKW"] = false;
		j["boughtCWD"] = false;
		j["boughtRFS"] = false;
		j["boughtCDG"] = false;
		j["boughtLTIT"] = false;
		j["boughtLWHIP"] = false;
		j["boughtPHOENIX"] = false;
		j["boughtDAV"] = false;
		j["boughtZEUS"] = false;
		j["boughtNDEV"] = false;
		j["boughtTXMOM"] = false;
		j["boughtFLASHAXE"] = false;
		j["boughtVIOLET"] = false;
		j["boughtCHIMERA"] = false;
		j["boughtBRAIN"] = false;
		j["boughtCCROWN"] = false;
		j["boughtGBOW"] = false;
		j["boughtGANGEL"] = false;
		j["boughtGROB"] = false;
		j["boughtHSCYTHE"] = false;
		j["boughtGDIAPER"] = false;
		j["boughtGTANGEL"] = false;
		j["boughtGNECK"] = false;
		j["boughtGGLASS"] = false;
		j["boughtGPEGASUS"] = false;
		j["boughtGBUG"] = false;
		j["boughtWAR"] = false;
		j["boughtRAY"] = false;
		j["boughtAAC"] = false;
		j["boughtSPD"] = false;
		j["boughtTK"] = false;
		//j["email"] = email;
		j["adminLevel"] = 0;
		j["level"] = 1;
		j["xp"] = 0;
		j["rubble"] = 0;
		j["rubblexp"] = 0;
		// Mining update starts here
		j["amber"] = 0;
		j["amberxp"] = 0;

		j["opal"] = 0;
		j["opalxp"] = 0;

		j["gold"] = 0;
		j["goldxp"] = 0;

		j["sapphire"] = 0;
		j["sapphirexp"] = 0;

		j["diamond"] = 0;
		j["diamondxp"] = 0;

		j["emerald"] = 0;
		j["emeraldxp"] = 0;
		// Mining update ends here

		std::ofstream o("players/" + imie + ".json"); //save
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		o << j << std::endl;

		int aa = 0;
		ofstream myfile;
		myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
		myfile << aa;
		myfile.close();
		Player::OnAddNotification(peer, "`0Warning from `4System`0: You've minus wls!!! we will reset your acc :)", "audio/hub_open.wav", "interface/atomic_button.rttex");
		enet_peer_disconnect_later(peer, 0);
	}

}


void warnupdate(ENetPeer* currentPeer)
{
	
	string name = ((PlayerInfo*)(currentPeer->data))->rawName;
	int c = ((PlayerInfo*)(currentPeer->data))->warns;
	string number = std::to_string(c);
	string warner = ((PlayerInfo*)(currentPeer->data))->playerinfo;
	string reason = ((PlayerInfo*)(currentPeer->data))->reason;
	string color = "`1 " + number.substr(0, 1);
	string colors = "`5";

	ofstream warn("warn/" + name + ".txt");
	warn << color << number << "`0. " << colors << reason << " `0" << "( " + color + warner + "`0 )" << endl;
	warn.close();
}


void updateInvis(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			timer();
			dailylogin(peer);
			fixminus(peer);
			string name = ((PlayerInfo*)(peer->data))->rawName;
			bool exist = std::experimental::filesystem::exists("claim/" + name + ".json");
			if (!exist)
			{
				std::ofstream o("claim/" + name + ".json");
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}
				json j;
				j["gems"] = 0;
				j["wls"] = 0;
				j["level"] = 0;
				o << j << std::endl;
			}
			GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), ((PlayerInfo*)(peer->data))->isinv));

			memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet2);
			delete p2.data;

			GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), ((PlayerInfo*)(currentPeer->data))->isinv));

			memcpy(p3.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet3);
			delete p3.data;
			if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
				if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
					((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
				}
			}
			if (((PlayerInfo*)(peer->data))->level >= 125) {
				GamePacket p2ww = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild|maxLevel"));
				memcpy(p2ww.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2ww = enet_packet_create(p2ww.data,
					p2ww.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2ww);
				delete p2ww.data;
				GamePacket p2wwee = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(currentPeer->data))->country + "|showGuild|maxLevel"));
				memcpy(p2wwee.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2wwee = enet_packet_create(p2wwee.data,
					p2wwee.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2wwee);
				delete p2wwee.data;
			}
			else {
				GamePacket p2ww = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild"));
				memcpy(p2ww.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2ww = enet_packet_create(p2ww.data,
					p2ww.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2ww);
				delete p2ww.data;
				GamePacket p2wwee = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(currentPeer->data))->country + "|showGuild"));
				memcpy(p2wwee.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2wwee = enet_packet_create(p2wwee.data,
					p2wwee.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2wwee);
				delete p2wwee.data;
			}

			int flag1 = (65536 * ((PlayerInfo*)(peer->data))->guildBg) + ((PlayerInfo*)(peer->data))->guildFg;
			if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->guildLeader) {
				GamePacket p2gg = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag1), 0));

				memcpy(p2gg.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2gg = enet_packet_create(p2gg.data,
					p2gg.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2gg);
				delete p2gg.data;
				int flag2 = (65536 * ((PlayerInfo*)(currentPeer->data))->guildBg) + ((PlayerInfo*)(currentPeer->data))->guildFg;
				GamePacket p2xd = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag2), 0));

				memcpy(p2xd.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2xd = enet_packet_create(p2xd.data,
					p2xd.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2xd);
				delete p2xd.data;
			}
			else {
				GamePacket p2gg = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag1), 0));

				memcpy(p2gg.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2gg = enet_packet_create(p2gg.data,
					p2gg.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2gg);
				delete p2gg.data;
				int flag2 = (65536 * ((PlayerInfo*)(currentPeer->data))->guildBg) + ((PlayerInfo*)(currentPeer->data))->guildFg;
				GamePacket p2xd = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag2), 0));

				memcpy(p2xd.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2xd = enet_packet_create(p2xd.data,
					p2xd.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2xd);
				delete p2xd.data;
			}
			if (((PlayerInfo*)(peer->data))->adminLevel > 887) {
				int x = ((PlayerInfo*)(peer->data))->x;
				int y = ((PlayerInfo*)(peer->data))->y;
				int effect = 92;
				GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

				ENetPacket* packetd = enet_packet_create(psp.data,
					psp.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packetd);
				delete psp.data;
			}
		}


	}
}

int getPlayersCountInWorld(string name)
{
	int count = 0;
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->isinv == false)
		{
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == name)
				count++;
		}
	}
	return count;
}







void saveLevel(ENetPeer* peer)
{
	if (((PlayerInfo*)(peer->data))->haveGrowId) {

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		std::ofstream o("players/" + username + ".json");
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}
		json j;

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;

		string password = ((PlayerInfo*)(peer->data))->tankIDPass;
		j["username"] = username;
		j["password"] = hashPassword(password);
		j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;


		int ban = 0;
		j["isBanned"] = ban;
		int ip;
		j["ipID"] = peer->address.host;
		j["effect"] = ((PlayerInfo*)(peer->data))->effect;


		j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
		j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
		j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl;
		j["lastlog"] = ((PlayerInfo*)(peer->data))->lastlog;
		j["login"] = ((PlayerInfo*)(peer->data))->login;
		j["isvip"] = ((PlayerInfo*)(peer->data))->isvip;
		j["onquest"] = ((PlayerInfo*)(peer->data))->onquest;
		j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
		j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
		j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
		j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
		j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
		j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
		j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
		j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
		j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
		j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
		j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
		j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
		j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
		j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
		j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
		j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
		j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
		j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
		j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
		j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
		j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
		j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
		j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
		j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
		j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
		j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
		j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
		j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
		j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
		j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
		j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
		j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
		j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
		j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
		j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
		j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
		j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
		j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
		j["guild"] = ((PlayerInfo*)(peer->data))->guild;
		j["joinguild"] = ((PlayerInfo*)(peer->data))->joinguild;
		j["level"] = ((PlayerInfo*)(peer->data))->level;
		j["xp"] = ((PlayerInfo*)(peer->data))->xp;
		j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
		j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
		// Mining update starts here
		j["amber"] = ((PlayerInfo*)(peer->data))->amber;
		j["amberxp"] = ((PlayerInfo*)(peer->data))->amberxp;

		j["opal"] = ((PlayerInfo*)(peer->data))->opal;
		j["opalxp"] = ((PlayerInfo*)(peer->data))->opalxp;

		j["gold"] = ((PlayerInfo*)(peer->data))->gold;
		j["goldxp"] = ((PlayerInfo*)(peer->data))->goldxp;

		j["sapphire"] = ((PlayerInfo*)(peer->data))->sapphire;
		j["sapphirexp"] = ((PlayerInfo*)(peer->data))->sapphirexp;

		j["diamond"] = ((PlayerInfo*)(peer->data))->diamond;
		j["diamondxp"] = ((PlayerInfo*)(peer->data))->diamondxp;

		j["emerald"] = ((PlayerInfo*)(peer->data))->emerald;
		j["emeraldxp"] = ((PlayerInfo*)(peer->data))->emeraldxp;
		// Mining update ends here
		j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;

		o << j << std::endl;
	}
}

void updateAllClothes(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
			delete p3.data;
			//enet_host_flush(server);
			GamePacket p4 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(currentPeer->data))->cloth_hair, ((PlayerInfo*)(currentPeer->data))->cloth_shirt, ((PlayerInfo*)(currentPeer->data))->cloth_pants), ((PlayerInfo*)(currentPeer->data))->cloth_feet, ((PlayerInfo*)(currentPeer->data))->cloth_face, ((PlayerInfo*)(currentPeer->data))->cloth_hand), ((PlayerInfo*)(currentPeer->data))->cloth_back, ((PlayerInfo*)(currentPeer->data))->cloth_mask, ((PlayerInfo*)(currentPeer->data))->cloth_necklace), ((PlayerInfo*)(currentPeer->data))->skinColor), ((PlayerInfo*)(currentPeer->data))->cloth_ances, 0.0f, 0.0f));
			memcpy(p4.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4); // ffloor
			ENetPacket* packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			//enet_host_flush(server);
		}
	}
}

void sendClothes(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
		}

	}
	if (((PlayerInfo*)(peer->data))->haveGrowId) {
		std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		if (ifff.fail()) {
			ifff.close();


		}
		if (ifff.is_open()) {
		}
		json j;
		ifff >> j; //load

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;

		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;


		j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


		std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		o << j << std::endl;
	}
	delete p3.data;
}
void sendInvClothes(ENetPeer* peer)
{
	int noSaveInvis = 0;

	ENetPeer* currentPeer;
	GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
		}

	}

	if (((PlayerInfo*)(peer->data))->haveGrowId && noSaveInvis == 1) {

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		std::ofstream o("players/" + username + ".json");
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}
		json j;

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;
		string guild = p->guild;
		bool joinguild = p->joinguild;
		int level = p->level;
		int xp = p->xp;

		string password = ((PlayerInfo*)(peer->data))->tankIDPass;
		j["username"] = username;
		j["password"] = hashPassword(password);
		j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;

		int ban = 0;
		j["isBanned"] = ban;
		int ip;
		j["ipID"] = peer->address.host;
		j["effect"] = ((PlayerInfo*)(peer->data))->effect;

		j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
		j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
		j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl;
		j["lastlog"] = ((PlayerInfo*)(peer->data))->lastlog;
		j["login"] = ((PlayerInfo*)(peer->data))->login;
		j["isvip"] = ((PlayerInfo*)(peer->data))->isvip;
		j["onquest"] = ((PlayerInfo*)(peer->data))->onquest;
		j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
		j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
		j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
		j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
		j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
		j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
		j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
		j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
		j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
		j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
		j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
		j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
		j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
		j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
		j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
		j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
		j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
		j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
		j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
		j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
		j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
		j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
		j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
		j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
		j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
		j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
		j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
		j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
		j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
		j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
		j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
		j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
		j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
		j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
		j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
		j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
		j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
		j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
		j["guild"] = guild;
		j["joinguild"] = joinguild;
		j["level"] = level;
		j["xp"] = xp;
		j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
		j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
		// Mining update starts here
		j["amber"] = ((PlayerInfo*)(peer->data))->amber;
		j["amberxp"] = ((PlayerInfo*)(peer->data))->amberxp;

		j["opal"] = ((PlayerInfo*)(peer->data))->opal;
		j["opalxp"] = ((PlayerInfo*)(peer->data))->opalxp;

		j["gold"] = ((PlayerInfo*)(peer->data))->gold;
		j["goldxp"] = ((PlayerInfo*)(peer->data))->goldxp;

		j["sapphire"] = ((PlayerInfo*)(peer->data))->sapphire;
		j["sapphirexp"] = ((PlayerInfo*)(peer->data))->sapphirexp;

		j["diamond"] = ((PlayerInfo*)(peer->data))->diamond;
		j["diamondxp"] = ((PlayerInfo*)(peer->data))->diamondxp;

		j["emerald"] = ((PlayerInfo*)(peer->data))->emerald;
		j["emeraldxp"] = ((PlayerInfo*)(peer->data))->emeraldxp;
		// Mining update ends here
		j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;


		o << j << std::endl;
	}

	//enet_host_flush(server);
	delete p3.data;
}
void SendPacketRaw2(int a1, void* packetData, size_t packetDataSize, void* a4, ENetPeer* peer, int packetFlag)
{
	ENetPacket* p;

	if (peer) // check if we have it setup
	{
		if (a1 == 4 && *((BYTE*)packetData + 12) & 8)
		{
			p = enet_packet_create(0, packetDataSize + *((DWORD*)packetData + 13) + 5, packetFlag);
			int four = 4;
			memcpy(p->data, &four, 4);
			memcpy((char*)p->data + 4, packetData, packetDataSize);
			memcpy((char*)p->data + packetDataSize + 4, a4, *((DWORD*)packetData + 13));
			enet_peer_send(peer, 0, p);

		}
		else
		{
			if (a1 == 192) {
				a1 = 4;
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char*)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);


			}
			else {
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char*)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);


			}
		}
	}

	delete packetData;
}
void sendCollect(ENetPeer* peer, int netID, int x, int y, int uid, int item, int count)
{

	if (uid >= 9999) return;
	if (uid < 0) return;
	ENetPeer* currentPeer;
	string name = "";
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Collect worked!"));
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;

	bool success = true;
	SaveShopsItemMoreTimes(item, count, peer, success); //neveikia sitas sudas krc


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{

		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 14;
			data.x = x;
			data.y = y;
			data.netID = netID;
			data.plantingTree = uid;
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

		}
	}
}
/*struct TileExtra {
	int packetType;
	int characterState;
	float objectSpeedX;
	int punchX;
	int punchY;
	int charStat;
	int blockid;
	int visual;
	int signs;
	int backgroundid;
	int displayblock;
	int time;
	int netID;
	int weatherspeed;
	int bpm;
	//int unused1;
	//int unused2;
	//int unused3;
	//int bpm;
};
void updateStuffWeather(ENetPeer* peer, int x, int y, int tile, int bg, int gravity, bool isInverted, bool isSpinning) {


	ENetPeer * currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {




			//cout << "bruh" << endl;
			TileExtra data;
			data.packetType = 0x5;
			data.characterState = 8;
			data.punchX = x;
			data.punchY = y;
			data.charStat = 18; // 13
			data.blockid = 3832;
			data.backgroundid = bg; // 2946
								   //data.netID = ((PlayerInfo)(peer->data))->netID;
								   //dataxx.backgroundid = 65536;
			data.visual = 0; //0x00210000
										//world->items[x + (yworld->width)].displayblock = tile;
			int n = tile;
			string hex = "";
			{
				std::stringstream ss;
				ss << std::hex << n; // int decimal_value
				std::string res(ss.str());
				hex = res + "31";
			}
			int gravi = gravity;
			string hexg = "";
			{
				int temp = gravi;
				if (gravi < 0) temp = -gravi;
				std::stringstream ss;
				ss << std::hex << temp; // int decimal_value
				std::string res(ss.str());
				hexg = res + "00";
			}
			int xx = 0;
			std::stringstream ss;
			ss << std::hex << hex;
			if (!ss.fail()) {
				ss >> xx;
			}
			//cout << xx << endl;
			data.displayblock = xx;
			int xxs = 0;
			std::stringstream sss;
			sss << std::hex << hexg;
			if (!sss.fail()) {
				sss >> xxs;
			}
			if (gravi < 0) xxs = -xxs;
			//cout << to_string(xxs) << endl;
			if (gravi < 0) {
				SendPacketRaw2(192, packStuffVisual(&data, 0x03FFFFFF, xxs), 102, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
			else
			{
				SendPacketRaw2(192, packStuffVisual(&data, 0x02000000, xxs), 102, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
			GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), 29));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet2);
			delete p2.data;
		}
	}
}*/

void sendPData(ENetPeer* peer, PlayerMoving* data)
{
	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (peer != currentPeer)
		{
			if (isHere(peer, currentPeer))
			{
				data->netID = ((PlayerInfo*)(peer->data))->netID;


				SendPacketRaw(4, packPlayerMoving(data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
	}
}

void sendPlayerLeave(ENetPeer* peer, PlayerInfo* player)
{
	//((PlayerInfo*)(peer->data))->cpX = 3040;
	//((PlayerInfo*)(peer->data))->cpY = 736;
	((PlayerInfo*)(peer->data))->cpY = 0;
	((PlayerInfo*)(peer->data))->cpY = 0;
	((PlayerInfo*)(peer->data))->usedCP = false;
	ENetPeer* currentPeer;
	if (find(((PlayerInfo*)(peer->data))->lastworlds.begin(), ((PlayerInfo*)(peer->data))->lastworlds.end(), player->currentWorld) != ((PlayerInfo*)(peer->data))->lastworlds.end()) {
	}
	else {
		((PlayerInfo*)(peer->data))->lastworlds.push_back(player->currentWorld);
	}

	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld) - 1) + "`` `5others here>```w"));
	string name = ((PlayerInfo*)(peer->data))->displayName;
	string text = "action|play_sfx\nfile|audio/door_shut.wav\ndelayMS|0\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (isHere(peer, currentPeer)) {
			{

				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				{

					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
					ENetPacket* packet3 = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet3);

				}
				if (((PlayerInfo*)(peer->data))->isinv == false)
				{
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);


					GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld) - 1) + "`` `5others here>```w"));
					ENetPacket* packet4 = enet_packet_create(p4.data,
						p4.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet4);
					delete p4.data;

					//SaveInventoryAfterLeaveWorld(peer);

					/*if ((getPlayersCountInWorld(player->currentWorld) - 1 == 0))
					{
						WorldInfo info = worldDB.get(player->currentWorld);
						SaveWorldAfterExitWorld(info);
					}*/

				}
				//	SaveInventoryAfterLeaveWorld(peer);
			}
		}
	}
	delete p.data;
	delete p2.data;
}

void showWrong(ENetPeer* peer, string listFull, string itemFind) {
	GamePacket fff = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`9Find item: " + itemFind + "``|left|3146|\n" + listFull + "add_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\n"));
	ENetPacket* packetd = enet_packet_create(fff.data,
		fff.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packetd);

	//enet_host_flush(server);
	delete fff.data;
}

void sendSlotmachine(ENetPeer* peer, int x, int y)
{
	ENetPeer* currentPeer;
	int val = rand() % 100;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			string name = ((PlayerInfo*)(peer->data))->displayName;

			string lose = "`7[`w" + name + " `4loses at slots.`7]";
			string win = "`7[`w" + name + " `2wins at slots!`7]";

			if (val > 80) {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), win), 0));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);
				delete p2.data;
				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), win));
				ENetPacket* packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2s.data;

			}
			else {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), lose), 0));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);

				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), lose));
				ENetPacket* packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2.data;
				delete p2s.data;
			}
		}


		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}
void sendRoulete(ENetPeer* peer, int x, int y)
{
	using namespace std::chrono;




	if (((PlayerInfo*)(peer->data))->lastSpin + 1500 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
	{
		((PlayerInfo*)(peer->data))->lastSpin = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
	}


	else {

		return;

	}
	ENetPeer* currentPeer;
	int val = rand() % 37;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			string name = ((PlayerInfo*)(peer->data))->displayName;
			/*
			if (((PlayerInfo*)(peer->data))->lastSpin + 1500 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
			{
			((PlayerInfo*)(peer->data))->lastSpin = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			}


			else {
			GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Please spin slow!"));
			ENetPacket * packet = enet_packet_create(po.data,
			po.len,
			ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete po.data;
			//enet_host_flush(server);
			continue;
			}*/

			if (val == 1 || val == 3 || val == 5 || val == 7 || val == 9 || val == 12 || val == 14 || val == 16 || val == 18 || val == 19 || val == 21 || val == 23 || val == 25 || val == 27 || val == 30 || val == 32 || val == 34 || val == 36) {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`w[" + name + " `wspun the wheel and got `4" + std::to_string(val) + "`w!]"), 0));
				int respawnTimeout = 2000;
				int deathFlag = 0x19;
				memcpy(p2.data + 24, &respawnTimeout, 4);
				memcpy(p2.data + 56, &deathFlag, 4);
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);
				delete p2.data;
				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7[`w" + name + " `ospun the wheel and got `4" + std::to_string(val) + "`o!`7]"));

				memcpy(p2s.data + 24, &respawnTimeout, 4);
				memcpy(p2s.data + 56, &deathFlag, 4);
				ENetPacket* packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2s.data;
			}
			else if (val == 2 || val == 4 || val == 6 || val == 8 || val == 10 || val == 11 || val == 13 || val == 15 || val == 17 || val == 20 || val == 22 || val == 24 || val == 26 || val == 28 || val == 29 || val == 31 || val == 33 || val == 35) {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`w[" + name + " `wspun the wheel and got `b" + std::to_string(val) + "`w!]"), 0));
				int respawnTimeout = 2000;
				int deathFlag = 0x19;
				memcpy(p2.data + 24, &respawnTimeout, 4);
				memcpy(p2.data + 56, &deathFlag, 4);
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);

				delete p2.data;
				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7[`w" + name + " `ospun the wheel and got `b" + std::to_string(val) + "`o!`7]"));

				memcpy(p2s.data + 24, &respawnTimeout, 4);
				memcpy(p2s.data + 56, &deathFlag, 4);
				ENetPacket* packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2s.data;

			}

			else if (val == 0 || val == 37) {

				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`w[" + name + " `wspun the wheel and got `20`w!]"), 0));
				int respawnTimeout = 2000;
				int deathFlag = 0x19;
				memcpy(p2.data + 24, &respawnTimeout, 4);
				memcpy(p2.data + 56, &deathFlag, 4);
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);
				delete p2.data;
				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7[`w" + name + " `ospun the wheel and got `20`o!`7]"));

				memcpy(p2s.data + 24, &respawnTimeout, 4);
				memcpy(p2s.data + 56, &deathFlag, 4);
				ENetPacket* packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2s.data;
			}
		}

	}
}




void updateDoor(ENetPeer* peer, int foreground, int x, int y, string text)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8;
	int text_len = text.length();
	int lol = 0;
	int wut = 5;
	int yeh = hmm + 3 + 1;
	int idk = 15 + text_len;
	int is_locked = 0;
	int bubble_type = 1;
	int ok = 52 + idk;
	int kek = ok + 4;
	int yup = ok - 8 - idk;
	int four = 4;
	int magic = 56;
	int wew = ok + 5 + 4;
	int wow = magic + 4 + 5;

	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, four); //4
	memcpy(data + yeh, &hmm, four); //8
	memcpy(data + yup, &x, 4); //12
	memcpy(data + yup + 4, &y, 4); //16
	memcpy(data + 4 + yup + 4, &idk, four); //20
	memcpy(data + magic, &foreground, 2); //22
	memcpy(data + four + magic, &lol, four); //26
	memcpy(data + magic + 4 + four, &bubble_type, 1); //27
	memcpy(data + wow, &text_len, 2); //data + wow = text_len, pos 29
	memcpy(data + 2 + wow, text.c_str(), text_len); //data + text_len_len + text_len_offs = text, pos 94
	memcpy(data + ok, &is_locked, four); //98
	memcpy(p->data, &four, four); //4
	memcpy((char*)p->data + four, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}
void doorlocked(ENetPeer* peer, int foreground, int x, int y, string text)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8;
	int text_len = text.length();
	int lol = 0;
	int wut = 5;
	int yeh = hmm + 3 + 1;
	int idk = 15 + text_len;
	int is_locked = -1;
	int bubble_type = 1;
	int ok = 52 + idk;
	int kek = ok + 4;
	int yup = ok - 8 - idk;
	int four = 4;
	int magic = 56;
	int wew = ok + 5 + 4;
	int wow = magic + 4 + 5;

	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, four); //4
	memcpy(data + yeh, &hmm, four); //8
	memcpy(data + yup, &x, 4); //12
	memcpy(data + yup + 4, &y, 4); //16
	memcpy(data + 4 + yup + 4, &idk, four); //20
	memcpy(data + magic, &foreground, 2); //22
	memcpy(data + four + magic, &lol, four); //26
	memcpy(data + magic + 4 + four, &bubble_type, 1); //27
	memcpy(data + wow, &text_len, 2); //data + wow = text_len, pos 29
	memcpy(data + 2 + wow, text.c_str(), text_len); //data + text_len_len + text_len_offs = text, pos 94
	memcpy(data + ok, &is_locked, four); //98
	memcpy(p->data, &four, four); //4
	memcpy((char*)p->data + four, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}


void sendWorld(ENetPeer* peer, WorldInfo* worldInfo)
{

	int zero = 0;
	((PlayerInfo*)(peer->data))->droppeditemcount = 0;
#ifdef TOTAL_LOG

	cout << "Entering a world..." << endl;
#endif
	if (worldproperlock == false)
	{

		((PlayerInfo*)(peer->data))->joinClothesUpdated = false;
		string asdf = "0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000070000000000"; // 0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000080000000000000000000000000000000000000000000000000000000000000048133A0500000000BEBB0000070000000000
		string worldName = worldInfo->name;
		int xSize = worldInfo->width;
		int ySize = worldInfo->height;
		int square = xSize * ySize;
		__int16 nameLen = (__int16)worldName.length();
		int payloadLen = asdf.length() / 2;
		int dataLen = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 100;
		int offsetData = dataLen - 100;
		int allocMem = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 16000 + 100 + (worldInfo->droppedCount * 20);
		BYTE* data = new BYTE[allocMem];
		memset(data, 0, allocMem);
		for (int i = 0; i < asdf.length(); i += 2)
		{
			char x = ch2n(asdf[i]);
			x = x << 4;
			x += ch2n(asdf[i + 1]);
			memcpy(data + (i / 2), &x, 1);
		}
		__int16 item = 0;
		int smth = 0;
		for (int i = 0; i < square * 8; i += 4) memcpy(data + payloadLen + i + 14 + nameLen, &zero, 4);
		for (int i = 0; i < square * 8; i += 8) memcpy(data + payloadLen + i + 14 + nameLen, &item, 2);
		memcpy(data + payloadLen, &nameLen, 2);
		memcpy(data + payloadLen + 2, worldName.c_str(), nameLen);
		memcpy(data + payloadLen + 2 + nameLen, &xSize, 4);
		memcpy(data + payloadLen + 6 + nameLen, &ySize, 4);
		memcpy(data + payloadLen + 10 + nameLen, &square, 4);
		BYTE* blockPtr = data + payloadLen + 14 + nameLen;

		int sizeofblockstruct = 8;
		for (int i = 0; i < square; i++) {

			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100)/* || (worldInfo->items[i].foreground%2)*/)
			{
				memcpy(blockPtr, &worldInfo->items[i].foreground, 2);
				int type = 0x00000000;
				// type 1 = locked
				if (worldInfo->items[i].water)
					type |= 0x04000000;
				if (worldInfo->items[i].glue)
					type |= 0x08000000;
				if (worldInfo->items[i].fire)
					type |= 0x10000000;
				if (worldInfo->items[i].red)
					type |= 0x20000000;
				if (worldInfo->items[i].green)
					type |= 0x40000000;
				if (worldInfo->items[i].blue)
					type |= 0x80000000;

				// int type = 0x04000000; = water
				// int type = 0x08000000 = glue
				// int type = 0x10000000; = fire
				// int type = 0x20000000; = red color
				// int type = 0x40000000; = green color
				// int type = 0x80000000; = blue color
				memcpy(blockPtr + 4, &type, 4);
				/*if (worldInfo->items[i].foreground % 2)
				{
					blockPtr += 6;
				}*/
			}
			else
			{
				memcpy(blockPtr, &zero, 2);
			}
			memcpy(blockPtr + 2, &worldInfo->items[i].background, 2);
			blockPtr += 8;
			/*if (blockPtr - data < allocMem - 2000) // realloc
			{
				int wLen = blockPtr - data;
				BYTE* oldData = data;

				data = new BYTE[allocMem + 16000];
				memcpy(data, oldData, allocMem);
				allocMem += 16000;
				delete oldData;
				blockPtr = data + wLen;

			}*/
		}
		memcpy(data + dataLen - 4, &smth, 4);
		ENetPacket* packet2 = enet_packet_create(data,
			dataLen,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		//enet_host_flush(server);
		for (int i = 0; i < square; i++) {


			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100))
				; // nothing
			else if (worldInfo->items[i].foreground == 6) updateDoor(peer, worldInfo->items[i].foreground, i % worldInfo->width, i / worldInfo->width, "`wEXIT``");
			else
			{
				PlayerMoving data;
				//data.packetType = 0x14;
				data.packetType = 0x3;

				//data.characterState = 0x924; // animation
				data.characterState = 0x0; // animation
				data.x = i % worldInfo->width;
				data.y = i / worldInfo->height;
				data.punchX = i % worldInfo->width;
				data.punchY = i / worldInfo->width;
				data.XSpeed = 0;
				data.YSpeed = 0;
				data.netID = -1;
				data.plantingTree = worldInfo->items[i].foreground;
				SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
			}


		}
		((PlayerInfo*)(peer->data))->currentWorld = worldInfo->name;
		for (int i = 0; i < xSize; i++) {
			for (int j = 0; j < ySize; j++) {
				int squaresign = i + (j * 100);

				bool displaysss = std::experimental::filesystem::exists("display/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");

				if (displaysss) {


					if (worldInfo->items[squaresign].foreground == 2946)
					{

						int x = squaresign % worldInfo->width;
						int y = squaresign / worldInfo->width;
						//cout << "foundzzzzzzzzzzzzzz!";
						WorldInfo* world = getPlyersWorld(peer);
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								BlockVisual data;
								data.packetType = 0x5;
								data.characterState = 8;
								data.punchX = x;
								data.punchY = y;
								data.charStat = 13; // 13y
								data.blockid = 2946; // 2946 3794 = display shelf
													 //data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.backgroundid = 6864;
								data.visual = 0x00010000; //0x00210000

								std::ifstream ifs("display/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)), (std::istreambuf_iterator<char>()));
								int id = atoi(content.c_str());

								world->items[x + (y * world->width)].displayblock = id;

								int n = id;
								string hex = "";
								{
									std::stringstream ss;
									ss << std::hex << n; // int decimal_value
									std::string res(ss.str());

									hex = res + "17";
								}

								if (hex == "2017") {
									continue;
								}


								int xx;
								std::stringstream ss;
								ss << std::hex << hex;
								ss >> xx;
								data.displayblock = xx;


								SendPacketRaw(192, packBlockVisual(&data), 69, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							}
						}
					}
				}
			}
		}




		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}









		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}









		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}

















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`#@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`#@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`#@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`#@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}






















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`o@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`o@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`o@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`o@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}


















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2`c@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`c@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`c@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`c@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4SC`w]`c" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4SC`w]`c" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4SC`w]`c" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4SC`w]`c" + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}




		if (((PlayerInfo*)(peer->data))->haveGrowId) {



			PlayerInfo* p = ((PlayerInfo*)(peer->data));
			std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
			json j;
			ifff >> j;

			p->currentWorld = worldInfo->name;

			int kxpswl, bac, han, fac, hai, fee, pan, nec, shi, mas, anc, ban, lgk, lgw, lgb, lgd, lkw, cwd, rfs, cdg, join, level, xp, adminlevel, rubble, rubblexp, amber, amberxp, opal, opalxp, gold, goldxp, sapphire, sapphirexp, diamond, diamondxp, emerald, emeraldxp;
			bool joinguild;
			bool isvip;
			int login;
			string lastlog;
			bool onquest, ltit, lwhip, phoenix, dav, zeus, ndev, txmom, flashaxe, violet, chimera, brain, ccrown, gbow, gangel, grob, hscythe, gdiaper, gtangel, gneck, gglass, gpegasus, gbug, war, ray, aac, spd, tk;
			bac = j["ClothBack"];
			han = j["ClothHand"];
			fac = j["ClothFace"];
			hai = j["ClothHair"];
			fee = j["ClothFeet"];
			pan = j["ClothPants"];
			nec = j["ClothNeck"];
			shi = j["ClothShirt"];
			mas = j["ClothMask"];
			anc = j["ClothAnces"];
			ban = j["isBanned"];
			lgk = j["boughtLGK"];
			lgw = j["boughtLGW"];
			lgb = j["boughtLGB"];
			lgd = j["boughtLGD"];
			lkw = j["boughtLKW"];
			cwd = j["boughtCWD"];
			rfs = j["boughtRFS"];
			cdg = j["boughtCDG"];
			ltit = j["boughtLTIT"];
			onquest = j["onquest"];
			adminlevel = j["adminLevel"];
			vector <string>frns;
			if (j.count("worldsowned") == 1) {
				for (int i = 0; i < j["worldsowned"].size(); i++) {
					frns.push_back(j["worldsowned"][i]);
				}
			}
			else {
				frns = {};
			}
			level = j["level"];
			xp = j["xp"];
			/*vector <string>frns;
			if (j.count("friends") == 1) {
				for (int i = 0; i < j["friends"].size(); i++) {
					frns.push_back(j["friends"][i]);
				}
			}
			else {
				frns = {};
			}*/
			string guild;
			if (j.count("guild") == 1) {
				guild = j["guild"];
			}
			else {
				guild = "";
			}
			if (j.count("lastlog") == 1) {
				lastlog = j["lastlog"];
			}
			else {
				lastlog = "";
			}
			if (j.count("joinguild") == 1) {
				join = j["joinguild"];
			}
			else {
				join = false;
			}
			if (j.count("boughtLWHIP") == 1) {
				lwhip = j["boughtLWHIP"];
			}
			else {
				lwhip = false;
			}
			if (j.count("onquest") == 1) {
				onquest = j["onquest"];
			}
			else {
				onquest = false;
			}
			if (j.count("boughtPHOENIX") == 1) {
				phoenix = j["boughtPHOENIX"];
			}
			else {
				phoenix = false;
			}
			if (j.count("boughtDAV") == 1) {
				dav = j["boughtDAV"];
			}
			else {
				dav = false;
			}
			if (j.count("boughtZEUS") == 1) {
				zeus = j["boughtZEUS"];
			}
			else {
				zeus = false;
			}
			if (j.count("boughtNDEV") == 1) {
				ndev = j["boughtNDEV"];
			}
			else {
				ndev = false;
			}
			if (j.count("boughtTXMOM") == 1) {
				txmom = j["boughtTXMOM"];
			}
			else {
				txmom = false;
			}
			if (j.count("boughtFLASHAXE") == 1) {
				flashaxe = j["boughtFLASHAXE"];
			}
			else {
				flashaxe = false;
			}
			if (j.count("boughtVIOLET") == 1) {
				violet = j["boughtVIOLET"];
			}
			else {
				violet = false;
			}
			if (j.count("boughtCHIMERA") == 1) {
				chimera = j["boughtCHIMERA"];
			}
			else {
				chimera = false;
			}
			if (j.count("isvip") == 1) {
				isvip = j["isvip"];
			}
			else {
				isvip = false;
			}
			if (j.count("boughtBRAIN") == 1) {
				brain = j["boughtBRAIN"];
			}
			else {
				brain = false;
			}
			if (j.count("boughtCCROWN") == 1) {
				ccrown = j["boughtCCROWN"];
			}
			else {
				ccrown = false;
			}
			if (j.count("rubble") == 1) {
				rubble = j["rubble"];
			}
			else {
				rubble = 0;
			}
			if (j.count("kxpswl") == 1) {
				kxpswl = j["kxpswl"];
			}
			else {
				kxpswl = 0;
			}
			if (j.count("login") == 1) {
				login = j["login"];
			}
			else {
				login = 0;
			}
			if (j.count("rubblexp") == 1) {
				rubblexp = j["rubblexp"];
			}
			else {
				rubblexp = 0;
			}
			// Mining update starts here
			if (j.count("amber") == 1) {
				amber = j["amber"];
			}
			else {
				amber = 0;
			}
			if (j.count("amberxp") == 1) {
				amberxp = j["amberxp"];
			}
			else {
				amberxp = 0;
			}


			if (j.count("opal") == 1) {
				opal = j["opal"];
			}
			else {
				opal = 0;
			}
			if (j.count("opalxp") == 1) {
				opalxp = j["opalxp"];
			}
			else {
				opalxp = 0;
			}


			if (j.count("gold") == 1) {
				gold = j["gold"];
			}
			else {
				gold = 0;
			}
			if (j.count("goldxp") == 1) {
				goldxp = j["goldxp"];
			}
			else {
				goldxp = 0;
			}


			if (j.count("sapphire") == 1) {
				sapphire = j["sapphire"];
			}
			else {
				sapphire = 0;
			}
			if (j.count("sapphirexp") == 1) {
				sapphirexp = j["sapphirexp"];
			}
			else {
				sapphirexp = 0;
			}


			if (j.count("diamond") == 1) {
				diamond = j["diamond"];
			}
			else {
				diamond = 0;
			}
			if (j.count("diamondxp") == 1) {
				diamondxp = j["diamondxp"];
			}
			else {
				diamondxp = 0;
			}


			if (j.count("emerald") == 1) {
				emerald = j["emerald"];
			}
			else {
				emerald = 0;
			}
			if (j.count("emeraldxp") == 1) {
				emeraldxp = j["emeraldxp"];
			}
			else {
				emeraldxp = 0;
			}


			// Mining update ends here
			if (j.count("boughtGBOW") == 1) {
				gbow = j["boughtGBOW"];
			}
			else {
				gbow = false;
			}
			if (j.count("boughtGANGEL") == 1) {
				gangel = j["boughtGANGEL"];
			}
			else {
				gangel = false;
			}
			if (j.count("boughtGROB") == 1) {
				grob = j["boughtGROB"];
			}
			else {
				grob = false;
			}
			if (j.count("boughtHSCYTHE") == 1) {
				hscythe = j["boughtHSCYTHE"];
			}
			else {
				hscythe = false;
			}
			if (j.count("boughtGDIAPER") == 1) {
				gdiaper = j["boughtGDIAPER"];
			}
			else {
				gdiaper = false;
			}
			if (j.count("boughtGTANGEL") == 1) {
				gtangel = j["boughtGTANGEL"];
			}
			else {
				gtangel = false;
			}
			if (j.count("boughtGNECK") == 1) {
				gneck = j["boughtGNECK"];
			}
			else {
				gneck = false;
			}
			if (j.count("boughtGGLASS") == 1) {
				gglass = j["boughtGGLASS"];
			}
			else {
				gglass = false;
			}
			if (j.count("boughtGPEGASUS") == 1) {
				gpegasus = j["boughtGPEGASUS"];
			}
			else {
				gpegasus = false;
			}
			if (j.count("boughtGBUG") == 1) {
				gbug = j["boughtGBUG"];
			}
			else {
				gbug = false;
			}
			if (j.count("boughtWAR") == 1) {
				war = j["boughtWAR"];
			}
			else {
				war = false;
			}
			if (j.count("boughtRAY") == 1) {
				ray = j["boughtRAY"];
			}
			else {
				ray = false;
			}
			if (j.count("boughtAAC") == 1) {
				aac = j["boughtAAC"];
			}
			else {
				aac = false;
			}
			if (j.count("boughtSPD") == 1) {
				spd = j["boughtSPD"];
			}
			else {
				spd = false;
			}
			if (j.count("boughtTK") == 1) {
				tk = j["boughtTK"];
			}
			else {
				tk = false;
			}

			p->worldsowned = frns;
			p->adminLevel = adminlevel;
			p->cloth_back = bac;
			p->cloth_hand = han;
			p->cloth_face = fac;
			p->cloth_hair = hai;
			p->cloth_feet = fee;
			p->cloth_pants = pan;
			p->cloth_necklace = nec;
			p->cloth_shirt = shi;
			p->cloth_mask = mas;
			p->onquest = onquest;
			p->boughtLGB = lgb;
			p->boughtLGD = lgd;
			p->boughtLGW = lgw;
			p->boughtLGK = lgk;
			p->boughtLKW = lkw;
			p->boughtCWD = cwd;
			p->boughtRFS = rfs;
			p->boughtCDG = cdg;
			p->boughtLTIT = ltit;
			p->boughtLWHIP = lwhip;
			p->boughtPHOENIX = phoenix;
			p->boughtDAV = dav;
			p->boughtZEUS = zeus;
			p->boughtNDEV = ndev;
			p->boughtTXMOM = txmom;
			p->boughtFLASHAXE = flashaxe;
			p->boughtVIOLET = violet;
			p->boughtCHIMERA = chimera;
			p->boughtBRAIN = brain;
			p->boughtCCROWN = ccrown;
			p->boughtGANGEL = gangel;
			p->boughtGROB = grob;
			p->boughtHSCYTHE = hscythe;
			p->boughtGDIAPER = gdiaper;
			p->boughtGTANGEL = gtangel;
			p->boughtGNECK = gneck;
			p->boughtGGLASS = gglass;
			p->boughtGPEGASUS = gpegasus;
			p->boughtGBUG = gbug;
			p->boughtWAR = war;
			p->boughtRAY = ray;
			p->boughtAAC = aac;
			p->boughtSPD = spd;
			p->boughtTK = tk;
			p->guild = guild;
			p->joinguild = join;
			p->level = level;
			p->xp = xp;
			p->kxpswl = kxpswl;
			p->lastlog = lastlog;
			p->login = login;
			p->isvip = isvip;
			p->rubble = rubble;
			p->rubblexp = rubblexp;
			// Mining update starts here
			p->amber = amber;
			p->amberxp = amberxp;

			p->opal = opal;
			p->opalxp = opalxp;

			p->gold = gold;
			p->goldxp = goldxp;

			p->sapphire = sapphire;
			p->sapphirexp = sapphirexp;

			p->diamond = diamond;
			p->diamondxp = diamondxp;

			p->emerald = emerald;
			p->emeraldxp = emeraldxp;
			// Mining update ends here
			p->boughtGBOW = gbow;
			p->friendinfo = frns;

			p->cloth_ances = anc;

			updateAllClothes(peer);

			ifff.close();
			PlayerInventory inventory;
			InventoryItem item;
			item.itemCount = 1;
			item.itemID = 18;
			inventory.items.push_back(item);
			item.itemCount = 1;
			item.itemID = 32;
			inventory.items.push_back(item);
			sendInventory(peer, inventory);
			string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
			if (guildname != "") {
				std::ifstream ifff("guilds/" + guildname + ".json");
				if (ifff.fail()) {
					ifff.close();
					cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
					((PlayerInfo*)(peer->data))->guild = "";

				}
				json j;
				ifff >> j;

				int gfbg, gffg;

				string gstatement, gleader;

				vector<string> gmembers;

				gfbg = j["backgroundflag"];
				gffg = j["foregroundflag"];
				gstatement = j["GuildStatement"];
				gleader = j["Leader"];
				for (int i = 0; i < j["Member"].size(); i++) {
					gmembers.push_back(j["Member"][i]);
				}

				((PlayerInfo*)(peer->data))->guildBg = gfbg;
				((PlayerInfo*)(peer->data))->guildFg = gffg;
				((PlayerInfo*)(peer->data))->guildStatement = gstatement;
				((PlayerInfo*)(peer->data))->guildLeader = gleader;
				((PlayerInfo*)(peer->data))->guildMembers = gmembers;

				ifff.close();
			}


			if (!std::experimental::filesystem::exists("fragments/" + PlayerDB::getProperName(p->rawName) + ".txt"))
			{
				ofstream create("fragments/" + PlayerDB::getProperName(p->rawName) + ".txt");
				create << 0;
				create << 0;
				create << 0;
				create << 0;

			}
			ifstream fd("fragments/" + PlayerDB::getProperName(p->rawName) + ".txt");

			fd >> p->fEarth;
			fd >> p->fDark;
			fd >> p->fFire;
			fd >> p->fWater;
			fd.close();

		}

		delete data;

	}
}


void joinPVP(ENetPeer* peer) {
	if (((PlayerInfo*)(peer->data))->isIn == false) return;
	WorldInfo info = worldDB.get("PVP");
	sendWorld(peer, &info);
	Player::OnAddNotification(peer, "`bBattle begins `wnow`o, `4FREE FOR ALL`w!``", "audio/race_start.wav", "interface/logo_188.rttex");
	match.playersInQueue--;
	match.playersInGame++;

	if (match.topOne == "") {
		match.topOne = ((PlayerInfo*)(peer->data))->displayName;
	}
	else if (match.topTwo == "") {
		match.topTwo = ((PlayerInfo*)(peer->data))->displayName;
	}
	else if (match.topThree == "") {
		match.topThree = ((PlayerInfo*)(peer->data))->displayName;
	}
	else if (match.topFour == "") {
		match.topFour = ((PlayerInfo*)(peer->data))->displayName;
	}
	else if (match.topFive == "") {
		match.topFive = ((PlayerInfo*)(peer->data))->displayName;
	}
	else
	{
		match.topSix = ((PlayerInfo*)(peer->data))->displayName;
	}

	((PlayerInfo*)(peer->data))->isInGame = true;
	((PlayerInfo*)(peer->data))->isWaitingForMatch = false;
	int x = 3040;
	int y = 736;

	for (int j = 0; j < info.width * info.height; j++)
	{
		if (info.items[j].foreground == 6) {
			x = (j % info.width) * 32;
			y = (j / info.width) * 32;
		}
	}

	((PlayerInfo*)(peer->data))->respawnX = x;
	((PlayerInfo*)(peer->data))->respawnY = y;
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(((PlayerInfo*)(peer->data))->userID) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	//enet_host_flush(server);
	delete p.data;
	((PlayerInfo*)(peer->data))->netID = cId;
	onPeerConnect(peer);
	cId++;

	if (((PlayerInfo*)(peer->data))->loadedInventory == false) {
		PlayerInventory inventory;
		InventoryItem item;
		item.itemCount = 1;
		item.itemID = 18;
		inventory.items.push_back(item);
		item.itemID = 32;
		inventory.items.push_back(item);
		((PlayerInfo*)(peer->data))->inventory = inventory;
		((PlayerInfo*)(peer->data))->loadedInventory = true;
	}
	sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
	//updateAllClothes(peer);

	Player::PlayAudio(peer, "audio/ogg/gtv3_survive_ends.ogg", 390000);
}




void joinWorld(ENetPeer* peer, string act, int x2, int y2)
{
	/*
	if (((PlayerInfo*)(peer->data))->isBot == true) {
		enet_peer_disconnect_now(peer, 0);
	}
	*/

	try {




		if (act.length() > 24) {
			sendConsoleMsg(peer, "`4Sorry, but world names with more than 24 characters are not allowed!");

			GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
		}
		else {

			using namespace std::chrono;
			if (((PlayerInfo*)(peer->data))->lastJoinReq + 500 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
			{
				((PlayerInfo*)(peer->data))->lastJoinReq = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			}
			else {
				Player::OnConsoleMessage(peer, "`oSlow down when entering worlds, jeez!``");
				Player::OnFailedToEnterWorld(peer);

				return;
			}
			string upsd = act;
			std::transform(upsd.begin(), upsd.end(), upsd.begin(), ::toupper);
			if (upsd == "TEST") {
				Player::OnConsoleMessage(peer, "`4To reduce confusion, this is not a valid world name`w. `oTry another one`w?``");
				Player::OnFailedToEnterWorld(peer);

				return;
			}
			if (upsd == "PVP") {

				if (((PlayerInfo*)(peer->data))->isQueuing == false) {
					if (match.isMatchRunning == true) {
						Player::OnConsoleMessage(peer, "`4Game `wis `4currently running, enter soon!``");
						Player::OnFailedToEnterWorld(peer);

						return;
					}
					((PlayerInfo*)(peer->data))->isWaitingForMatch = true;
					((PlayerInfo*)(peer->data))->isQueuing = true;

					if (match.playersInQueue < 0) match.playersInQueue = 0;
					match.playersInQueue++;
					if (match.playersInQueue < 6) {
						Player::OnConsoleMessage(peer, "`wWaiting for players... (" + to_string(match.playersInQueue) + "/6)``");
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (((PlayerInfo*)(currentPeer->data))->isQueuing == true) {
								Player::PlayAudio(currentPeer, "audio/success.wav", 100);
								Player::OnConsoleMessage(currentPeer, "`w" + ((PlayerInfo*)(peer->data))->displayName + " `ojoined the match! (" + to_string(match.playersInQueue) + "/6)");
							}
						}

					}
					else
					{

						WorldInfo info = worldDB.get("PVP");
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (((PlayerInfo*)(currentPeer->data))->isQueuing) {
								((PlayerInfo*)(currentPeer->data))->isQueuing = false;
								joinPVP(currentPeer);
								//Player::OnCountdownStart(peer, ((PlayerInfo*)(peer->data))->netID, 390, 0);
							}
						}
						match.timePVPStarted = GetCurrentTimeInternalSeconds();
						match.playersInQueue = 0;
						match.isMatchRunning = true;
					}
					return;
				}
				//Player::PlayAudio(peer, "audio/ogg/gtv3_survive_ends.ogg", 870000);
			}






			WorldInfo info = worldDB.get(act);
			sendWorld(peer, &info);

			int x = 3040;
			int y = 736;

			for (int j = 0; j < info.width * info.height; j++)
			{
				if (info.items[j].foreground == 6) {
					x = (j % info.width) * 32;
					y = (j / info.width) * 32;
				}
			}


			if (x2 != 0 && y2 != 0)
			{
				x = x2;
				y = y2;
			}
			int id = 244;
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "|" + std::to_string(id) + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
			//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;

			/* Weather change
			{
				GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), info.weather));
				ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;
			}
			*/

			((PlayerInfo*)(peer->data))->netID = cId;
			onPeerConnect(peer);
			cId++;
			sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);


			WorldInfo* world = getPlyersWorld(peer);
			string nameworld = world->name;
			string ownerworld = world->owner;
			int count = 0;
			ENetPeer* currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				count++;
			}


			{
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;

						/*GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket * packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;

						int effect = ((PlayerInfo*)(peer->data))->entereffect;*/
						int x = ((PlayerInfo*)(peer->data))->x;
						int y = ((PlayerInfo*)(peer->data))->y;
						updateAllClothes(peer);
						/*GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

						ENetPacket * packetd = enet_packet_create(psp.data,
							psp.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packetd);
						delete psp.data;*/
					}

				}
			}
			//updateInvis(peer);
			//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->puncheffect);
			/*{
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{

						int ID = ((PlayerInfo*)(currentPeer->data))->puncheffect;
						((PlayerInfo*)(currentPeer->data))->puncheffect = ID;
						sendPuncheffect(currentPeer);

					}

				}

			}
			*/





			int otherpeople = 0;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
					otherpeople++;
			}
			int otherpeoples = otherpeople - 1;;
			GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
			ENetPacket* packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			if (ownerworld != "") {
				GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
				ENetPacket* packet3 = enet_packet_create(p3.data,
					p3.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet3);
				delete p3.data;
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
				}
			}

			/*if (((PlayerInfo*)(peer->data))->mute == 1) {
				((PlayerInfo*)(peer->data))->cantsay = true;
				sendState(peer);
			}*/
			GamePacket p22 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));
			delete p22.data;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				/*if (isHere(peer, currentPeer) && ((PlayerInfo*)(peer->data))->isMod == 0) {
					{

						ENetPacket * packet2 = enet_packet_create(p22.data,
							p22.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2);

					}
				}*/
			}
		}

	}
	catch (int e) {
		if (e == 1) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have exited the world."));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else if (e == 2) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have entered bad characters in the world name!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else if (e == 3) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Exit from what? Click back if you're done playing."));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "I know this menu is magical and all, but it has its limitations! You can't visit this world!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
	}
}



void sendNothingHappened(ENetPeer* peer, int x, int y) {
	PlayerMoving data;
	data.netID = ((PlayerInfo*)(peer->data))->netID;
	data.packetType = 0x8;
	data.plantingTree = 0;
	data.netID = -1;
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
}

void sendEditWorld(int i, int tile, int causedBy, ENetPeer* peer)
{
	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;


	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = 0;
	WorldInfo* world = getPlyersWorld(peer);


	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}

}


void sendDrop(ENetPeer* peer, int netID, int x, int y, int item, int count, BYTE specialEffect)
{
	if (item >= 7196) return;
	if (item < 0) return;

	ENetPeer* currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 14;
			data.x = x;
			data.y = y;
			data.netID = netID;
			data.plantingTree = item;
			float val = count; // item count
			BYTE val2 = specialEffect;

			BYTE* raw = packPlayerMoving(&data);
			memcpy(raw + 16, &val, 4);
			memcpy(raw + 1, &val2, 1);

			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
}





void Player::OnInvis(ENetPeer* peer, int state, int netID) {
	GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), state));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnFailedToEnterWorld(ENetPeer* peer) {
	GamePacket p = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnTextOverlay(ENetPeer* peer, string text) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), text));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnKilled(ENetPeer* peer, int netID) {
	GamePacket p = packetEnd(appendString(createPacket(), "OnKilled"));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::SetRespawnPos(ENetPeer* peer, int posX, int posY, int netID) {
	GamePacket p22 = packetEnd(appendInt(appendString(createPacket(), "SetRespawnPos"), posX + posY)); // (world->width * posY)
	memcpy(p22.data + 8, &netID, 4);
	ENetPacket* packet22 = enet_packet_create(p22.data,
		p22.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet22);
	delete p22.data;
}

void Player::OnZoomCamera(ENetPeer* peer, float value1, int value2) {
	GamePacket p = packetEnd(appendIntx(appendFloat(appendString(createPacket(), "OnZoomCamera"), value1), value2));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}



void Player::SmoothZoom(ENetPeer* peer) {
	GamePacket p = packetEnd(appendIntx(appendFloat(appendString(createPacket(), "OnZoomCamera"), 10000.0f), 1000));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnRaceStart(ENetPeer* peer, int netID)
{
	GamePacket p = packetEnd(appendString(createPacket(), "OnRaceStart"));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnRaceEnd(ENetPeer* peer, int netID)
{
	GamePacket p = packetEnd(appendString(createPacket(), "OnRaceStart"));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::Ping(ENetPeer* peer)
{
	GamePacket p = packetEnd(appendString(createPacket(), "Ping"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnDialogRequest(ENetPeer* peer, string args)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), args));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetPos(ENetPeer* peer, int netID, int x, int y) {
	GamePacket p = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetFreezeState(ENetPeer* peer, int state, int netID) {
	GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetFreezeState"), state));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetCurrentWeather(ENetPeer* peer, int weather) {
	GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), weather));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnTradeStatus(ENetPeer* peer, int netIDOther, string offerstatus, string offer)
{
	//"add_slot|20|3locked|0reset_locks|1accepted|1"
	GamePacket p = packetEnd(appendString(appendString(appendString(appendInt(appendString(createPacket(), "OnTradeStatus"), netIDOther), ""), offerstatus + "'s offer"), offer));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetBux(ENetPeer* peer, int gems, int accountstate)
{
	GamePacket p = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnSetBux"), gems), accountstate));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnParticleEffect(ENetPeer* peer, int effect, float x, float y, int delay) {
	GamePacket p = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));
	int deathFlag = 0x19;
	memcpy(p.data + 24, &delay, 4);
	memcpy(p.data + 56, &deathFlag, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::SetHasGrowID(ENetPeer* peer, int status, string username, string password)
{
	GamePacket p2 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), status), username), password));
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;
}

void Player::OnNameChanged(ENetPeer* peer, int netID, string name)
{
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`0`0" + name));
	memcpy(p3.data + 8, &netID, 4);
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			enet_peer_send(currentPeer, 0, packet3);
		}
	}
	delete p3.data;
}

void Player::OnSendToServer(ENetPeer* peer, int userID, int token, string ip, int port, string doorId, int lmode)
{
	auto p = packetEnd(appendInt(appendString(appendInt(appendInt(appendInt(appendString(createPacket(), "OnSendToServer"), port), token), userID), ip + "|" + doorId), lmode));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnChangeSkin(ENetPeer* peer, int skinColor, int netID) {
	auto p = packetEnd(appendInt(appendString(createPacket(), "OnChangeSkin"), skinColor));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnCountdownStart(ENetPeer* peer, int netID, int time, int score) {
	if (score == -1) {
		auto p = packetEnd(appendInt(appendString(createPacket(), "OnCountdownStart"), time));
		memcpy(p.data + 8, &netID, 4);
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	else
	{
		auto p = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnCountdownStart"), time), score));
		memcpy(p.data + 8, &netID, 4);
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
}

void Player::OnPlayPositioned(ENetPeer* peer, string audiofile, int netID, bool broadcastInWorld, ENetPacket* pk) // packet only externally used when broadcasting / sending to multiple players to reduce memory leaks / cpu usage cuz we dont want to loop creating the packet for each player that would be insanely stupid.
{
	if (broadcastInWorld) {
		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {
				enet_peer_send(currentPeer, 0, pk);
			}
		}
	}
	else
	{
		auto p = packetEnd(appendString(appendString(createPacket(), "OnPlayPositioned"), audiofile));
		memcpy(p.data + 8, &netID, 4);
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
}

void Player::OnBillboardChange(ENetPeer* peer, int netID) {

	GamePacket p = packetEnd(appendInt(appendInt(appendInt(appendInt(appendIntx(appendString(createPacket(), "OnBillboardChange"), 1 /*???*/), 12), 1), 5), 1)); //2 == ItemID
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnFlagMay2019(ENetPeer* peer, int state, int netID) {
	GamePacket p = packetEnd(appendIntx(appendString(createPacket(), "OnFlagMay2019"), state));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnStartTrade(ENetPeer* peer, int netID1, int netID2)
{
	GamePacket p = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnStartTrade"), netID1), netID2));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnForceTradeEnd(ENetPeer* peer)
{
	GamePacket p = packetEnd(appendString(createPacket(), "OnForceTradeEnd"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::PlayAudio(ENetPeer* peer, string audioFile, int delayMS)
{
	string text = "action|play_sfx\nfile|" + audioFile + "\ndelayMS|" + to_string(delayMS) + "\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);
	ENetPacket* packet = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet);
	delete data;
}

class GTDialog
{
public:
	string dialogstr = "";
	void addSpacer(SpacerTypes type);
	void addLabelWithIcon(string text, int tileid, LabelStyles type);
	void addButton(string buttonname, string buttontext);
	void addCheckbox(string checkboxname, string string, CheckboxTypes type);
	void addTextBox(string str);
	void addSmallText(string str);
	void addInputBox(string name, string text, string cont, int size);
	void addQuickExit();
	void endDialog(string name, string accept, string nvm);
	void addCustom(string name);
	string finishDialog();

	operator string() {
		return this->dialogstr;
	}
};


void GTDialog::addSpacer(SpacerTypes type) {
	switch (type)
	{
	case SPACER_BIG:
		this->dialogstr.append("add_spacer|big|\n");
		break;
	case SPACER_SMALL:
		this->dialogstr.append("add_spacer|small|\n");
		break;
	default:
		break;
	}
}

void GTDialog::addLabelWithIcon(string text, int tileid, LabelStyles type) {
	switch (type)
	{
	case LABEL_BIG:
		this->dialogstr.append("add_label_with_icon|big|" + text + "|left|" + to_string(tileid) + "|\n");
		break;
	case LABEL_SMALL:
		this->dialogstr.append("add_label_with_icon|small|" + text + "|left|" + to_string(tileid) + "|\n");
		break;
	default:
		break;
	}
}

void GTDialog::addButton(string buttonname, string buttontext) {
	this->dialogstr.append("add_button|" + buttonname + "|" + buttontext + "|noflags|0|0|\n");
}

void GTDialog::addCheckbox(string checkboxname, string string, CheckboxTypes type) {
	switch (type)
	{
	case CHECKBOX_SELECTED:
		this->dialogstr.append("add_checkbox|" + checkboxname + "|" + string + "|1|\n");
		break;
	case CHECKBOX_NOT_SELECTED:
		this->dialogstr.append("add_checkbox|" + checkboxname + "|" + string + "|0|\n");
		break;
	default:
		break;
	}
}

void GTDialog::addTextBox(string str) {
	this->dialogstr.append("add_textbox|" + str + "|left|\n");
}

void GTDialog::addSmallText(string str) {
	this->dialogstr.append("add_smalltext|" + str + "|\n");
}

void GTDialog::addInputBox(string name, string text, string cont, int size) {
	this->dialogstr.append("add_text_input|" + name + "|" + text + "|" + cont + "|" + to_string(size) + "|\n");
}

void GTDialog::addQuickExit() {
	this->dialogstr.append("add_quick_exit|\n");
}

void GTDialog::endDialog(string name, string accept, string nvm) {
	this->dialogstr.append("end_dialog|" + name + "|" + nvm + "|" + accept + "|\n");
}

void GTDialog::addCustom(string name) {
	this->dialogstr.append(name + "\n");
}

string GTDialog::finishDialog() {
	return this->dialogstr;
}
void Player::showWrong(ENetPeer* peer, string itemFind, string listFull) {

	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wFind item: " + itemFind + "``|left|206|\nadd_spacer|small|\n" + listFull + "add_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\n"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void sendFakeChatMessage(ENetPeer* peer, string rawName, string message)
{
	if (message.length() == 0) return;
	ENetPeer* currentPeer;
	int netID = 0;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->rawName == rawName) {
			name = ((PlayerInfo*)(currentPeer->data))->displayName;
			netID = ((PlayerInfo*)(currentPeer->data))->netID;
		}

	}
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o<`w" + name + "`o> " + message));
	GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), message), 0));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet);

			//enet_host_flush(server);

			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(currentPeer, 0, packet2);

			//enet_host_flush(server);
		}
	}
	delete p.data;
	delete p2.data;
}

/*
void InitializePacketWithMannequin(BYTE* raw)
{
	int i = 0;
	raw[i] = 0x05; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x08; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x09; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x17; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x22; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x8c; i++;
	raw[i] = 0x05; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x01; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x0e; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
	raw[i] = 0x00; i++;
}
*/

/*
void updateMannequin(
	ENetPeer* peer, int foreground, int x, int y, int background, string text,
	int clothHair, int clothHead, int clothMask,
	int clothHand, int clothNeck, int clothShirt,
	int clothPants, int clothFeet, int clothBack, bool sendPacketToEveryone = true, int blockState = 0)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);

	short textLen = text.size();
	int plength = 95 + textLen;
	BYTE* raw = new BYTE[plength];
	memset(raw, 0, plength);
	InitializePacketWithMannequin(raw);
	int negativeOne = -1;
	int adjhasdjk = 0xfdfdfdfd;
	int visor = 138;

	memcpy(raw + 44, &x, sizeof(int));
	memcpy(raw + 48, &y, sizeof(int));
	memcpy(raw + 56, &foreground, sizeof(short));
	memcpy(raw + 58, &background, sizeof(short));
	memcpy(raw + 60, &blockState, sizeof(short));
	memcpy(raw + 65, &textLen, sizeof(short));
	memcpy(raw + 67, text.c_str(), textLen);
	memcpy(raw + 68 + textLen, &negativeOne, sizeof(int));
	memcpy(raw + 72 + textLen, &clothHead, sizeof(short));
	memcpy(raw + 74 + textLen, &clothShirt, sizeof(short));
	memcpy(raw + 76 + textLen, &clothPants, sizeof(short));
	memcpy(raw + 78 + textLen, &clothFeet, sizeof(short));
	memcpy(raw + 80 + textLen, &clothMask, sizeof(short));
	memcpy(raw + 82 + textLen, &clothHand, sizeof(short));
	memcpy(raw + 84 + textLen, &clothBack, sizeof(short));
	memcpy(raw + 86 + textLen, &clothHair, sizeof(short));
	memcpy(raw + 88 + textLen, &clothNeck, sizeof(short));
	memcpy(raw + 91 + textLen, &adjhasdjk, sizeof(short));

	ENetPacket* p = enet_packet_create(0, plength + 4, ENET_PACKET_FLAG_RELIABLE);
	int four = 4;
	memcpy(p->data, &four, sizeof(int));
	memcpy((char*)p->data + 4, raw, plength);

	if (sendPacketToEveryone)
	{
		ENetPeer* currentPeer;
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {
				enet_peer_send(currentPeer, 0, p);
			}
		}
		delete raw;
	}
	else
	{
		enet_peer_send(peer, 0, p);
		delete raw;
	}
}
*/

/*
int getPlayersCountInWorld(string name)
{
	int count = 0;
	ENetPeer * currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->currentWorld == name)
			if (((PlayerInfo*)(currentPeer->data))->isinv == false) count++;
	}
	return count;
}*/

/*
void Player::SendTilePickup(ENetPeer* peer, int itemid, int netID, float x, float y, int itemcount, int itemamount) {
	PlayerMoving data;
	data.characterState = 0x0; // animation
	data.x = x * 32;
	data.y = y * 32;
	data.punchX = 0;
	data.punchY = 0;
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = -1;
	data.secondnetID = -1;
	data.plantingTree = itemid;
	data.packetType = 0xE;
	BYTE* raw = packPlayerMoving(&data);
	int netIdSrc = -1;
	int netIdDst = -1;
	int three = 3;
	int n1 = itemid;
	int one = 1;
	float count = itemamount;
	memcpy(raw + 3, &three, 1);
	memcpy(raw + 4, &netIdDst, 4);
	memcpy(raw + 8, &netIdSrc, 4);
	memcpy(raw + 16, &count, 4);
	memcpy(raw + 20, &n1, 4);

	((PlayerInfo*)(peer->data))->droppeditemcount++;
	SendPacketRaw(4, raw, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);

	PlayerMoving datax;
	datax.characterState = 0x0; // animation
	datax.x = x * 32;
	datax.y = y * 32;
	datax.punchX = 0;
	datax.punchY = 0;
	datax.XSpeed = 0;
	datax.YSpeed = 0;
	datax.netID = -1;
	datax.secondnetID = 0;
	datax.plantingTree = itemid;
	datax.packetType = 0xE;
	BYTE* raws = packPlayerMoving(&data);
	int lol = -1;


	memcpy(raws + 3, &three, 1);
	memcpy(raws + 4, &netID, 4);
	memcpy(raws + 8, &lol, 4);
	memcpy(raws + 20, &((PlayerInfo*)(peer->data))->droppeditemcount, 4);
	SendPacketRaw(4, raws, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
}*/

void Player::SendTileAnimation(ENetPeer* peer, int x, int y, int causedBy, int tile)
{
	if (x > -1 && y > -1 && causedBy > -1)
	{
		PlayerMoving data;
		data.characterState = 0x0; // animation
		data.x = x;
		data.y = y;
		data.punchX = 0;
		data.punchY = 0;
		data.XSpeed = 0;
		data.YSpeed = 0;
		data.netID = causedBy;
		data.plantingTree = 6;
		data.packetType = 0x8;
		SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	}
}


void Player::OnRemove(ENetPeer* peer, int netID)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(netID) + "\n"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnConsoleMessage(ENetPeer* peer, string text)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), text));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnTalkBubble(ENetPeer* peer, int netID, string text, int chatColor, bool isOverlay)
{
	if (isOverlay == true) {
		GamePacket p = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"),
			((PlayerInfo*)(peer->data))->netID), text), chatColor), 1));

		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	else
	{
		GamePacket p = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"),
			((PlayerInfo*)(peer->data))->netID), text), chatColor));

		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
}
void updateSignWrench(ENetPeer* peer, int foreground, int x, int y, string text, int background)
{
	int hmm = 8, wot = text.length(), lol = 0, wut = 5;
	int yeh = hmm + 3 + 1, idk = 15 + wot, lmao = -1, yey = 2; //idk = text_len + 15, wut = type(?), wot = text_len, yey = len of text_len
	int ok = 52 + idk;
	int kek = ok + 4, yup = ok - 8 - idk;
	int thonk = 4, magic = 56, wew = ok + 5 + 4;
	int wow = magic + 4 + 5;
	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, thonk);
	memcpy(data + yeh, &hmm, thonk); //read discord
	memcpy(data + yup, &x, 4);
	memcpy(data + yup + 4, &y, 4);
	memcpy(data + 4 + yup + 4, &idk, thonk);
	memcpy(data + magic, &foreground, yey);
	memcpy(data + magic + 2, &background, yey); //p100 fix by the one and only lapada
	memcpy(data + thonk + magic, &lol, thonk);
	memcpy(data + magic + 4 + thonk, &yey, 1);
	memcpy(data + wow, &wot, yey); //data + wow = text_len
	memcpy(data + yey + wow, text.c_str(), wot); //data + text_len_len + text_len_offs = text
	memcpy(data + ok, &lmao, thonk); //end ?
	memcpy(p->data, &thonk, thonk);
	memcpy((char*)p->data + thonk, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}
void Player::OnAddNotification(ENetPeer* peer, string text, string audiosound, string interfaceimage)
{
	auto p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"),
		interfaceimage),
		text),
		audiosound),
		0));

	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}


bool has_only_digits(const string s) {
	return s.find_first_not_of("0123456789") == string::npos;
}
bool has_only_digits_wnegative(const string s) {
	return s.find_first_not_of("-0123456789") == string::npos;
}


void playerRespawn(ENetPeer* peer, bool isDeadByTile) {
	int netID = ((PlayerInfo*)(peer->data))->netID;
	if (isDeadByTile == false) {
		Player::OnKilled(peer, ((PlayerInfo*)(peer->data))->netID);
	}
	GamePacket p2x = packetEnd(appendInt(appendString(createPacket(), "OnSetFreezeState"), 0));
	memcpy(p2x.data + 8, &netID, 4);
	int respawnTimeout = 2000;
	int deathFlag = 0x19;
	memcpy(p2x.data + 24, &respawnTimeout, 4);
	memcpy(p2x.data + 56, &deathFlag, 4);
	ENetPacket* packet2x = enet_packet_create(p2x.data,
		p2x.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2x);
	delete p2x.data;
	Player::OnSetFreezeState(peer, 2, netID);
	GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), ((PlayerInfo*)(peer->data))->respawnX, ((PlayerInfo*)(peer->data))->respawnY));
	memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
	respawnTimeout = 2000;
	memcpy(p2.data + 24, &respawnTimeout, 4);
	memcpy(p2.data + 56, &deathFlag, 4);
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;
	GamePacket p2a = packetEnd(appendString(appendString(createPacket(), "OnPlayPositioned"), "audio/teleport.wav"));
	memcpy(p2a.data + 8, &netID, 4);
	respawnTimeout = 2000;
	memcpy(p2a.data + 24, &respawnTimeout, 4);
	memcpy(p2a.data + 56, &deathFlag, 4);
	ENetPacket* packet2a = enet_packet_create(p2a.data,
		p2a.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2a);
	delete p2a.data;
}


void sendTileUpdate(int x, int y, int tile, int causedBy, ENetPeer* peer)
{
	if (worldproperlock == true) return;

	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;


	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = tile;

	WorldInfo* world = getPlyersWorld(peer);
	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 758)
		{
			sendRoulete(peer, x, y);
		}
	}
	if (world == NULL) return;
	if (x<0 || y<0 || x>world->width || y>world->height) return;
	sendNothingHappened(peer, x, y);
	if (world->items[x + (y * world->width)].foreground == 2946 && tile != 18 && tile > 0) {
		if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
			((PlayerInfo*)(peer->data))->blockx = x;
			((PlayerInfo*)(peer->data))->blocky = y;
			//cout << "put" << endl;
			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer)) {
					BlockVisual data;
					data.packetType = 0x5;
					data.characterState = 8;
					data.punchX = x;
					data.punchY = y;
					data.charStat = 13; // 13
					data.blockid = 2946; // 2946 3794 = display shelf
					//data.netID = ((PlayerInfo*)(peer->data))->netID;
					data.backgroundid = 6864;
					data.visual = 0x00010000; //0x00210000
					world->items[x + (y * world->width)].displayblock = tile;

					int n = tile;

					string hex = "";
					{
						std::stringstream ss;
						ss << std::hex << n; // int decimal_value
						std::string res(ss.str());

						hex = res + "17";
					}
					//cout << hex << endl;
					int squaresign = ((PlayerInfo*)(peer->data))->blockx + (((PlayerInfo*)(peer->data))->blocky * 100);
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					std::ofstream outfile("display/" + world + "X" + std::to_string(squaresign) + ".txt");
					outfile << n;
					outfile.close();


					int xx;
					std::stringstream ss;
					ss << std::hex << hex;
					ss >> xx;
					data.displayblock = xx;

					SendPacketRaw(192, packBlockVisual(&data), 69, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
				}
			}
			return;
		}
	}

	/*if (world != NULL) {

		if (isMail(world->items[x + (y * world->width)].foreground))
		{
			if (((PlayerInfo*)(peer->data))->rawName == world->owner)
			{
				std::ifstream ifs("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
				if (ifs.is_open())
				{
					WorldInfo* wrld = getPlyersWorld(peer);
					json j;
					ifs >> j;
					string line1 = j["line1"];
					string line2 = j["line2"];
					string line3 = j["line3"];
					string line4 = j["line4"];
					string line5 = j["line5"];
					string line6 = j["line6"];
					string line7 = j["line7"];
					string line8 = j["line8"];
					string line9 = j["line9"];
					string line10 = j["line10"];
					int amount = j["amount"];
					//
					GTDialog mail;
					mail.addLabelWithIcon("`w" + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``", itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).id, LABEL_BIG);
					mail.addSpacer(SPACER_SMALL);
					mail.addTextBox("`oYou have `w" + std::to_string(amount) + " `oletters:");
					mail.addCustom("embed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "");
					mail.addCustom("embed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "");
					if (line1 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line1);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line2 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line2);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line3 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line3);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					//
					if (line4 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line4);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line5 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line5);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line6 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line6);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line7 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line7);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line8 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line8);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line9 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line9);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line10 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line10);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (amount != 0)
					{
						mail.addSpacer(SPACER_SMALL);
						mail.addButton("emptyMail;" + to_string(((PlayerInfo*)(peer->data))->wrenchx) + ";" + to_string(((PlayerInfo*)(peer->data))->wrenchy) + "", "`4Empty " + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``");
					}
					if (amount == 10)
					{
						mail.addTextBox("`oThis `w" + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + " `o already has `w" + std::to_string(amount) + " `oletters in it, can't add more until you clear them.``");
					}
					mail.addSpacer(SPACER_SMALL);
					mail.addQuickExit();
					mail.addButton("null", "`wClose``");
					//
					OnDialogRequest(peer, mail.finishDialog());
				}
			}
			else
			{
				std::ifstream ifs("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
				if (ifs.is_open())
				{
					WorldInfo* wrld = getPlyersWorld(peer);
					json j;
					ifs >> j;
					int amount = j["amount"];
					if (amount == 10)
					{
						GTDialog mail;
						mail.addLabelWithIcon("`wEdit " + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``", itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).id, LABEL_BIG);
						mail.addTextBox("`oThis `w" + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + " `oalready has `w" + std::to_string(amount) + " `oin it, you can't leave a message anymore until they got cleared.``");
						mail.addButton("null", "`wClose``");
						//
						OnDialogRequest(peer, mail.finishDialog());
					}
					else
					{
						GTDialog mail;
						mail.addLabelWithIcon("`wEdit " + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``", itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).id, LABEL_BIG);
						mail.addTextBox("`oWant to leave a message for the owner?``");
						mail.addInputBox("ch3", "", "", 100);
						mail.addCustom("embed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "");
						mail.addCustom("embed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "");
						mail.endDialog("mail_edit", "`2Send Letter``", "`wCancel``");
						//
						OnDialogRequest(peer, mail.finishDialog());
					}
				}
			}
		}
		if (isMail(world->items[x + (y * world->width)].foreground))
		{
			std::ofstream o("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
			if (!o.is_open()) {
				cout << GetLastError() << endl;
				_getch();
			}
			json j;

			j["line1"] = "";
			j["line2"] = "";
			j["line3"] = "";
			j["line4"] = "";
			j["line5"] = "";
			j["line6"] = "";
			j["line7"] = "";
			j["line8"] = "";
			j["line9"] = "";
			j["line10"] = "";
			j["amount"] = 0;
			o << j << std::endl;
			updateSignWrench(peer, world->items[x + (y * world->width)].foreground, x, y, "", world->items[x + (y * world->width)].background);
		}
		if (isMail(tile))
		{
			world->items[x + (y * world->width)].foreground = tile;
			std::ofstream o("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
			if (!o.is_open()) {
				cout << GetLastError() << endl;
				_getch();
			}
			json j;

			j["line1"] = "";
			j["line2"] = "";
			j["line3"] = "";
			j["line4"] = "";
			j["line5"] = "";
			j["line6"] = "";
			j["line7"] = "";
			j["line8"] = "";
			j["line9"] = "";
			j["line10"] = "";
			j["amount"] = 0;
			o << j << std::endl;
			//
			updateSignWrench(peer, world->items[x + (y * world->width)].foreground, x, y, "`wThere is `20 `wletters in this `o" + itemDefs.at(world->items[x + (y * world->width)].foreground).name + "``", world->items[x + (y * world->width)].background);
		}

		if (world->items[x + (y * world->width)].foreground == 12 || world->items[x + (y * world->width)].foreground == 858 || world->items[x + (y * world->width)].foreground == 886 || world->items[x + (y * world->width)].foreground == 30) {
			if (tile == 32) {
				((PlayerInfo*)(peer->data))->wrenchx = x;
				((PlayerInfo*)(peer->data))->wrenchy = y;
				if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					int ischecked;
					bool exist3 = std::experimental::filesystem::exists("iop/" + world + std::to_string(x) + std::to_string(y) + ".txt");

					if (exist3)
					{
						std::ifstream ifs("iop/" + world + std::to_string(x) + std::to_string(y) + ".txt");
						std::string contentoo((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));
						if (contentoo == "1")
						{
							ischecked = 1;
						}
						else if (contentoo == "0")
						{
							ischecked = 0;
						}
						else
						{
							ischecked = 1;
						}
					}
					else
					{
						ischecked = 1;
					}
					bool exist = std::experimental::filesystem::exists("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");

					if (exist)
					{
						bool exist1 = std::experimental::filesystem::exists("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");

						if (exist1)
						{
							bool exist2 = std::experimental::filesystem::exists("id/" + world + std::to_string(x) + std::to_string(y) + ".txt");

							if (exist2)
							{
								std::ifstream ifs("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));
								std::ifstream ifs1("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content1((std::istreambuf_iterator<char>(ifs1)),
									(std::istreambuf_iterator<char>()));
								std::ifstream ifs2("id/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content2((std::istreambuf_iterator<char>(ifs2)),
									(std::istreambuf_iterator<char>()));
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3||" + content + "|85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3||" + content1 + "|24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id||" + content2 + "|11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								return;
							}
							else
							{
								std::ifstream ifs("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));
								std::ifstream ifs1("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");
								std::string content1((std::istreambuf_iterator<char>(ifs1)),
									(std::istreambuf_iterator<char>()));
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3||" + content + "|85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3||" + content1 + "|24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id|||11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								return;
							}
						}
						else
						{
							std::ifstream ifs("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");
							std::string content((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3||" + content + "|85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3|||24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id|||11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);
							delete p.data;
							return;
						}
					}
					else
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Door``|left|12|\n\nadd_label|small|`oLabel``|left|4|\nadd_text_input|ch3|||85|\nembed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "\nembed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "\n\nadd_label|small|`oDestination``|left|4|\nadd_text_input|wo3|||24|\n\nadd_label|small|`oEnter a Destination in this format: `2WORLDNAME:ID``|left|4|\n\nadd_label|small|`oleave `2WORLDNAME `oblank (:ID) to go to the door with `2ID `oin the `2Current World.``|left|4|\n\nadd_label|small|`oID``|left|4|\nadd_text_input|id|||11|\n\nadd_label|small|`oSet a unique `2ID `oto target this door as a Destination from another!``|left|4|\nadd_checkbox|iop|`oIs open to public|" + std::to_string(ischecked) + "\nend_dialog|door_edit|Cancel|OK|"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
						return;
					}
				}
			}
		}
	}*/

	if (tile == 32)
	{
		if (world->items[x + (y * world->width)].foreground == 6952) {
			if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
				if (((PlayerInfo*)(peer->data))->level < 80)
				{
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@You Must Be Aleast `9Level `480 `@To Use `3This Machine`@!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;

				}
				else {
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|6952|0|0|\n\nadd_spacer|small|\nadd_textbox|`oThis machine is stronger than you think! It has ability to convert premium blocks into crystals! `4Warning! `oYou must have at least 100 blocks! Click `9Start `oTo get started!|\n\nadd_spacer|small|\nadd_button|magicmachine|`9Start|0|0|\nadd_quick_exit|"));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packet2);
					delete p2.data;
				}
			}
			else {

				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You must be world owner to use this machine!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;

			}


		}
	}


	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 1008) {
			if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
				int valgem;
				valgem = rand() % 80;
				std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string content((std::istreambuf_iterator<char>(ifs)),
					(std::istreambuf_iterator<char>()));
				if (((PlayerInfo*)(peer->data))->level < 15)
				{
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@You Must Be Aleast `9Level `415 `@To Harvest `eATM Machines`@!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;
				}
				else {
					using namespace std::chrono;
					if (((PlayerInfo*)(peer->data))->lastATM + 1200 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
					{
						((PlayerInfo*)(peer->data))->lastATM = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
						ofstream fd("atm/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						fd << ((PlayerInfo*)(peer->data))->lastATM;
						fd.close();
					}
					else {
						int kiekDar = (((PlayerInfo*)(peer->data))->lastATM + 1200 - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count());
						long milli = kiekDar;
						//3600000 milliseconds in an hour
						long hr = milli / 3600000;
						milli = milli - 3600000 * hr;
						//60000 milliseconds in a minute
						long min = milli / 60000;
						milli = milli - 60000 * min;

						//1000 milliseconds in a second
						long sec = milli / 1000;

						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Cooldown `@Please Wait `9" + to_string(sec) + "s. `@To Use ATM!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);


						enet_peer_send(peer, 0, packet);
						delete p.data;
						//enet_host_flush(server);
						return;
					}

					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^ You have found `9" + std::to_string(valgem) + " `2gems `^from the `eATM Machine`^!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;
					GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Gems`w!"));
					ENetPacket* packet3 = enet_packet_create(p3.data,
						p3.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet3);
					delete p3.data;
					int gembux = atoi(content.c_str());
					int fingembux = gembux + valgem;
					ofstream myfile;
					myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					myfile << fingembux;
					myfile.close();
					int gemcalc = gembux + valgem;
					GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
					ENetPacket* packetpp = enet_packet_create(pp.data,
						pp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetpp);
					delete pp.data;
				}

			}
			else {

				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@You don't have access to break this `eATM Machine`@!"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;

			}
		}




	}

	if (((PlayerInfo*)(peer->data))->adminLevel < 998)
	{
		if (world->items[x + (y * world->width)].foreground == 6 || world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 7372 || world->items[x + (y * world->width)].foreground == 3760) {
			if (((PlayerInfo*)(peer->data))->cloth_hand == 8452) {

				//Tai OK Gal

			}


			else {
				GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wIt's too strong to break."), 0), 1));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				sendSound(peer, "cant_place_tile.wav");
				return;
			}
		}

		if (tile == 32) {
			if (world->items[x + (y * world->width)].foreground == 3832) { // stuff weather dialog
				if (x != 0)
				{
					//((PlayerInfo*)(peer->data))->lastPunchX = x;
				}
				if (y != 0)
				{
					//((PlayerInfo*)(peer->data))->lastPunchY = y;
				}
				/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wStuff Weather Machine``|left|3832|\nadd_item_picker|stuffitem|Edit Item|Choose any item you want to pick|\nadd_spacer|small|\nadd_text_input|gravity|Gravity Value||4|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|stuff|Apply||"));
				ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;*/
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
			}

		}

		if (tile == 6 || tile == 8 || tile == 3760 || tile == 1000 || tile == 7372 || tile == 1770 || tile == 1790 || tile == 1832 || tile == 4720)
		{
			GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wIt's too heavy to place."), 0), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			return;
		}

	}































	if (world->name != "ADMIN" || world->name != "HELL") {
		if (world->owner != "") {

			if (world->items[x + (y * world->width)].foreground == 758)
			{

				if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

					if (((PlayerInfo*)(peer->data))->unwheel == false)
					{
						sendRoulete(peer, x, y);
					}
					else
					{

						data.plantingTree = 0;

						world->items[x + (y * world->width)].foreground = 0;

						ENetPeer* currentPeer;


						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
						}







						data.plantingTree = tile;

						return;
					}
				}
				else
				{
					sendRoulete(peer, x, y);
				}
				return;
			}
		}
	}
	if (world->name != "ADMIN" || world->name != "HELL") {
		if (world->owner != "") {


		}
	}



	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 758)
		{
			sendRoulete(peer, x, y);
		}
	}







	if (world->items[x + (y * world->width)].foreground == 20 || world->items[x + (y * world->width)].foreground == 24 || world->items[x + (y * world->width)].foreground == 26 || world->items[x + (y * world->width)].foreground == 28 || world->items[x + (y * world->width)].foreground == 608 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 986 || world->items[x + (y * world->width)].foreground == 1426 || world->items[x + (y * world->width)].foreground == 1428 || world->items[x + (y * world->width)].foreground == 1430 || world->items[x + (y * world->width)].foreground == 1432 || world->items[x + (y * world->width)].foreground == 1446 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 1906 || world->items[x + (y * world->width)].foreground == 2396 || world->items[x + (y * world->width)].foreground == 2414 || world->items[x + (y * world->width)].foreground == 2586 || world->items[x + (y * world->width)].foreground == 2948 || world->items[x + (y * world->width)].foreground == 3758 || world->items[x + (y * world->width)].foreground == 4470 || world->items[x + (y * world->width)].foreground == 4488 || world->items[x + (y * world->width)].foreground == 5622 || world->items[x + (y * world->width)].foreground == 6102 || world->items[x + (y * world->width)].foreground == 6272)
	{
		if (world->owner != "") {
			if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
				if (tile == 32) {
					((PlayerInfo*)(peer->data))->SignPosX;
					((PlayerInfo*)(peer->data))->SignPosY;
					int yy = ((PlayerInfo*)(peer->data))->SignPosX / 32;
					int xx = ((PlayerInfo*)(peer->data))->SignPosY / 32;
					int posX = ((PlayerInfo*)(peer->data))->posX / 32; // good value is actually 31.16-31.33
					int posY = ((PlayerInfo*)(peer->data))->posY / 32;
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					string posx = std::to_string(yy);
					string posy = std::to_string(xx);
					bool exist = std::experimental::filesystem::exists("signs/" + world + posx + posy + ".txt");

					if (exist)
					{
						std::ifstream ifs("signs/" + world + posx + posy + ".txt");
						std::string content((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Sign``|left|20|\n\nadd_textbox|`oWhat would you like to write on this sign?|\nadd_text_input|text||" + content + "|100|\nend_dialog|signsshitit|Cancel|OK|\n"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					else
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Sign``|left|20|\n\nadd_textbox|`oWhat would you like to write on this sign?|\nadd_text_input|text|||100|\nend_dialog|signsshitit|Cancel|OK|\n"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
				}
			}
		}
	}
	if (world->name != "ADMIN") {
		if (world->owner != "") {
			if (((PlayerInfo*)(peer->data))->rawName == world->owner || isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass))
			{




				// WE ARE GOOD TO GO

				if (tile == 32)
				{
					if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188)
					{
						std::ostringstream oss;
						if (!world->worldaccess.empty())
						{
							std::copy(world->worldaccess.begin(), world->worldaccess.end() - 1,
								std::ostream_iterator<string>(oss, ", "));

							// Now add the last element with no delimiter
							oss << world->worldaccess.back();
						}
						else {
							string oss = "You dont have any accessed player!";
						}
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_spacer|small|\nadd_label|small|Access list: " + oss.str() + "|left|\nadd_spacer|small|\nadd_button|worldPublic|`wSet world to `9PUBLIC|0|0|\nadd_button|worldPrivate|`wSet world to `4PRIVATE|0|0|\nadd_spacer|big|\nadd_player_picker|netid|`wAdd|\nadd_spacer|small|\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||\nadd_button_with_icon|allowMod1|Disallow Noclip|noflags|242||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						//enet_host_flush(server);
						delete p.data;
					}
				}
			}


			/*if (world->name != "ADMIN") //todo1 {
				if (world->owner != "") {

					if (((PlayerInfo*)(peer->data))->rawName == world->owner || (((PlayerInfo*)(peer->data))->rawName == world->worldaccess || isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass))) {
						if (((PlayerInfo*)(peer->data))->rawName == "") return;
						// WE ARE GOOD TO GO

						if (world->items[x + (y*world->width)].foreground == 242 && (((PlayerInfo*)(peer->data))->rawName == world->worldaccess))
						{
							return;
						}

						if (tile == 32 && ((PlayerInfo*)(peer->data))->rawName == world->worldaccess) {
							return;
						}
						string offlinelist = "";
						string offname = "";
						int ischecked;

						for (std::vector<string>::const_iterator i = world->accessworld.begin(); i != world->accessworld.end(); ++i) {
							offname = *i;
							offlinelist += "\nadd_checkbox|isAccessed|" + offname + "|0|\n";

						}

						if (world->isPublic == true) {
							ischecked = 1;
						}
						else {
							ischecked = 0;
						}
						if (tile == 32) {
							if (world->accessworld.size() == 0) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_textbox|`wAccess list:|left|\nadd_spacer|small|\nadd_textbox|Currently, you're the only one with the access.|left|\nadd_spacer|small|\nadd_player_picker|netid|`wAdd|\nadd_checkbox|isWorldPublic|Allow anyone to build|" + std::to_string(ischecked) + "| \nend_dialog|wlmenu|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							else {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_textbox|`wAccess list:|left|\nadd_spacer|small|" + offlinelist + "add_spacer|small|\nadd_player_picker|netid|`wAdd|\nadd_checkbox|isWorldPublic|Allow anyone to build|" + std::to_string(ischecked) + "| \nend_dialog|wlmenu|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

						}
					}
				}
			}*/

			else if (find(world->worldaccess.begin(), world->worldaccess.end(), ((PlayerInfo*)(peer->data))->rawName) != world->worldaccess.end())
			{
				if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188)
				{


					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`2Access Granted`w)"), 0), 1));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;

					return;
					if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

					}
					else
					{
						string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetsou);


						return;
					}
				}

			}
			else if (world->isPublic)
			{
				if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188)
				{


					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`9Open to Public`w)"), 0), 1));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;

					return;
				}
				if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

				}
				else
				{
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);


					return;
				}

			}
			else if (world->isEvent)
			{
				if (world->items[x + (y * world->width)].foreground == 242)
				{


					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`4No Access`w)"), 0), 1));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);
					return;
				}
				else if (world->items[x + (y * world->width)].foreground != 1000)
				{
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);
					return;
				}


			}
			else {
				if (world->items[x + (y * world->width)].foreground == 242)
				{
					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0."), 0));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;


				}
				if (isSuperAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) {

				}
				else
				{
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);


					return;
				}

			} /*lockeds*/
			if (tile == 242 || tile == 2408 || tile == 1796 || tile == 4428 || tile == 7188 || tile == 4802 || tile == 5260 || tile == 2950 || tile == 5980 || tile == 8470) {



				GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0Only one `$World Lock`0 can be placed in a world!"), 0));


				ENetPacket* packet3 = enet_packet_create(p3.data,
					p3.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet3);
				delete p3.data;
				return;
			}
		}
	}





	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 1490)
		{
			world->weather = 10;
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{
					GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					continue;
				}
			}
		}
	}
	// WE ARE GOOD TO GO




	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 934)
		{
			world->weather = 2;
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{
					GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					continue;
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 946)
			{
				world->weather = 3;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1490)
			{
				world->weather = 10;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 932)
			{
				world->weather = 4;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 984)
			{
				world->weather = 5;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1210)
			{
				world->weather = 8;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1364)
			{
				world->weather = 11;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1750)
			{
				world->weather = 15;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 2046)
			{
				world->weather = 17;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 2284)
			{
				world->weather = 18;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 2744)
			{
				world->weather = 19;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3252)
			{
				world->weather = 20;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3446)
			{
				world->weather = 21;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3534)
			{
				world->weather = 22;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3694)
			{
				world->weather = 25;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3832)
			{
				world->weather = 29;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1490)
			{
				world->weather = 10;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4242)
			{
				world->weather = 30;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4486)
			{
				world->weather = 31;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4776)
			{
				world->weather = 32;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4892)
			{
				world->weather = 33;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5000)
			{
				world->weather = 34;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5112)
			{
				world->weather = 35;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5654)
			{
				world->weather = 36;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5716)
			{
				world->weather = 37;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5958)
			{
				world->weather = 38;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 6854)
			{
				world->weather = 42;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{
		// WE ARE GOOD TO GO
		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 7644)
			{
				world->weather = 44;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}

	if (tile == 1136) {
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_text_input|marsblast|World Name: ||100|\nadd_spacer|\nadd_button|useblast|`2Use blast!|\nadd_quick_exit|"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}

	if (tile == 3764) {
		if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`4Use atomic fireball on this world? Warning! This will delete all blocks placed in your world!``|left|3764|\nadd_spacer|\nadd_button|nukeyes|`4YES!|\nadd_button|`2Cancel|cancel|\nadd_quick_exit|"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;

		}
	}


	if (tile == 7954) {

		GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		delete p2.data;
	}









	if (tile == 1404) {
		//world->items[x + (y*world->width)].water = !world->items[x + (y*world->width)].water;
		//if (((PlayerInfo*)(peer->data))->adminLevel ==999) {

		if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[INFO]`^ You must world-`4lock `^This world first!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			delete p2.data;
		}

		if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[INFO]`^ You must world-`4lock `^This world first!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			delete p2.data;
		}


		if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[INFO]`^ You must world-`4lock `^This world first!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			delete p2.data;
		}


		if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[INFO]`^ You must world-`4lock `^This world first!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			delete p2.data;
		}


		if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[INFO]`^ You must world-`4lock `^This world first!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			delete p2.data;
		}


		if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[INFO]`^ You must world-`4lock `^This world first!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			delete p2.data;
		}

		if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[INFO]`^ You must world-`4lock `^This world first!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			delete p2.data;
		}


		if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
			if (world->items[x + (y * world->width)].foreground != 0) {
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Here is no space for the main door!"));


				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;

			}




			else if (world->items[x + (y * world->width) + 100].foreground != 0) {
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Here is no space for the main door!"));


				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;

			}
			else

			{
				//	showDoormover(peer);
				for (int i = 0; i < world->width * world->height; i++)
				{
					if (i >= 5400) {
						world->items[i].foreground = 8;
					}
					else if (world->items[i].foreground == 6) {

						world->items[i].foreground = 0;
						world->items[i + 100].foreground = 0;

					}

					else if (world->items[i].foreground != 6) {
						world->items[x + (y * world->width)].foreground = 6;
						world->items[x + (y * world->width) + 100].foreground = 8;
					}


				}

				WorldInfo* wrld = getPlyersWorld(peer);
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						string act = ((PlayerInfo*)(peer->data))->currentWorld;
						//WorldInfo info = worldDB.get(act);
						// sendWorld(currentPeer, &info);


						sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
						joinWorld(currentPeer, act, 0, 0);
						GamePacket p8 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You used door mover!"));
						ENetPacket* packet8 = enet_packet_create(p8.data,
							p8.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet8);
						delete p8.data;

					}

				}
			}
			return;
		}
	}
	if (tile == 1280) {
		GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		delete p2.data;
		return;
	}


	if (tile == 32) {
		// TODO
		return;
	}
	if (tile == 822) {
		/*world->items[x + (y * world->width)].water = !world->items[x + (y * world->width)].water;
		float water = 125.0f;
		TileExtra data;
		data.packetType = 0x5;
		data.characterState = 8;
		data.charStat = 8;
		data.blockid = 0;
		data.backgroundid = 0;
		data.visual = 0x04000000;
		data.punchX = x;
		data.punchY = y;
		//data.netID = netID; Neveikia
		SendPacketRaw2(192, packBlockVisualer(&data), 100, 0, peer, ENET_PACKET_FLAG_RELIABLE);*/
		GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		delete p2.data;
		return;
	}
	if (tile == 3062)
	{
		world->items[x + (y * world->width)].fire = !world->items[x + (y * world->width)].fire;
		return;
	}
	if (tile == 1866)
	{
		world->items[x + (y * world->width)].glue = !world->items[x + (y * world->width)].glue;
		return;
	}
	ItemDefinition def;
	try {
		def = getItemDef(tile);
		if (def.clothType != ClothTypes::NONE) return;
	}
	catch (int e) {
		def.breakHits = 4;
		if (def.blockType = BlockTypes::SEED) return;
		def.blockType = BlockTypes::UNKNOWN;
#ifdef TOTAL_LOG
		cout << "Ugh, unsupported item " << tile << endl;
#endif
	}
	int test;
	int test2;


	bool iscontains = false;
	SearchInventoryItem(peer, tile, 1, iscontains);
	if (!iscontains)
	{
		return;
	}
	iscontains = false;

	if (world->items[x + (y * world->width)].foreground == 1796) {
		test = 83;
	}
	else if (world->items[x + (y * world->width)].foreground == 242) {
		test = 83;
	}
	else {
		test = def.breakHits;
	}
	if (tile == 54600 || tile == 4520 || tile == 382 || tile == 3116 || tile == 4520 || tile == 1792 || tile == 5666 || tile == 2994 || tile == 4368) return;
	if (tile == 5708 || tile == 5709 || tile == 5780 || tile == 5781 || tile == 5782 || tile == 5783 || tile == 5784 || tile == 5785 || tile == 5710 || tile == 5711 || tile == 5786 || tile == 5787 || tile == 5788 || tile == 5789 || tile == 5790 || tile == 5791 || tile == 6146 || tile == 6147 || tile == 6148 || tile == 6149 || tile == 6150 || tile == 6151 || tile == 6152 || tile == 6153 || tile == 5670 || tile == 5671 || tile == 5798 || tile == 5799 || tile == 5800 || tile == 5801 || tile == 5802 || tile == 5803 || tile == 5668 || tile == 5669 || tile == 5792 || tile == 5793 || tile == 5794 || tile == 5795 || tile == 5796 || tile == 5797 || tile == 54600 || tile == 4520 || tile == 382 || tile == 3116 || tile == 1792 || tile == 5666 || tile == 2994 || tile == 4368) return;
	if (tile == 1902 || tile == 1508 || tile == 428 || tile == 3808) return;
	if (tile == 9999 || tile == 4720 || tile == 3212 || tile == 4742 || tile == 3496 || tile == 3270 || tile == 4722) return;
	if (tile == 0 || tile == 18) {
		if (world->items[x + (y * world->width)].background == 6864 && world->items[x + (y * world->width)].foreground == 0) return;
		if (world->items[x + (y * world->width)].background == 0 && world->items[x + (y * world->width)].foreground == 0) return;
		//data.netID = -1;
		data.packetType = 0x8;
		data.plantingTree = 5;
		using namespace std::chrono;
		//if (world->items[x + (y*world->width)].foreground == 0) return;
		if ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() - world->items[x + (y * world->width)].breakTime >= 4000)
		{
			world->items[x + (y * world->width)].breakTime = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			world->items[x + (y * world->width)].breakLevel = 5; // TODO

		}
		else
			if (y < world->height && world->items[x + (y * world->width)].breakLevel + test >= def.breakHits * test) { // TODO
				data.packetType = 0x3;// 0xC; // 0xF // World::HandlePacketTileChangeRequest
				data.netID = -1;
				data.plantingTree = tile;
				data.punchX = x;
				data.punchY = y;
				int hi = data.punchX * 32;
				int hi2 = data.punchY * 32;
				world->items[x + (y * world->width)].breakLevel = 0;
				if (((PlayerInfo*)(peer->data))->cloth_hand == 1874) {
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 97), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}
				if (((PlayerInfo*)(peer->data))->cloth_hand == 2952) {
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 97), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}

				//BLOKAI
				int crystalChange;
				if (world->items[x + (y * world->width)].foreground == 4762) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 286), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}

				else if (world->items[x + (y * world->width)].foreground == 7382) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 116), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}

				//BLOKU PABAIGA


				else if (((PlayerInfo*)(peer->data))->cloth_hand == 8452) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 150), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}
				else if (((PlayerInfo*)(peer->data))->cloth_hand == 7564) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 25), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
					def.breakHits = 0;
				}
				else if (((PlayerInfo*)(peer->data))->cloth_hand == 9058) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 105), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
					def.breakHits = 0;
				}
				else if (((PlayerInfo*)(peer->data))->cloth_mask == 1442) {

					ENetPeer* currentPeer;
					int effect = 105;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {

							int x = ((PlayerInfo*)(peer->data))->x;
							int y = ((PlayerInfo*)(peer->data))->y;
							GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

							ENetPacket* packetd = enet_packet_create(psp.data,
								psp.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packetd);
							delete psp.data;
						}
					}
				}




				if (world->items[x + (y * world->width)].foreground != 0)
				{
					ItemDefinition yologay;
					yologay = getItemDef(world->items[x + (y * world->width)].foreground);
					if (yologay.MultiFacing == "MultiFacing")
					{
						world->items[x + (y * world->width)].rotatedLeft = false;
					}
					if (world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188)
					{
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}

							if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->rawName == "chandra")
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								((PlayerInfo*)(peer->data))->country = "../rt.rttex";
								((PlayerInfo*)(peer->data))->country = "../rtsoft_logo.rttex";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								((PlayerInfo*)(peer->data))->country = "../rt.rttex";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								((PlayerInfo*)(peer->data))->country = "../ha.rttex";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								((PlayerInfo*)(peer->data))->country = "../atomic_button";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								((PlayerInfo*)(peer->data))->country = "../particle/star.rttex";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								((PlayerInfo*)(peer->data))->country = "../lg.rttex";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 666)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								((PlayerInfo*)(peer->data))->country = "../atomic_button";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`#@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`o@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`c@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
















						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`6@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}















						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "[`5SC`w]`o" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}







						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `$World Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;


						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}


					if (world->items[x + (y * world->width)].foreground == 1796) {
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}

							if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->rawName == "chandra")
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`#@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`o@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`c@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
















						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`6@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}















						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "[`5SC`w]`o" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
						bool success = false;
						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						world->items[x + (y * world->width)].foreground = 0;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `1Diamond Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;

						SaveShopsItemMoreTimes(1796, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^ You have received your `1Diamond Lock `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}



					if (world->items[x + (y * world->width)].foreground == 6952) {
						bool success = true;
						SaveShopsItemMoreTimes(6952, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^ You have received your `9Magic Machine `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}



					if (world->items[x + (y * world->width)].foreground == 1008) {
						bool success = true;
						SaveShopsItemMoreTimes(1008, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^ You have received your `eATM Machine `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188) {
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}

							if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->rawName == "chandra")
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`#@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`o@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`c@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
















						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`6@" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}















						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "[`5SC`w]`o" + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
						bool success = false;
						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `$World Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;
						SaveShopsItemMoreTimes(242, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^ You have received your `$World Lock `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}




					int valgem;
					int crystalChange;





					if (((PlayerInfo*)(peer->data))->cloth_hand == 7912) {
						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188) {
							world->items[x + (y * world->width)].foreground = 0;
						}
						else {
							world->items[x + (y * world->width)].foreground = 0;
							srand(time(0));

							valgem = rand() % 13;

							std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							std::string content((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));

							int gembux = atoi(content.c_str());
							int fingembux = gembux + valgem;
							ofstream myfile;
							myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							myfile << fingembux;
							myfile.close();

							int gemcalc = gembux + valgem;
							GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
							ENetPacket* packetpp = enet_packet_create(pp.data,
								pp.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetpp);
							delete pp.data;


						}

					}
					else if (((PlayerInfo*)(peer->data))->cloth_ances == 7166) {
						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188) {
							world->items[x + (y * world->width)].foreground = 0;
						}
						else {
							world->items[x + (y * world->width)].foreground = 0;
							valgem = rand() % 20;
							std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							std::string content((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));




							int gembux = atoi(content.c_str());
							int fingembux = gembux + valgem;
							ofstream myfile;
							myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							myfile << fingembux;
							myfile.close();

							int gemcalc = gembux + valgem;
							GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
							ENetPacket* packetpp = enet_packet_create(pp.data,
								pp.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetpp);
							delete pp.data;







							ENetPeer* currentPeer;
							int effect = 0;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer)) {

									int x = ((PlayerInfo*)(peer->data))->x;
									int y = ((PlayerInfo*)(peer->data))->y;
									GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

									ENetPacket* packetd = enet_packet_create(psp.data,
										psp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packetd);
									delete psp.data;
								}
							}
						}


					}
					else if (((PlayerInfo*)(peer->data))->cloth_feet == 8834) {
						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188) {
							world->items[x + (y * world->width)].foreground = 0;
						}
						else {
							world->items[x + (y * world->width)].foreground = 0;
							valgem = rand() % 13;
							std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							std::string content((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));





							int gembux = atoi(content.c_str());
							int fingembux = gembux + valgem;
							ofstream myfile;
							myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							myfile << fingembux;
							myfile.close();

							int gemcalc = gembux + valgem;
							GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
							ENetPacket* packetpp = enet_packet_create(pp.data,
								pp.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetpp);
							delete pp.data;


							ENetPeer* currentPeer;
							int effect = 0;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer)) {

									int x = ((PlayerInfo*)(peer->data))->x;
									int y = ((PlayerInfo*)(peer->data))->y;
									GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

									ENetPacket* packetd = enet_packet_create(psp.data,
										psp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packetd);
									delete psp.data;
								}
							}

						}

					}
					else {




						if (world->items[x + (y * world->width)].foreground == 4762) {
							world->items[x + (y * world->width)].foreground = 0;
							valgem = rand() % 5;
							std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							std::string content((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));



							int gembux = atoi(content.c_str());
							int fingembux = gembux + valgem;
							ofstream myfile;
							myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							myfile << fingembux;
							myfile.close();

							int gemcalc = gembux + valgem;
							GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
							ENetPacket* packetpp = enet_packet_create(pp.data,
								pp.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetpp);
							delete pp.data;









						}






						else {

							if (world->items[x + (y * world->width)].foreground == 7382) {
								world->items[x + (y * world->width)].foreground = 0;
								int valgems = 0;
								valgems = rand() % 5;
								valgem = valgems + 1;
								std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));


								int gembux = atoi(content.c_str());
								int fingembux = gembux + valgem;
								ofstream myfile;
								myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile << fingembux;
								myfile.close();

								int gemcalc = gembux + valgem;
								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
								ENetPacket* packetpp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp);
								delete pp.data;










							}

							else {
								if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188) {
									world->items[x + (y * world->width)].foreground = 0;
								}
								else {

									if (world->items[x + (y * world->width)].foreground == 1796) {
										world->items[x + (y * world->width)].foreground = 0;
									}

									else {
										if (world->items[x + (y * world->width)].background == 1796) {
											world->items[x + (y * world->width)].background = 0;
										}
										else {
											valgem = rand() % 5;

											world->items[x + (y * world->width)].foreground = 0;
											((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
											((PlayerInfo*)(peer->data))->rubblexp = ((PlayerInfo*)(peer->data))->rubblexp + 1;


											std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifs)),
												(std::istreambuf_iterator<char>()));





											int gembux = atoi(content.c_str());
											int fingembux = gembux + valgem;
											ofstream myfile;
											myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile << fingembux;
											myfile.close();

											int gemcalc = gembux + valgem;
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;


										}
									}
								}
							}
						}
					}






#pragma region crystals
					crystalChange = rand() % 10001;







					if (crystalChange >= 301 && crystalChange <= 400) {
						if (world->items[x + (y * world->width)].foreground == 8) {

							world->items[x + (y * world->width)].foreground = 0;

							valgem = rand() % 10;

							if (valgem > 0) {


							}



						}

					}

					else {

						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 4802 || world->items[x + (y * world->width)].foreground == 5260 || world->items[x + (y * world->width)].foreground == 2950 || world->items[x + (y * world->width)].foreground == 5980 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 7188) {
							world->items[x + (y * world->width)].foreground = 0;
						}

					}
#pragma endregion


					if (((PlayerInfo*)(peer->data))->xp >= 300 && ((PlayerInfo*)(peer->data))->level < 100) {
						((PlayerInfo*)(peer->data))->xp = 0;
						((PlayerInfo*)(peer->data))->level = ((PlayerInfo*)(peer->data))->level + 1;
						ENetPeer* currentPeer;

						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								string text = "action|play_sfx\nfile|audio/levelup2.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);

								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);
								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
								delete data;
								delete p.data;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet3);

								//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));

							}
						}
					}
					if (((PlayerInfo*)(peer->data))->haveGrowId) {
						std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

						PlayerInfo* p = ((PlayerInfo*)(peer->data));

						string username = PlayerDB::getProperName(p->rawName);



						if (ifff.fail()) {
							ifff.close();


						}
						if (ifff.is_open()) {
						}
						json j;
						ifff >> j; //load
						j["level"] = p->level;
						j["xp"] = p->xp;
						j["rubblexp"] = p->rubblexp;
						j["rubble"] = p->rubble;

						std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
						if (!o.is_open()) {
							cout << GetLastError() << endl;
							_getch();
						}

						o << j << std::endl;
					}
				}
				else {

					world->items[x + (y * world->width)].background = 6864;
					((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
					int valgem = rand() % 5;
					std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					std::string content((std::istreambuf_iterator<char>(ifs)),
						(std::istreambuf_iterator<char>()));





					int gembux = atoi(content.c_str());
					int fingembux = gembux + valgem;
					ofstream myfile;
					myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					myfile << fingembux;
					myfile.close();

					int gemcalc = gembux + valgem;
					GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
					ENetPacket* packetpp = enet_packet_create(pp.data,
						pp.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetpp);
					delete pp.data;


					int rubblechange = rand() % 70 + 4;
					if (rubblechange <= 5) {
						if (world->items[x + (y * world->width)].foreground == 8) {

							world->items[x + (y * world->width)].foreground = 0;

							valgem = rand() % 10;

							if (valgem > 0) {

								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}



						}

					}

					else {
						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242) {
							world->items[x + (y * world->width)].foreground = 0;
						}
						else {
							int rubblechange = rand() % 70 + 4;
							if (rubblechange <= 5) {
								((PlayerInfo*)(peer->data))->rubblexp = 0;
								((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;



								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}





							int amberchange = rand() % 130 + 4;
							if (amberchange <= 5) {
								((PlayerInfo*)(peer->data))->amberxp = 0;
								((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;




								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}
















							int opalchange = rand() % 200 + 4;
							if (opalchange <= 5) {
								((PlayerInfo*)(peer->data))->opalxp = 0;
								((PlayerInfo*)(peer->data))->opal = ((PlayerInfo*)(peer->data))->opal + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;


								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), ""), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}






















							int goldchange = rand() % 240 + 4;
							if (goldchange <= 5) {
								((PlayerInfo*)(peer->data))->goldxp = 0;
								((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;



								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}
























							int sapphirechange = rand() % 250 + 4;
							if (sapphirechange <= 5) {
								((PlayerInfo*)(peer->data))->sapphirexp = 0;
								((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;


								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}

























							int diamondchange = rand() % 290 + 4;
							if (diamondchange <= 5) {
								((PlayerInfo*)(peer->data))->diamondxp = 0;
								((PlayerInfo*)(peer->data))->diamond = ((PlayerInfo*)(peer->data))->diamond + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;



								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}
















							int emeraldchange = rand() % 300 + 4;
							if (emeraldchange <= 5) {
								((PlayerInfo*)(peer->data))->emeraldxp = 0;
								((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald + 1;
								string name = ((PlayerInfo*)(peer->data))->displayName;

								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}
						}
					}
					ENetPeer* currentPeer;
					int effect = 0;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {

							int x = ((PlayerInfo*)(peer->data))->x;
							int y = ((PlayerInfo*)(peer->data))->y;
							GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

							ENetPacket* packetd = enet_packet_create(psp.data,
								psp.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packetd);
							delete psp.data;
						}
					}

					if (((PlayerInfo*)(peer->data))->xp >= 300) {
						((PlayerInfo*)(peer->data))->xp = 0;
						((PlayerInfo*)(peer->data))->level = ((PlayerInfo*)(peer->data))->level + 1;
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								string text = "action|play_sfx\nfile|audio/levelup2.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);

								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);
								ENetPeer* currentPeer;
								int effect = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
								delete data;
								delete p.data;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet3);
							}
							//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));


							data.plantingTree = tile;
						}
					}
				}

			}
			else
				if (y < world->height)
				{
					world->items[x + (y * world->width)].breakTime = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					world->items[x + (y * world->width)].breakLevel += 6; // TODO
					if (world->items[x + (y * world->width)].foreground == 758)
						sendRoulete(peer, x, y);
					if (world->items[x + (y * world->width)].foreground == 756)
						sendSlotmachine(peer, x, y);
				}


	}
	else {
		for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
		{
			if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == tile)
			{
				if ((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount > 1)
				{
					((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount--;
					SaveInventoryWhenBuildingBlock(peer);
				}
				else {
					((PlayerInfo*)(peer->data))->inventory.items.erase(((PlayerInfo*)(peer->data))->inventory.items.begin() + i);
					SaveInventoryWhenBuildingBlock(peer);
				}
			}
		}
		if (def.blockType == BlockTypes::BACKGROUND)
		{
			world->items[x + (y * world->width)].background = tile;
			data.plantingTree = tile;
		}
		else {
			ENetPeer* currentPeer;
			if (tile == 242 || tile == 2408 || tile == 1796 || tile == 4428 || tile == 7188 || tile == 4802 || tile == 5260 || tile == 2950 || tile == 5980 || tile == 8470) {

				ENetPeer* currentPeer;
				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
				}
				//enet_host_flush(server);

				std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string content((std::istreambuf_iterator<char>(ifsz)),
					(std::istreambuf_iterator<char>()));

				int b = atoi(content.c_str());

				if (b > 499)
				{
					world->items[x + (y * world->width)].foreground = tile;
					world->owner = ((PlayerInfo*)(peer->data))->rawName;
					world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
					world->isPublic = false;
					((PlayerInfo*)(peer->data))->worldsowned.push_back(world->name);
					std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


					if (ifff.fail()) {
						ifff.close();


					}
					if (ifff.is_open()) {
					}
					json j;
					ifff >> j; //load


					j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




					std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
					if (!o.is_open()) {
						cout << GetLastError() << endl;
						_getch();
					}

					o << j << std::endl;
					if (((PlayerInfo*)(peer->data))->haveGrowId)
					{
						GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2 " + ((PlayerInfo*)(peer->data))->tankIDName));
						memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
						if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
							((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							((PlayerInfo*)(peer->data))->displayName = "`w[`1VIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							((PlayerInfo*)(peer->data))->displayName = "`#@" + ((PlayerInfo*)(peer->data))->tankIDName;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							((PlayerInfo*)(peer->data))->displayName = "`o@" + ((PlayerInfo*)(peer->data))->tankIDName;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							((PlayerInfo*)(peer->data))->displayName = "`c@" + ((PlayerInfo*)(peer->data))->tankIDName;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							((PlayerInfo*)(peer->data))->displayName = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							((PlayerInfo*)(peer->data))->displayName = "`w[`4SC`w]`c " + ((PlayerInfo*)(peer->data))->tankIDName;
						}


						ENetPacket* packet7 = enet_packet_create(p7.data,
							p7.len,
							ENET_PACKET_FLAG_RELIABLE);

						delete p7.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
									enet_peer_send(currentPeer, 0, packet7);
								}
							}
						}
					}
					else
					{
						GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2 " + ((PlayerInfo*)(peer->data))->displayName));
						memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
						if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
							((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->displayName;
						}
						ENetPacket* packet7 = enet_packet_create(p7.data,
							p7.len,
							ENET_PACKET_FLAG_RELIABLE);

						delete p7.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
									enet_peer_send(currentPeer, 0, packet7);

									/*string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket * packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packetsou);*/
									string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packetsou);
								}
							}
						}
					}
				}
				if (((PlayerInfo*)(peer->data))->isNicked == true)
				{
					((PlayerInfo*)(peer->data))->isNicked = false;
					((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;


					if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->rawName == "chandra")
					{

						((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
						((PlayerInfo*)(peer->data))->country = "interface/flags/rt.rttex";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
					{

						((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
						((PlayerInfo*)(peer->data))->country = "interface/flags/rt.rttex";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
					{
						((PlayerInfo*)(peer->data))->country = "../hamumu_logo";
						((PlayerInfo*)(peer->data))->country = "interface/flags/ha.rttex";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
					{

						((PlayerInfo*)(peer->data))->country = "../atomic_button";
						((PlayerInfo*)(peer->data))->country = "interface/flags/us.rttex";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
					{
						((PlayerInfo*)(peer->data))->country = "../particle/star";
						((PlayerInfo*)(peer->data))->country = "interface/flags/us.rttex";

					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
					{

						((PlayerInfo*)(peer->data))->country = "../legend.rttex";
						((PlayerInfo*)(peer->data))->country = "interface/flags/lg.rttex";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}

					GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
					memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


					ENetPacket* packet7 = enet_packet_create(p7.data,
						p7.len,
						ENET_PACKET_FLAG_RELIABLE);



					ENetPeer* currentPeer;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							enet_peer_send(currentPeer, 0, packet7);
						}
					}
					delete p7.data;
				}
				std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string contentx((std::istreambuf_iterator<char>(ifszi)),
					(std::istreambuf_iterator<char>()));


				int updgem = atoi(contentx.c_str());
				GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
				ENetPacket* packetpp = enet_packet_create(pp.data,
					pp.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packetpp);
				delete pp.data;







				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer)) {
						if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->rawName != "chandra") {
							world->pIsDev = true;
						}
						else if (((PlayerInfo*)(peer->data))->rawName == "chandra" && ((PlayerInfo*)(peer->data))->adminLevel == 1000)
						{
							world->pIsPlay = true;
						}
						else if (((PlayerInfo*)(peer->data))->rawName == "chandra" && ((PlayerInfo*)(peer->data))->adminLevel == 999)
						{
							world->pIsPlay = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 999 && ((PlayerInfo*)(peer->data))->rawName != "chandra") {
							world->pIsDev = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							world->pIsMod = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							world->pIsVip = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							world->pIsAdmin = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							world->pIsKing = true;
						}
						else
						{
							world->pIsPlay = false;
							world->pIsDev = false;
							world->pIsMod = false;
							world->pIsVip = false;
							world->pIsAdmin = false;
							world->pIsKing = false;
						}
						if (((PlayerInfo*)(peer->data))->rawName == "chandra" && ((PlayerInfo*)(peer->data))->adminLevel == 1000)
						{




							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);
							delete p.data;
						}
						else
						{
							if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{




								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);
								delete p.data;
							}
							else
							{
								if (((PlayerInfo*)(peer->data))->rawName == "chandra" && ((PlayerInfo*)(peer->data))->adminLevel == 999)
								{




									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									delete p.data;
								}
								else
								{
									if (((PlayerInfo*)(peer->data))->adminLevel == 999)
									{




										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
									else
									{
										if (((PlayerInfo*)(peer->data))->adminLevel == 777)
										{




											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));

											int b = atoi(content.c_str());

											if (b > 999)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;

												int gemcalc10k = b - 1000;


												ofstream myfile2;
												myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile2 << std::to_string(gemcalc10k);
												myfile2.close();

												std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string contentx((std::istreambuf_iterator<char>(ifszi)),
													(std::istreambuf_iterator<char>()));


												int updgem = atoi(contentx.c_str());
												GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
												ENetPacket* packetpp = enet_packet_create(pp.data,
													pp.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetpp);
												delete pp.data;

											}
											else
											{
												int needgems = 1000 - b;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to lock a world."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
												return;
											}
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->adminLevel == 666)
											{




												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));

												int b = atoi(content.c_str());

												if (b > 999)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;

													int gemcalc10k = b - 1000;


													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;

												}
												else
												{
													int needgems = 1000 - b;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to lock a world."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													return;
												}
											}
											else
											{
												if (((PlayerInfo*)(peer->data))->adminLevel == 888)
												{




													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 999)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;

														int gemcalc10k = b - 1000;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;

													}
													else
													{
														int needgems = 1000 - b;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to lock a world."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														return;
													}
												}
												else
												{
													if (((PlayerInfo*)(peer->data))->adminLevel == 555)
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));

														int b = atoi(content.c_str());

														if (b > 999)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;

															int gemcalc10k = b - 1000;


															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();

															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));


															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetpp);
															delete pp.data;

														}
														else
														{
															int needgems = 1000 - b;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to lock a world."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
															return;
														}
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));

														int b = atoi(content.c_str());

														if (b > 999)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;

															int gemcalc10k = b - 1000;


															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();

															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));


															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetpp);
															delete pp.data;

														}
														else
														{
															int needgems = 1000 - b;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to lock a world."));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
															return;
														}












													}

												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			else {
				world->items[x + (y * world->width)].foreground = tile;
			}

		}


		world->items[x + (y * world->width)].breakLevel = 0;
	}


	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}



void sendPlayerBan(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer* currentPeer;
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
		{
			if (isHere(peer, currentPeer)) {
				{
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
				}
			}
		}
		delete p.data;
	}
}



void sendPlayerWBan(ENetPeer* peer, string from, string to)
{
	ENetPeer* currentPeerp;

	for (currentPeerp = server->peers;
		currentPeerp < &server->peers[server->peerCount];
		++currentPeerp)
	{
		if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (((PlayerInfo*)(currentPeerp->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 888 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 444 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

		}
		else
		{
			string name = from;
			string kickname = to;
			//string kickname = ((PlayerInfo*)(peer->data))->displayName;
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname));
			string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
			BYTE* data = new BYTE[5 + text.length()];
			BYTE zero = 0;
			int type = 3;
			memcpy(data, &type, 4);
			memcpy(data + 4, text.c_str(), text.length());
			memcpy(data + 4 + text.length(), &zero, 1);




			if (isHere(peer, currentPeerp))
			{

				ENetPacket* packetsou = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);

				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);




				enet_peer_send(currentPeerp, 0, packetsou);
				enet_peer_send(currentPeerp, 0, packet);
				delete data;
				delete p.data;
			}
		}
	}
}

void sendChatMessage(ENetPeer* peer, int netID, string message)
{
	if (((PlayerInfo*)(peer->data))->haveGrowId == true) {
		string ccode;
		if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
			ccode = "5";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
			ccode = "o";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
			ccode = "1";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
			ccode = "6";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
			ccode = "^";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
			ccode = "1";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
			ccode = "e";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
			ccode = "b";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
			ccode = "^";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
			ccode = "^";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
			ccode = "^";
		}


		if (((PlayerInfo*)(peer->data))->adminLevel > 222 && ((PlayerInfo*)(peer->data))->isNicked == false) {
			for (char c : message)

				if (c < 0x18 || std::all_of(message.begin(), message.end(), isspace))
				{
					return;
				}

			ENetPeer* currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->netID == netID)
					name = ((PlayerInfo*)(currentPeer->data))->displayName;

			}
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:0_PL:4_OID:_CT:[W]_`o <`6" + name + "`o> `" + ccode + message));
			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), "`" + ccode + message), 0));
			//GamePacket pf2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), "`" + ccode + message), 0));
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{

					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet);

					//enet_host_flush(server);

					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);

					//enet_host_flush(server);
				}
			}
			delete p.data;
			delete p2.data;
		}
		else {
			for (char c : message)
				if (c < 0x18 || std::all_of(message.begin(), message.end(), isspace))
				{
					return;
				}

			ENetPeer* currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->netID == netID)
					name = ((PlayerInfo*)(currentPeer->data))->displayName;

			}
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o<`w" + name + "`o> " + message));

			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), message), 0));
			GamePacket p2f = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), +"`!" + message), 0));
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{

					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet);

					//enet_host_flush(server);

					if (((PlayerInfo*)(peer->data))->isFrozen == false)
					{

						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2);

					}
					else
					{
						ENetPacket* packet2f = enet_packet_create(p2f.data,
							p2f.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2f);
					}

					//enet_host_flush(server);
				}
			}
			delete p.data;
			delete p2.data;
			delete p2f.data;
		}
	}
	else {
		if (((PlayerInfo*)(peer->data))->haveGrowId) {

			GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to chat!"));
			ENetPacket* packet0 = enet_packet_create(p0.data,
				p0.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet0);
			delete p0.data;
			GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`oTo prevent abuse, you `4must `obe `2registered `oin order to chat!"));
			ENetPacket* packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			return;
		}
	}
}

void sendGrowmoji(ENetPeer* peer, string emoji)
{
	ENetPeer* currentPeer;
	GamePacket p2ssw = packetEnd(appendString(appendInt(appendString(createPacket(), "OnEmoticonDataChanged"), 201560520), "(wl)|ā|1&(yes)|Ă|1&(no)|ă|1&(love)|Ą|1&(oops)|ą|1&(shy)|Ć|1&(wink)|ć|1&(tongue)|Ĉ|1&(agree)|ĉ|1&(sleep)|Ċ|1&(punch)|ċ|1&(music)|Č|1&(build)|č|1&(megaphone)|Ď|1&(sigh)|ď|1&(mad)|Đ|1&(wow)|đ|1&(dance)|Ē|1&(see-no-evil)|ē|1&(bheart)|Ĕ|1&(heart)|ĕ|1&(grow)|Ė|1&(gems)|ė|1&(kiss)|Ę|1&(gtoken)|ę|1&(lol)|Ě|1&(smile)|Ā|1&(cool)|Ĝ|1&(cry)|ĝ|1&(vend)|Ğ|1&(bunny)|ě|1&(cactus)|ğ|1&(pine)|Ĥ|1&(peace)|ģ|1&(terror)|ġ|1&(evil)|Ģ|1&(fireworks)|Ħ|1&(football)|ĥ|1&(alien)|ħ|1&(party)|Ĩ|1&(pizza)|ĩ|1&(clap)|Ī|1&(song)|ī|1&(ghost)|Ĭ|1&(nuke)|ĭ|1&(halo)|Į|1&(turkey)|į|1&(gift)|İ|1&(cake)|ı|1&(heartarrow)|Ĳ|1&(lucky)|ĳ|1&(shamrock)|Ĵ|1&(grin)|ĵ|1&(ill)|Ķ|1&"));
	ENetPacket* packet2ssw = enet_packet_create(p2ssw.data,
		p2ssw.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2ssw);
	delete p2ssw.data;
}
void updateSign(ENetPeer* peer, int foreground, int x, int y, string text, int background)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8, wot = text.length(), lol = 0, wut = 5;
	int yeh = hmm + 3 + 1, idk = 15 + wot, lmao = -1, yey = 2; //idk = text_len + 15, wut = type(?), wot = text_len, yey = len of text_len
	int ok = 52 + idk;
	int kek = ok + 4, yup = ok - 8 - idk;
	int thonk = 4, magic = 56, wew = ok + 5 + 4;
	int wow = magic + 4 + 5;
	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, thonk);
	memcpy(data + yeh, &hmm, thonk); //read discord
	memcpy(data + yup, &x, 4);
	memcpy(data + yup + 4, &y, 4);
	memcpy(data + 4 + yup + 4, &idk, thonk);
	memcpy(data + magic, &foreground, yey);
	memcpy(data + magic + 2, &background, yey); //p100 fix by the one and only lapada
	memcpy(data + thonk + magic, &lol, thonk);
	memcpy(data + magic + 4 + thonk, &yey, 1);
	memcpy(data + wow, &wot, yey); //data + wow = text_len
	memcpy(data + yey + wow, text.c_str(), wot); //data + text_len_len + text_len_offs = text
	memcpy(data + ok, &lmao, thonk); //end ?
	memcpy(p->data, &thonk, thonk);
	memcpy((char*)p->data + thonk, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}


void sendWho(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer) && ((PlayerInfo*)(currentPeer->data))->isinv == false)
		{

			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(currentPeer->data))->netID), ((PlayerInfo*)(currentPeer->data))->displayName), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			//enet_host_flush(server);
		}
	}
}
void sendWorldCursed(ENetPeer* peer, WorldInfo* worldInfo)
{
#ifdef TOTAL_LOG
	cout << "Entering a world..." << endl;
#endif
	if (worldproperlock == false)
	{
		((PlayerInfo*)(peer->data))->joinClothesUpdated = false;
		string asdf = "0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000070000000000"; // 0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000080000000000000000000000000000000000000000000000000000000000000048133A0500000000BEBB0000070000000000
		string worldName = "HELL";
		int xSize = worldInfo->width;
		int ySize = worldInfo->height;
		int square = xSize * ySize;
		__int16 nameLen = worldName.length();
		int payloadLen = asdf.length() / 2;
		int dataLen = payloadLen + 2 + nameLen + 12 + (square * 8) + 4;
		int allocMem = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 16000;
		BYTE* data = new BYTE[allocMem];
		for (int i = 0; i < asdf.length(); i += 2)
		{
			char x = ch2n(asdf[i]);
			x = x << 4;
			x += ch2n(asdf[i + 1]);
			memcpy(data + (i / 2), &x, 1);
		}
		int zero = 0;
		__int16 item = 0;
		int smth = 0;
		for (int i = 0; i < square * 8; i += 4) memcpy(data + payloadLen + i + 14 + nameLen, &zero, 4);
		for (int i = 0; i < square * 8; i += 8) memcpy(data + payloadLen + i + 14 + nameLen, &item, 2);
		memcpy(data + payloadLen, &nameLen, 2);
		memcpy(data + payloadLen + 2, worldName.c_str(), nameLen);
		memcpy(data + payloadLen + 2 + nameLen, &xSize, 4);
		memcpy(data + payloadLen + 6 + nameLen, &ySize, 4);
		memcpy(data + payloadLen + 10 + nameLen, &square, 4);
		BYTE* blockPtr = data + payloadLen + 14 + nameLen;
		for (int i = 0; i < square; i++) {
			if (isMail(worldInfo->items[i].foreground))
			{
				int mailX = i % worldInfo->width;
				int mailY = i / worldInfo->width;
				std::ifstream ifs("mails/" + worldInfo->name + "." + std::to_string(mailX) + "." + std::to_string(mailY) + ".json");
				if (ifs.is_open())
				{
					json j;
					ifs >> j;
					int amount = j["amount"];
					//
					if (amount == 10)
					{
						updateSign(peer, worldInfo->items[i].foreground, i % worldInfo->width, i / worldInfo->width, "`wThere is `210 `wletters in it (`4Full`w)``", worldInfo->items[i].background);
					}
					else
					{
						updateSign(peer, worldInfo->items[i].foreground, i % worldInfo->width, i / worldInfo->width, "`wThere is `2" + std::to_string(amount) + " `wletters in it``", worldInfo->items[i].background);
					}
				}
				else
				{
				}
			}
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100)/* || (worldInfo->items[i].foreground%2)*/)
			{
				memcpy(blockPtr, &worldInfo->items[i].foreground, 2);
				int type = 0x00000000;
				// type 1 = locked
				if (worldInfo->items[i].water)
					type |= 0x04000000;
				if (worldInfo->items[i].glue)
					type |= 0x08000000;
				if (worldInfo->items[i].fire)
					type |= 0x10000000;
				if (worldInfo->items[i].red)
					type |= 0x20000000;
				if (worldInfo->items[i].green)
					type |= 0x40000000;
				if (worldInfo->items[i].blue)
					type |= 0x80000000;


				// int type = 0x04000000; = water
				// int type = 0x08000000 = glue
				// int type = 0x10000000; = fire
				// int type = 0x20000000; = red color
				// int type = 0x40000000; = green color
				// int type = 0x80000000; = blue color
				memcpy(blockPtr + 4, &type, 4);
				/*if (worldInfo->items[i].foreground % 2)
				{
				blockPtr += 6;
				}*/
			}
			else
			{
				memcpy(blockPtr, &zero, 2);
			}
			memcpy(blockPtr + 2, &worldInfo->items[i].background, 2);
			blockPtr += 8;
			/*if (blockPtr - data < allocMem - 2000) // realloc
			{
			int wLen = blockPtr - data;
			BYTE* oldData = data;


			data = new BYTE[allocMem + 16000];
			memcpy(data, oldData, allocMem);
			allocMem += 16000;
			delete oldData;
			blockPtr = data + wLen;

			}*/
		}
		memcpy(data + dataLen - 4, &smth, 4);
		ENetPacket* packet2 = enet_packet_create(data,
			dataLen,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		//enet_host_flush(server);
		for (int i = 0; i < square; i++) {
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100))
				; // nothing
			else
			{
				PlayerMoving data;
				//data.packetType = 0x14;
				data.packetType = 0x3;

				//data.characterState = 0x924; // animation
				data.characterState = 0x0; // animation
				data.x = i % worldInfo->width;
				data.y = i / worldInfo->height;
				data.punchX = i % worldInfo->width;
				data.punchY = i / worldInfo->width;
				data.XSpeed = 0;
				data.YSpeed = 0;
				data.netID = -1;
				data.plantingTree = worldInfo->items[i].foreground;
				SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
		((PlayerInfo*)(peer->data))->currentWorld = worldInfo->name;

		//print_ip(peer->address.host);


		if (((PlayerInfo*)(peer->data))->haveGrowId) {

			PlayerInfo* p = ((PlayerInfo*)(peer->data));
			std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
			json j;
			ifff >> j;

			p->currentWorld = worldInfo->name;

			int bac, han, fac, hai, fee, pan, nec, shi, mas, anc, ban;
			bac = j["ClothBack"];
			han = j["ClothHand"];
			fac = j["ClothFace"];
			hai = j["ClothHair"];
			fee = j["ClothFeet"];
			pan = j["ClothPants"];
			nec = j["ClothNeck"];
			shi = j["ClothShirt"];
			mas = j["ClothMask"];
			anc = j["ClothAnces"];
			ban = j["isBanned"];
			/*vector <string>frns;
			if (j.count("friends") == 1) {
				for (int i = 0; i < j["friends"].size(); i++) {
					frns.push_back(j["friends"][i]);
				}
			}
			else {
				frns = {};
			}*/

			p->cloth_back = bac;
			p->cloth_hand = han;
			p->cloth_face = fac;
			p->cloth_hair = hai;
			p->cloth_feet = fee;
			p->cloth_pants = pan;
			p->cloth_necklace = nec;
			p->cloth_shirt = shi;
			p->cloth_mask = mas;

			sendClothes(peer);

			ifff.close();

		}

		delete data;

	}
}

void sendWorldOffers(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}

	worldOffers += "\nadd_button|`ePvP [`@BETA`e]``|pvp|0.6|3529161471|\n";
	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorld(worlds[i].name)) + "|0.55|3529161471\n";
	}
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->lastworlds.size(); i++) {
		worldOffers += "add_floater|" + ((PlayerInfo*)(peer->data))->lastworlds[i] + "|" + std::to_string(getPlayersCountInWorld(((PlayerInfo*)(peer->data))->lastworlds[i])) + "|0.55|3417414143\n";
	}

	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|428190335\7nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}


void setupQueue() {
	while (1) {
		Sleep(3000);
		ENetPeer* currentPeer;
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (((PlayerInfo*)(currentPeer->data))->isWaitingForMatch) {
				Player::OnAddNotification(currentPeer, "`2Still trying to find match...``", "audio/gong.wav", "interface/hommel.rttex");
			}
		}
	}
}

void Game() {
	while (1) {
		Sleep(10);
		if (match.isMatchRunning) {
			if (match.playersInGame < 2) {
				match.playersInGame = 0;
				ENetPeer* cPeer;
				for (cPeer = server->peers;
					cPeer < &server->peers[server->peerCount];
					++cPeer)
				{
					if (cPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (((PlayerInfo*)(cPeer->data))->isInGame) {
						Player::OnConsoleMessage(cPeer, "`oNot enough players left, ending match...``");
						((PlayerInfo*)(cPeer->data))->isInGame = false;
						sendPlayerLeave(cPeer, ((PlayerInfo*)(cPeer->data)));
						((PlayerInfo*)(cPeer->data))->currentWorld = "EXIT";
						sendWorldOffers(cPeer);
						Player::PlayAudio(cPeer, "audio/door_shut.wav", 0);
					}
				}
				match.topOne = "";
				match.topTwo = "";
				match.topThree = "";
				match.topFour = "";
				match.topFive = "";
				match.topSix = "";
				match.playersInGame = 0;
				match.isMatchRunning = false;
			}
		}
	}
}

void manageGame() {
	while (1) {
		Sleep(10);
		if (match.isMatchRunning == true) {
			Sleep(420000);
			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->isInGame) {
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|1st - " + match.topOne + "|left|6138|\nadd_label_with_icon|big|2nd - " + match.topTwo + "|left|7672|\nadd_label_with_icon|big|3rd - " + match.topThree + "|left|7336|\nadd_button|backtoexit|Back to EXIT|noflags|0|0|\n\nnend_dialog|pvprank||OK|"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
					delete p.data;
				}
			}
			Sleep(12000);
			ENetPeer* cPeer;
			for (cPeer = server->peers;
				cPeer < &server->peers[server->peerCount];
				++cPeer)
			{
				if (cPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(cPeer->data))->isInGame) {
					((PlayerInfo*)(cPeer->data))->isInGame = false;
					sendPlayerLeave(cPeer, ((PlayerInfo*)(cPeer->data)));
					((PlayerInfo*)(cPeer->data))->currentWorld = "EXIT";
					sendWorldOffers(cPeer);

					Player::PlayAudio(cPeer, "audio/door_shut.wav", 0);
				}
			}
			match.topOne = "";
			match.topTwo = "";
			match.topThree = "";
			match.topFour = "";
			match.topFive = "";
			match.topSix = "";
			match.playersInGame = 0;
			match.isMatchRunning = false;
		}
	}
}


void sendAction(ENetPeer* peer, int netID, string action)
{
	ENetPeer* currentPeer;
	string name = "";
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnAction"), action));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			memcpy(p2.data + 8, &netID, 4);
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(currentPeer, 0, packet2);

			//enet_host_flush(server);
		}
	}
	delete p2.data;
}

void sendTake(ENetPeer* peer, int netID, int x, int y, int item)
{
	if (item >= 7196) return;
	if (item < 0) return;
	ENetPeer* currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 14;
			data.x = x;
			data.y = y;
			data.netID = netID;
			data.plantingTree = item;


			BYTE* raw = packPlayerMoving(&data);


			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_EVENT_TYPE_RECEIVE);
		}
	}
}





void sendResetState(ENetPeer* peer)
{
	if (((PlayerInfo*)(peer->data))->isCursed)
	{
		PlayerInfo* info = ((PlayerInfo*)(peer->data));
		int netID = info->netID;
		ENetPeer* currentPeer;
		//int state = getState(info);
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = 0; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = 4096;
				BYTE* raw = packPlayerMoving(&data);
				int var = info->effect; // placing and breking
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->isDuctaped)
				{
					PlayerInfo* info = ((PlayerInfo*)(peer->data));
					int netID = info->netID;
					ENetPeer* currentPeer;
					//int state = getState(info);
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {
							PlayerMoving data;
							data.packetType = 0x14;
							data.characterState = 0; // animation
							data.x = 1000;
							data.y = 100;
							data.punchX = 0;
							data.punchY = 0;
							data.XSpeed = 300;
							data.YSpeed = 600;
							data.netID = netID;
							data.plantingTree = 8192;
							BYTE* raw = packPlayerMoving(&data);
							int var = info->effect; // placing and breking
							memcpy(raw + 1, &var, 3);
							SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
						}
						else
						{
							PlayerMoving data;
							data.packetType = 0x14;
							data.characterState = 0; // animation
							data.x = 1000;
							data.y = 100;
							data.punchX = 0;
							data.punchY = 0;
							data.XSpeed = 300;
							data.YSpeed = 600;
							data.netID = netID;
							data.plantingTree = 2;
							BYTE* raw = packPlayerMoving(&data);
							int var = info->effect; // placing and breking
							memcpy(raw + 1, &var, 3);
							SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
						}
					}

				}
			}
		}
	}
}
void sendFrozenState(ENetPeer* peer)
{
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	//int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 0x14;
			data.characterState = 0; // animation
			data.x = 1000;
			data.y = 100;
			data.punchX = 0;
			data.punchY = 0;
			data.XSpeed = 300;
			data.YSpeed = 600;
			data.netID = netID;
			data.plantingTree = 2048;
			BYTE* raw = packPlayerMoving(&data);
			int var = info->effect; // placing and breking
			memcpy(raw + 1, &var, 3);
			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
}
void sendState(ENetPeer* peer) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 0x14;
			data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
			data.x = 1000;
			data.y = 100;
			data.punchX = 0;
			data.punchY = 0;
			data.XSpeed = 300;
			data.YSpeed = 600;
			data.netID = netID;
			data.plantingTree = state;
			BYTE* raw = packPlayerMoving(&data);
			int var = 0x808000; // placing and breking
			memcpy(raw + 1, &var, 3);
			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	// TODO
}









void sendfakeState(ENetPeer* peer) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) >= 999)
			{
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = 0; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = info->effect; // placing and breking
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
	}
	// TODO
}

void sendPlayerToPlayer(ENetPeer* peer, ENetPeer* otherpeer)
{
	{
		sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
	}
	WorldInfo info = worldDB.get(((PlayerInfo*)(otherpeer->data))->currentWorld);
	sendWorld(peer, &info);


	int x = ((PlayerInfo*)(otherpeer->data))->x;
	int y = ((PlayerInfo*)(otherpeer->data))->y;


	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));


	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);


	delete p.data;
	((PlayerInfo*)(peer->data))->netID = cId;
	onPeerConnect(peer);
	cId++;


	sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
}




void sendPlayerToWorld(ENetPeer* peer, PlayerInfo* player, string wrldname)
{




	toUpperCase(wrldname);
	if (wrldname == "CON" || wrldname == "NUL" || wrldname == "BEX" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
	{
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`eWhoops! `wThis `oworld`w can't be warped to, as it is used by `4System`w.``"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);

		delete p.data;
	}
	else
	{
		{
			sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
		}

		WorldInfo info = worldDB.get(wrldname);
		sendWorld(peer, &info);



		int x = 3040;
		int y = 736;


		for (int j = 0; j < info.width * info.height; j++)
		{
			if (info.items[j].foreground == 6) {
				x = (j % info.width) * 32;
				y = (j / info.width) * 32;
			}
		}
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));


		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);


		delete p.data;
		((PlayerInfo*)(peer->data))->netID = cId;
		onPeerConnect(peer);
		cId++;


		sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);



	}
}

void debugcout()
{
	while (debugcout)
	{
		cout << "debug test 1";
	}
}

void sendWorldFail(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}


	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorld(worlds[i].name)) + "|0.55|3529161471\n";
	}
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->lastworlds.size(); i++) {
		worldOffers += "add_floater|" + ((PlayerInfo*)(peer->data))->lastworlds[i] + "|" + std::to_string(getPlayersCountInWorld(((PlayerInfo*)(peer->data))->lastworlds[i])) + "|0.55|3417414143\n";
	}
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|428190335\7nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}

void WhiteDoor(int x, int y, int tile, int causedBy, ENetPeer* peer)
{
	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;

	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = tile;

	WorldInfo* world = getPlyersWorld(peer);

	if (world->items[x + (y * world->width)].foreground == 6)
	{
		sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
		sendWorldOffers(peer);
		if (((PlayerInfo*)(peer->data))->isIn)
		{
			if (((PlayerInfo*)(peer->data))->haveGrowId) {
				((PlayerInfo*)(peer->data))->canWalkInBlocks = false;

				PlayerInfo* p = ((PlayerInfo*)(peer->data));

				string username = PlayerDB::getProperName(p->rawName);

				std::ofstream o("players/" + username + ".json");
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}
				json j;

				int clothback = p->cloth_back;
				int clothhand = p->cloth_hand;
				int clothface = p->cloth_face;
				int clothhair = p->cloth_hair;
				int clothfeet = p->cloth_feet;
				int clothpants = p->cloth_pants;
				int clothneck = p->cloth_necklace;
				int clothshirt = p->cloth_shirt;
				int clothmask = p->cloth_mask;
				int clothances = p->cloth_ances;

				string password = ((PlayerInfo*)(peer->data))->tankIDPass;
				j["username"] = username;
				j["password"] = hashPassword(password);
				j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
				j["ClothBack"] = clothback;
				j["ClothHand"] = clothhand;
				j["ClothFace"] = clothface;
				j["ClothShirt"] = clothshirt;
				j["ClothPants"] = clothpants;
				j["ClothNeck"] = clothneck;
				j["ClothHair"] = clothhair;
				j["ClothFeet"] = clothfeet;
				j["ClothMask"] = clothmask;
				j["ClothAnces"] = clothances;


				int ban = 0;
				j["isBanned"] = ban;
				int ip;
				j["ipID"] = peer->address.host;
				j["effect"] = ((PlayerInfo*)(peer->data))->effect;


				//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
				j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
				j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl;
				j["lastlog"] = ((PlayerInfo*)(peer->data))->lastlog;
				j["login"] = ((PlayerInfo*)(peer->data))->login;
				j["isvip"] = ((PlayerInfo*)(peer->data))->isvip;
				j["onquest"] = ((PlayerInfo*)(peer->data))->onquest;
				j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
				j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
				j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
				j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
				j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
				j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
				j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
				j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
				j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
				j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
				j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
				j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
				j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
				j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
				j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
				j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
				j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
				j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
				j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
				j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
				j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
				j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
				j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
				j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
				j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
				j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
				j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
				j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
				j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
				j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
				j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
				j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
				j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
				j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
				j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
				j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
				j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
				j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
				j["guild"] = ((PlayerInfo*)(peer->data))->guild;
				j["joinguild"] = ((PlayerInfo*)(peer->data))->joinguild;
				j["level"] = ((PlayerInfo*)(peer->data))->level;
				j["xp"] = ((PlayerInfo*)(peer->data))->xp;
				j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
				j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
				// Mining update starts here
				j["amber"] = ((PlayerInfo*)(peer->data))->amber;
				j["amberxp"] = ((PlayerInfo*)(peer->data))->amberxp;

				j["opal"] = ((PlayerInfo*)(peer->data))->opal;
				j["opalxp"] = ((PlayerInfo*)(peer->data))->opalxp;

				j["gold"] = ((PlayerInfo*)(peer->data))->gold;
				j["goldxp"] = ((PlayerInfo*)(peer->data))->goldxp;

				j["sapphire"] = ((PlayerInfo*)(peer->data))->sapphire;
				j["sapphirexp"] = ((PlayerInfo*)(peer->data))->sapphirexp;

				j["diamond"] = ((PlayerInfo*)(peer->data))->diamond;
				j["diamondxp"] = ((PlayerInfo*)(peer->data))->diamondxp;

				j["emerald"] = ((PlayerInfo*)(peer->data))->emerald;
				j["emeraldxp"] = ((PlayerInfo*)(peer->data))->emeraldxp;
				// Mining update ends here
				j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;

				o << j << std::endl;
			}
		}
	}

}

void Respawn(ENetPeer* peer) {
	int x = 3040;
	int y = 736;

	WorldInfo* world = getPlyersWorld(peer);
	if (world)
	{


		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {

				int x = ((PlayerInfo*)(peer->data))->x;
				int y = ((PlayerInfo*)(peer->data))->y;
				GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 3), x, (y + 8)));

				ENetPacket* packetd = enet_packet_create(psp.data,
					psp.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packetd);
				delete psp.data;

				string text = "action|play_sfx\nfile|audio/male_scream.wav\ndelayMS|0\n";
				BYTE* data = new BYTE[5 + text.length()];
				BYTE zero = 0;
				int type = 3;
				memcpy(data, &type, 4);
				memcpy(data + 4, text.c_str(), text.length());
				memcpy(data + 4 + text.length(), &zero, 1);

				{
					ENetPacket* packetres = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					if (isHere(peer, currentPeer)) {
						enet_peer_send(currentPeer, 0, packetres);

					}
				}
			}
		}

		for (int i = 0; i < world->width * world->height; i++)
		{
			if (world->items[i].foreground == 6) {
				x = (i % world->width) * 32;
				y = (i / world->width) * 32;
				//world->items[i].foreground = 8;
			}
		}
		{
			PlayerMoving data;
			data.packetType = 0x0;
			data.characterState = 0x924; // animation
			data.x = x;
			data.y = y;
			data.punchX = -1;
			data.punchY = -1;
			data.XSpeed = 0;
			data.YSpeed = 0;
			data.netID = ((PlayerInfo*)(peer->data))->netID;
			data.plantingTree = 0x0; // 0x0
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
		}

		{
			int x = 3040;
			int y = 736;


			for (int i = 0; i < world->width * world->height; i++)
			{
				if (world->items[i].foreground == 6) {
					x = (i % world->width) * 32;
					y = (i / world->width) * 32;
					//world->items[i].foreground = 8;
				}
			}
			GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
			memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			//enet_host_flush(server);
		}
		{
			int x = 3040;
			int y = 736;


			for (int i = 0; i < world->width * world->height; i++)
			{
				if (world->items[i].foreground == 6) {
					x = (i % world->width) * 32;
					y = (i / world->width) * 32;
					//world->items[i].foreground = 8;
				}
			}
			GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
			memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			enet_host_flush(server);
		}
	}
	if (((PlayerInfo*)(peer->data))->usedCP == false)
	{
		GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
		memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);


		enet_peer_send(peer, 0, packet2);
		delete p2.data;
	}
	else
	{
		GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), ((PlayerInfo*)(peer->data))->cpX, ((PlayerInfo*)(peer->data))->cpY));
		memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);


		enet_peer_send(peer, 0, packet2);
		delete p2.data;
	}
}








BOOL WINAPI HandlerRoutine(DWORD dwCtrlType)
{
	saveAllWorlds();
	return FALSE;
}

std::ifstream::pos_type filesize(const char* filename)
{
	std::ifstream in(filename, std::ifstream::ate | std::ifstream::binary);
	return in.tellg();
}

uint32_t HashString(unsigned char* str, int len)
{
	if (!str) return 0;

	unsigned char* n = (unsigned char*)str;
	uint32_t acc = 0x55555555;

	if (len == 0)
	{
		while (*n)
			acc = (acc >> 27) + (acc << 5) + *n++;
	}
	else
	{
		for (int i = 0; i < len; i++)
		{
			acc = (acc >> 27) + (acc << 5) + *n++;
		}
	}
	return acc;

}

unsigned char* getA(string fileName, int* pSizeOut, bool bAddBasePath, bool bAutoDecompress)
{
	unsigned char* pData = NULL;
	FILE* fp = fopen(fileName.c_str(), "rb");
	if (!fp)
	{
		cout << "File not found" << endl;
		if (!fp) return NULL;
	}

	fseek(fp, 0, SEEK_END);
	*pSizeOut = ftell(fp);
	fseek(fp, 0, SEEK_SET);

	pData = (unsigned char*)new unsigned char[((*pSizeOut) + 1)];
	if (!pData)
	{
		printf("Out of memory opening %s?", fileName.c_str());
		return 0;
	}
	pData[*pSizeOut] = 0;
	fread(pData, *pSizeOut, 1, fp);
	fclose(fp);

	return pData;
}

void ServerInputPluginByplayingo()
{
	while (ServerInputPluginByplayingo)
	{
		std::string buffer;
		std::cin >> buffer;

		// example:
		if (buffer == "exit") // if exit is typed in server console:
		{
			// do stuff
			exit(0);
		}
		else if (buffer == "online")
		{
			string x;


			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;


				x.append(((PlayerInfo*)(currentPeer->data))->rawName + " (" + to_string(((PlayerInfo*)(currentPeer->data))->adminLevel) + ")" + " (" + ((PlayerInfo*)(currentPeer->data))->charIP + ")" + ", ");
			}
			x = x.substr(0, x.length() - 2);

			cout << "(PEERS CONNECTED!)" << x << endl;

		}
		else if (buffer == "saveall")
		{
			saveAllWorlds();
		}

		else if (buffer == "kickall")
		{
			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;

				enet_peer_disconnect_later(currentPeer, 0);
			}
		}
		else if (buffer == "restart")
		{
			ENetPeer* currentPeer;
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message `o: Restarting server for update in `4ZERO`o seconds! Should be back up in a minute or so. BYE!"));
			string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
			BYTE* data = new BYTE[5 + text.length()];
			BYTE zero = 0;
			int type = 3;
			memcpy(data, &type, 4);
			memcpy(data + 4, text.c_str(), text.length());
			memcpy(data + 4 + text.length(), &zero, 1);
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (!((PlayerInfo*)(currentPeer->data))->radio)
					continue;
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);


				enet_peer_send(currentPeer, 0, packet);




				ENetPacket* packet2 = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);


				enet_peer_send(currentPeer, 0, packet2);

				//enet_host_flush(server);
			}
			delete data;
			delete p.data;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;

				enet_peer_disconnect_later(currentPeer, 0);
			}
		}


		if (buffer.find("addrole") != std::string::npos) {
			// todo

		}



		else if (buffer == "help" || buffer == "?")
		{
			cout << "Operator commands: " << "help " << "kickall " << "saveall " << "addrole " << "online " << "delete " << "maintenance " << "exit" << endl;
		}



	}
}


/*void autoSaveWorlds() {
	while (1) {
		Sleep(2400000);
		string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
		BYTE* data = new BYTE[5 + text.length()];
		BYTE zero = 0;
		int type = 3;
		memcpy(data, &type, 4);
		memcpy(data + 4, text.c_str(), text.length());
		memcpy(data + 4 + text.length(), &zero, 1);
		ENetPacket * packet2 = enet_packet_create(data,
			5 + text.length(),
			ENET_PACKET_FLAG_RELIABLE);
		enet_host_broadcast(server, 0, packet2);
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`4SYSTEM`w] `5Auto saving all worlds..."));
		ENetPacket * packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_host_broadcast(server, 0, packet);
		delete data;
		delete p.data;
		ENetPeer * currentPeer;
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			enet_peer_disconnect_now(currentPeer, 0);
		}
		Sleep(300);
		saveAllWorlds();
	}
}*/

int main()
{
	ofstream ofrestoff("restartedmaintenance.txt");
	ofrestoff << 0;
	ofrestoff.close();
	std::thread first(ServerInputPluginByplayingo);
	first.detach();



	LoadNews();

	{
		{
			// 999 = owner/dev/admin 666 = mod/supermod 333 = vip 166 = influencer = communitymanager 1000


		}
		enet_initialize();;
		if (atexit(saveAllWorlds)) {
			cout << "Worlds won't be saved for this session..." << endl;
		}
		/*if (RegisterApplicationRestart(L" -restarted", 0) == S_OK)
		{
		cout << "Autorestart is ready" << endl;
		}
		else {
		cout << "Binding autorestart failed!" << endl;
		}
		Sleep(65000);
		int* p = NULL;
		*p = 5;*/
		SetConsoleCtrlHandler(HandlerRoutine, true);

		int itemdathash;

		// load items.dat
		{
			std::ifstream file("items.dat", std::ios::binary | std::ios::ate);
			itemsDatSize = file.tellg();



			itemsDat = new BYTE[60 + itemsDatSize];
			string asdf = "0400000010000000FFFFFFFF000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			for (int i = 0; i < asdf.length(); i += 2)
			{
				char x = ch2n(asdf[i]);
				x = x << 4;
				x += ch2n(asdf[i + 1]);
				memcpy(itemsDat + (i / 2), &x, 1);
				if (asdf.length() > 60 * 2) throw 0;
			}
			memcpy(itemsDat + 56, &itemsDatSize, 4);
			file.seekg(0, std::ios::beg);

			if (file.read((char*)(itemsDat + 60), itemsDatSize))
			{
				uint8_t* pData;
				int size = 0;
				const char filename[] = "items.dat";
				size = filesize(filename);
				pData = getA((string)filename, &size, false, false);
				cout << "Updating items data success! Hash: " << HashString((unsigned char*)pData, size) << endl;
				itemdathash = HashString((unsigned char*)pData, size);
				file.close();

			}
			else {
				cout << "Updating item data failed!" << endl;
			}
		}



		//world = generateWorld();


		//worldDB.get("TEST");
		//worldDB.get("MAIN");
		//worldDB.get("NEW");
		//worldDB.get("ADMIN");
		ENetAddress address;
		/* Bind the server to the default localhost.     */
		/* A specific host address can be specified by   */
		enet_address_set_host(&address, "0.0.0.0");
		//address.host = ENET_HOST_ANY;
		/* Bind the server to port 1234. */
		address.port = 44444; // any port serverport
		server = enet_host_create(&address /* the address to bind the server host to */,
			1024      /* allow up to 32 clients and/or outgoing connections */,
			2      /* allow up to 2 channels to be used, 0 and 1 */,
			4096      /* assume any amount of incoming bandwidth */,
			0      /* assume any amount of outgoing bandwidth */);
		if (server == NULL)
		{
			fprintf(stderr,
				"An error occurred while trying to create an ENet server host.\n");
			while (1);
			exit(EXIT_FAILURE);
		}
		server->checksum = enet_crc32;
		enet_host_compress_with_range_coder(server);


		cout << "Building items database..." << endl;
		buildItemsDatabase();
		cout << "Database is built!" << endl;

		std::thread rst(RestartForUpdate);
		rst.detach();


		thread queue(setupQueue);
		if (queue.joinable()) queue.detach();
		thread manage(manageGame);
		if (manage.joinable()) manage.detach();
		thread game(Game);
		if (game.joinable()) game.detach();

		ENetEvent event;
		/* Wait up to 1000 milliseconds for an event. */
		while (true)
			while (enet_host_service(server, &event, 1000) > 0)
			{

				ENetPeer* peer = event.peer;

				switch (event.type)
				{
				case ENET_EVENT_TYPE_CONNECT:
				{
#ifdef TOTAL_LOG
					printf("A new client connected.\n");
#endif
					/* Store any relevant client information here. */
										  //event.peer->data = "Client information";



					ENetPeer* currentPeer;
					int count = 0;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (currentPeer->address.host == peer->address.host)
							count++;

					}


					//char clientConnection[32];
					//((PlayerInfo*)(peer->data))->charIP = enet_address_get_host_ip(&peer->address, clientConnection, 32);

					event.peer->data = new PlayerInfo;



					/* Get the string ip from peer */
					char clientConnection[16];
					enet_address_get_host_ip(&peer->address, clientConnection, 16);
					((PlayerInfo*)(peer->data))->charIP = clientConnection;



					bool isBotHere = false;
					string ipFromFile = "";
					int countIpFromFile = 0;
					ifstream getip("blacklist.txt");
					getip >> countIpFromFile;

					for (int i = 0; i < countIpFromFile; i++)
					{
						getip >> ipFromFile;

						if (((PlayerInfo*)(peer->data))->charIP == ipFromFile)
						{
							isBotHere = true;
						}
					}

					if (isBotHere) continue;




					if (count > 3)
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rToo many accounts are logged on from this IP. Log off one account before playing please.``"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
						//enet_host_flush(server);
						enet_peer_disconnect_later(peer, 0);
					}
					else {
						sendData(peer, 1, 0, 0);
					}




					continue;
				}
				case ENET_EVENT_TYPE_RECEIVE:
				{




					if (((PlayerInfo*)(peer->data))->isUpdating)
					{
						cout << "packet drop" << endl;
						continue;
					}

					if (((PlayerInfo*)(peer->data))->forcegemUpdate)
					{
						/*((PlayerInfo*)(peer->data))->forcegemUpdate = false;

						std::ifstream ifszx("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						std::string contentix((std::istreambuf_iterator<char>(ifszx)),
							(std::istreambuf_iterator<char>()));

						int updvgem = atoi(contentix.c_str());

						GamePacket ppx = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updvgem));
						ENetPacket * packetppx = enet_packet_create(ppx.data,
							ppx.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetppx);
						delete ppx.data;


						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`8You have received some `4gems`8, pal!"));
						ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;*/

					}
					if (((PlayerInfo*)(event.peer->data))->wrongpass == true)
					{
						if (((PlayerInfo*)(peer->data))->isIn) {
							//enet_peer_disconnect_later(peer, 0);

						}
						else
						{
							string text = "action|log\nmsg|`4GrowID or password is wrong! `7Incase you want to recover/change your account/password, contact ! KXPS Server Creator.``";
							string text3 = "action|logon_fail\n";
							string dc = "https://discord.gg/yZ2kwUb";
							string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


							BYTE* data = new BYTE[5 + text.length()];
							BYTE* data3 = new BYTE[5 + text3.length()];
							BYTE* dataurl = new BYTE[5 + url.length()];
							BYTE zero = 0;
							int type = 3;
							memcpy(data, &type, 4);
							memcpy(data + 4, text.c_str(), text.length());
							memcpy(data + 4 + text.length(), &zero, 1);

							memcpy(dataurl, &type, 4);
							memcpy(dataurl + 4, url.c_str(), url.length());
							memcpy(dataurl + 4 + url.length(), &zero, 1);

							memcpy(data3, &type, 4);
							memcpy(data3 + 4, text3.c_str(), text3.length());
							memcpy(data3 + 4 + text3.length(), &zero, 1);

							ENetPacket* p = enet_packet_create(data,
								5 + text.length(),
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, p);
							ENetPacket* p3 = enet_packet_create(dataurl,
								5 + url.length(),
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, p3);
							ENetPacket* p2 = enet_packet_create(data3,
								5 + text3.length(),
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, p2);

							delete data;
							delete dataurl;
							delete data3;

							//enet_peer_disconnect_later(peer, 0);
						}
					}


					if (((PlayerInfo*)(event.peer->data))->player_age == "")
					{
						enet_peer_disconnect_now(peer, 0);
					}

					ENetPeer* currentPeer;
					int count = 0;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;



						std::string mac(((PlayerInfo*)(currentPeer->data))->mac);
						Remove(mac, ":");
						std::string currentip = std::to_string(currentPeer->address.host);
						//((PlayerInfo*)(event.peer->data))->player_age
						bool exist = false;
						if (std::experimental::filesystem::exists("devicebans/" + currentip + ".txt") || std::experimental::filesystem::exists("ridbans/" + ((PlayerInfo*)(event.peer->data))->rid + ".txt") || std::experimental::filesystem::exists("sidbans/" + ((PlayerInfo*)(event.peer->data))->wkid + ".txt") || std::experimental::filesystem::exists("aidbans/" + ((PlayerInfo*)(event.peer->data))->aid + ".txt") || std::experimental::filesystem::exists("vidbans/" + ((PlayerInfo*)(event.peer->data))->vid + ".txt") || std::experimental::filesystem::exists("gidbans/" + ((PlayerInfo*)(event.peer->data))->gid + ".txt") || std::experimental::filesystem::exists("macbans/" + mac + ".txt"))
						{

							exist = true;
						}
						else
						{
							exist = false;
						}


						if (exist == true)
						{
							if (peer->address.host == currentPeer->address.host)
							{

								if (((PlayerInfo*)(peer->data))->isIn) {
									enet_peer_disconnect_later(peer, 0);

								}
								else
								{
									//if (((PlayerInfo*)(peer->data))->isIn == false) checkBan(peer);
									string text = "action|log\nmsg|`4Sorry, this device or location has been suspended. `5Contact ! Jar and Chandra on discord``! `wPlease do not request an unban if you know that you have done something wrong.";
									string text3 = "action|logon_fail\n";
									string dc = "https://discord.gg/yZ2kwUb";
									string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


									BYTE* data = new BYTE[5 + text.length()];
									BYTE* data3 = new BYTE[5 + text3.length()];
									BYTE* dataurl = new BYTE[5 + url.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									memcpy(dataurl, &type, 4);
									memcpy(dataurl + 4, url.c_str(), url.length());
									memcpy(dataurl + 4 + url.length(), &zero, 1);

									memcpy(data3, &type, 4);
									memcpy(data3 + 4, text3.c_str(), text3.length());
									memcpy(data3 + 4 + text3.length(), &zero, 1);

									ENetPacket* p = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p);
									ENetPacket* p3 = enet_packet_create(dataurl,
										5 + url.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p3);
									ENetPacket* p2 = enet_packet_create(data3,
										5 + text3.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p2);

									delete data;
									delete dataurl;
									delete data3;

									enet_peer_disconnect_later(peer, 0);
								}
							}
						}
					}

					/*printf("A packet of length %u containing %s was received from %s on channel %u.\n",
					event.packet->dataLength,
					event.packet->data,
					event.peer->data,
					event.channelID);
					cout << (int)*event.packet->data << endl;*/
					//cout << text_encode(getPacketData((char*)event.packet->data));
					/*for (int i = 0; i < event.packet->dataLength; i++)
					{
					cout << event.packet->data[i];
					}
					sendData(7, 0, 0);
					string x = "eventType|0\neventName|102_PLAYER.AUTHENTICATION\nAuthenticated|0\nAuthentication_error|6\nDevice_Id|^^\nGrow_Id|0\nName|^^Elektronik\nWordlock_balance|0\n";
					//string x = "eventType | 0\neventName | 102_PLAYER.AUTHENTICATION\nAuthenticated | 0\nAuthentication_error | 6\nDevice_Id | ^^\nGrow_Id | 0\nName | ^^Elektronik\nWorldlock_balance | 0\n";
					sendData(6, (char*)x.c_str(), x.length());
					string y = "action|quit\n";
					sendData(3, (char*)y.c_str(), y.length());
					cout << endl;
					string asdf = "0400000001000000FFFFFFFF0000000008000000000000000000000000000000000000000000000000000000000000000000000000000000400000000600020E0000004F6E53656E64546F5365727665720109ED4200000209834CED00030910887F0104020D0000003230392E35392E3139302E347C05090100000000C";
					//asdf = "0400000001000000FFFFFFFF000000000800000000000000000000000000000000000000000000000000000000000000000000000000000040000000060002220000004F6E53757065724D61696E53746172744163636570744C6F676F6E464232313131330109ED4200000209834CED00030910887F0104020D0000003230392E35392E3139302E347C05090100000000C";
					ENetPacket * packet = enet_packet_create(0,
					asdf.length()/2,
					ENET_PACKET_FLAG_RELIABLE);
					for (int i = 0; i < asdf.length(); i += 2)
					{
					char x = ch2n(asdf[i]);
					x = x << 4;
					x += ch2n(asdf[i + 1]);
					memcpy(packet->data + (i / 2), &x, 1);
					}
					enet_peer_send(peer, 0, packet);
					enet_host_flush(server);
					/* Clean up the packet now that we're done using it. */
					//enet_packet_destroy(event.packet);
					//sendData(7, 0, 0);
					int messageType = GetMessageTypeFromPacket(event.packet);
					//cout << "Packet type is " << messageType << endl;
					//cout << (event->packet->data+4) << endl;
					WorldInfo* world = getPlyersWorld(peer);
					switch (messageType) {
					case 2:
					{
						//cout << GetTextPointerFromPacket(event.packet) << endl;

						string cch = GetTextPointerFromPacket(event.packet);
						std::fstream gay("logs.txt", std::ios::in | std::ios::out | std::ios::ate);
						gay << cch << endl;
						gay.close();
						string str = cch.substr(cch.find("text|") + 5, cch.length() - cch.find("text|") - 1);
						if (cch.find("action|wrench") == 0) {
							vector<string> ex = explode("|", cch);


							stringstream ss;


							ss << ex[3];


							string temp;
							int found;
							while (!ss.eof()) {


								ss >> temp;


								if (stringstream(temp) >> found)
									//cout << found;
									((PlayerInfo*)(peer->data))->wrenchsession = found;


								temp = "";
							}
							string worldsowned;

							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;


								if (isHere(peer, currentPeer)) {
									if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->wrenchsession) {

										((PlayerInfo*)(peer->data))->lastInfo = ((PlayerInfo*)(currentPeer->data))->rawName;
										((PlayerInfo*)(peer->data))->lastInfoname = ((PlayerInfo*)(currentPeer->data))->tankIDName;

										string name = ((PlayerInfo*)(currentPeer->data))->displayName;
										string rawnam = ((PlayerInfo*)(peer->data))->rawName;
										string rawnamofwrench = ((PlayerInfo*)(currentPeer->data))->rawName;
										if (rawnamofwrench != rawnam)
										{

											if (rawnamofwrench != "")
											{
												std::ifstream ifszsx("gemdb/" + ((PlayerInfo*)(peer->data))->lastInfo + ".txt");
												std::string contentch2x((std::istreambuf_iterator<char>(ifszsx)),
													(std::istreambuf_iterator<char>()));
												if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
													if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || ((PlayerInfo*)(peer->data))->adminLevel >= 777)
													{
														if (((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite..|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\n\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
												else {
													if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || ((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
													{
														if (((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\n\nadd_button|invitemenu|`eInvite...|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
											}
											else
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
										}
										else
										{
											std::ifstream ifszs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentch2((std::istreambuf_iterator<char>(ifszs)),
												(std::istreambuf_iterator<char>()));
											if (((PlayerInfo*)(peer->data))->isAAP == true)
											{
												if (((PlayerInfo*)(peer->data))->haveGrowId == true)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|disableaap|`5Disable AAP`w``|noflags|0|0|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											else
											{
												if (((PlayerInfo*)(peer->data))->haveGrowId == true)
												{
													std::ostringstream oss;
													if (!((PlayerInfo*)(peer->data))->worldsowned.empty())
													{
														std::copy(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end() - 1,
															std::ostream_iterator<string>(oss, " "));

														// Now add the last element with no delimiter
														oss << ((PlayerInfo*)(peer->data))->worldsowned.back();
													}
													else {
														string oss = "You dont have any worlds!";
													}
													int levels = ((PlayerInfo*)(peer->data))->level;
													int xp = ((PlayerInfo*)(peer->data))->xp;
													int rubble = ((PlayerInfo*)(peer->data))->rubble;
													int rubbles = (rubble * 15);
													int power = (levels * 220) + rubbles;
													int rpower = ((PlayerInfo*)(peer->data))->powers;
													int exp = 300;
													int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;
													string currentworld = ((PlayerInfo*)(peer->data))->currentWorld;


													if (((PlayerInfo*)(peer->data))->isinvited == true)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_player_info|" + name + "|" + std::to_string(levels) + "|" + std::to_string(xp) + "|" + std::to_string(exp) + "|\nadd_spacer|small|\nadd_button|joinguild|`2Join Guild " + ((PlayerInfo*)(currentPeer->data))->guildlast + "!|\nadd_button|passbutton|`4Change Password``|\nadd_textbox|`4GT`0ID`5 Server time: `o" + currentDateTime() + "|left|\nadd_label_with_icon|small|`w(`o" + std::to_string(kxpswl) + "`w) `oPremium Wls|left|242|\nadd_label_with_icon|small|`w(`o" + contentch2 + "`w) `oGems|left|112|\nadd_label_with_icon|small|`w(`o" + std::to_string(rpower) + "`w) `oPowers|left|9082|\nadd_label_with_icon|small|`w(`o" + std::to_string(rubble) + "`w) `oArtifacts|left|4426|\nadd_textbox|`oCurrent World: `w" + currentworld + "|left|\nadd_textbox|`oWorlds Owned:" + oss.str() + "|left|4|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_player_info|" + name + "|" + std::to_string(levels) + "|" + std::to_string(xp) + "|" + std::to_string(exp) + "|\nadd_spacer|small|\nadd_button|passbutton|`4Change Password``|\nadd_textbox|`4GT`0ID`5 Server time: `o" + currentDateTime() + "|left|\nadd_label_with_icon|small|`w(`o" + std::to_string(kxpswl) + "`w) `oPremium Wls|left|242|\nadd_label_with_icon|small|`w(`o" + contentch2 + "`w) `oGems|left|112|\nadd_label_with_icon|small|`w(`o" + std::to_string(rpower) + "`w) `oPowers|left|9082|\nadd_label_with_icon|small|`w(`o" + std::to_string(rubble) + "`w) `oArtifacts|left|4426|\nadd_textbox|`oCurrent World: `w" + currentworld + "|left|\nadd_textbox|`oWorlds Owned:" + oss.str() + "|left|4|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "        |left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
										}

									}


								}


							}
						}
						if (((PlayerInfo*)(peer->data))->adminLevel != 1000) {
							string name = ((PlayerInfo*)(peer->data))->currentWorld;
							if (name == "JAR" || name == "HARUKO" || name == "CHANDRA") {
								sendConsoleMsg(peer, "`4sorry, this is a private world!!!");

								sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
								sendWorldOffers(peer);
							}
						}
						if (cch.find("action|dialog_return\ndialog_name|mail_edit") == 0)
						{
							if (world != NULL)
							{
								std::stringstream ss(GetTextPointerFromPacket(event.packet));
								std::string to;
								int x = 0;
								int y = 0;
								bool created = false;
								string text = "";
								while (std::getline(ss, to, '\n'))
								{
									string id = to.substr(0, to.find("|"));
									string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
									if (id == "ch3")
									{
										text = act;
									}
									else if (id == "tilex")
									{
										x = atoi(act.c_str());
									}
									else if (id == "tiley")
									{
										y = atoi(act.c_str());
										created = true;
									}
									if (created == true)
									{
										string world = ((PlayerInfo*)(peer->data))->currentWorld;

										if (text == "__%&P&%__")
										{
											continue;
										}
										for (char c : text)
										{
											if (c < 0x18 || std::all_of(text.begin(), text.end(), isspace))
											{
											}
										}
										if (text.length() > 0)
										{
											if (text.length() < 255)
											{
												WorldInfo* worldInfo = getPlyersWorld(peer);
												std::ifstream ifs("mails/" + world + "." + to_string(x) + "." + to_string(y) + ".json");
												if (ifs.is_open())
												{
													json j;
													ifs >> j;
													string line1 = j["line1"];
													string line2 = j["line2"];
													string line3 = j["line3"];
													string line4 = j["line4"];
													string line5 = j["line5"];
													string line6 = j["line6"];
													string line7 = j["line7"];
													string line8 = j["line8"];
													string line9 = j["line9"];
													string line10 = j["line10"];
													int amount = j["amount"];
													//
													if (line1 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line2 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line3 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line4 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line5 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line6 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line7 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line8 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line9 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line10 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else {
														GTDialog mail;
														mail.addLabelWithIcon("`wEdit " + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).id, LABEL_BIG);
														mail.addTextBox("`oThis `w" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `oalready has `w" + std::to_string(amount) + " `oin it, you can't leave a message anymore until they got cleared.``");
														mail.addButton("null", "`wClose``");
														//
														OnDialogRequest(peer, mail.finishDialog());
													}
												}
											}
										}
									}
								}
							}
						}
						if (cch.find("action|respawn") == 0 && !cch.find("action|respawn_spike") == 0)
						{
							Respawn(peer);
						}
						if (cch.find("action|respawn_spike") == 0)
						{
							//cout << "hey";
							//((PlayerInfo*)(peer->data))->canLeave = false;
							int x = 3040;
							int y = 736;


							if (!world) continue;

							for (int i = 0; i < world->width * world->height; i++)
							{
								if (world->items[i].foreground == 6) {
									x = (i % world->width) * 32;
									y = (i / world->width) * 32;
								}
							}
							{
								PlayerMoving data;
								data.packetType = 0x0;
								data.characterState = 0x924; // animation
								data.x = x;
								data.y = y;
								data.punchX = -1;
								data.punchY = -1;
								data.XSpeed = 0;
								data.YSpeed = 0;
								data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.plantingTree = 0x0;
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
							}

							{
								int x = 3040;
								int y = 736;

								for (int i = 0; i < world->width * world->height; i++)
								{
									if (world->items[i].foreground == 6) {
										x = (i % world->width) * 32;
										y = (i / world->width) * 32;
									}
								}
								GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
								memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								//enet_host_flush(server);
							}
							{
								int x = 3040;
								int y = 736;

								for (int i = 0; i < world->width * world->height; i++)
								{
									if (world->items[i].foreground == 6) {
										x = (i % world->width) * 32;
										y = (i / world->width) * 32;
									}
								}
								GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
								memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								//enet_host_flush(server);
								if (((PlayerInfo*)(peer->data))->usedCP == false)
								{
									GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
									memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), ((PlayerInfo*)(peer->data))->cpX, ((PlayerInfo*)(peer->data))->cpY));
									memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
#ifdef TOTAL_LOG
							cout << "Respawning... " << endl;
#endif
						}
						if (cch.find("action|friends") == 0)
						{
							if (((PlayerInfo*)(peer->data))->joinguild == true) {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|showguild|Show Guild Members``|0|0|\nadd_button|guildrewards|Guild Rewards``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
						}
						if (cch.find("action|growid") == 0)
						{
#ifndef REGISTRATION
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Registration is not supported yet!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								//enet_host_flush(server);
							}
#endif
#ifdef REGISTRATION
							//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|9032|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||100|\nend_dialog|register||`2Complete!|\n"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							enet_host_flush(server);
							delete p.data;
#endif
						}
						if (cch.find("action|store") == 0)
						{

							if (((PlayerInfo*)(peer->data))->haveGrowId == true)
							{
								if (((PlayerInfo*)(peer->data))->kxpswl >= 0) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_textbox|`wWelcome to the `5KXPS `wStore|left|\nadd_smalltext|`wTap the item you'd like more info on. Want to get `1VIP `wstatus? `wAny Gems/Level purchase or `2Mini-Moderator `wStatus Click Purchase `1in-game assets|left|\nadd_spacer|small|\nadd_button|no|`wPurchase `9in-game items|noflags|0|0|\nadd_button|ingameassets|`wPurchase `1in-game assets|noflags|0|0|\nadd_spacer|small|\nadd_button|storeinvupgrade|`wInventory `2Upgrade|noflags|0|0|\nadd_spacer|small|\nadd_button|depowl|`wPurchase `9KXPS `2Premium`9 WL|noflags|0|0|\nadd_button|blocks|`wPurchase `5in-game `4Blocks!|noflags|0|0|\nadd_button|buytoken|`wPurchase `2Growtoken|noflags|0|0|\nend_dialog|store|Close|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You can't access store with minus wl :("));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
							else
							{


#ifdef REGISTRATION
								//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGet your GrowID Now!``|left|32|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||15|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||4|\nend_dialog|register|Cancel|OK|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
#endif

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r `1You must create `4GrowID `1first before you can access the `2Store`1!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							//enet_host_flush(server);
						}
						if (cch.find("action|dialog_return\ndialog_name|door_edit") == 0) {
							if (world != NULL) {
								if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
									std::stringstream ss(GetTextPointerFromPacket(event.packet));
									std::string to;
									int x = 0;
									int y = 0;
									bool created = false;
									string text = "";
									string wo = "";
									string idd = "";
									string iop = "";
									while (std::getline(ss, to, '\n')) {
										string id = to.substr(0, to.find("|"));
										string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
										if (id == "tilex")
										{
											x = atoi(act.c_str());

										}
										else if (id == "tiley")
										{
											y = atoi(act.c_str());
										}
										else if (id == "ch3")
										{
											text = act;
											created = true;
										}
										else if (id == "wo3")
										{
											wo = act;
										}
										else if (id == "id")
										{
											idd = act;
										}
										else if (id == "iop")
										{
											iop = act;
										}
										if (created == true) {
											if (text == "__%&P&%__") {
												sendConsoleMsg(peer, ">> Can't use this!");
												continue;
											}
											if (text.length() > 0) {
												if (text.length() < 255) {
													WorldInfo* worldInfo = getPlyersWorld(peer);
													int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
													updateDoor(peer, worldInfo->items[squaresign].foreground, squaresign % worldInfo->width, squaresign / worldInfo->width, text);
													string world = ((PlayerInfo*)(peer->data))->currentWorld;
													std::ofstream outfile("labels/" + world + std::to_string(x) + std::to_string(y) + ".txt");

													outfile << text;

													outfile.close();

													std::ofstream outfile1("destination/" + world + std::to_string(x) + std::to_string(y) + ".txt");

													outfile1 << wo;

													outfile1.close();

													std::ofstream outfile2("id/" + world + std::to_string(x) + std::to_string(y) + ".txt");

													outfile2 << idd;

													outfile2.close();

													std::ofstream outfile3("ids/" + idd + ".txt");

													outfile3 << std::to_string(x) + "/" + std::to_string(y);

													outfile3.close();

													std::ofstream outfile4("iop/" + world + std::to_string(x) + std::to_string(y) + ".txt");

													outfile4 << iop;

													outfile4.close();


												}
											}
										}
									}
								}
							}
						}

						if (cch.find("action|info") == 0)
						{
							std::stringstream ss(cch);
							std::string to;
							int id = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") id = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							if (id == -1 || count == -1) continue;
							if (itemDefs.size() < id || id < 0) continue;
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);


							//enet_host_flush(server);
							delete p.data;
						}

						if (cch.find("action|info") == 0)
						{
							std::stringstream ss(cch);
							std::string to;
							int id = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") id = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							if (id == -1 || count == -1) continue;
							if (itemDefs.size() < id || id < 0) continue;
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);


							//enet_host_flush(server);
							delete p.data;
						}


						if (cch.find("action|dialog_return") == 0) // find itemu parodymas
						{
							std::stringstream ss(cch);
							std::string to;
							bool isGuildDialog = false;
							string gguildname;
							string gguildstatement;
							string gguildflagbg;
							string gguildflagfg;
							string stuffitem = "";
							string gravitystr = "";
							string btn = "";
							bool isRegisterDialog = false;
							string username = "";
							string restrictedname = "";
							string password = "";
							string passwordverify = "";
							string password2 = "";
							string username2 = "";
							string password2verify = "";
							string oldpass = "";
							string newgrowid = "";
							//string email = "";
							string discord = "";
							string netid = "";
							string pin;
							string text = "";//done!

							bool isDropDialog = false;
							bool isTrashDialog = false;
							bool isStuffDialog = false;
							string dropitemcount = "";
							string trashitemcount = "";
							bool isPasswordDialog = false;
							bool isGrowidDialog = false;
							bool isFindDialog = false;

							bool isTradeDialog = false;

							bool isWorldLockBuyDialog = false;
							bool isDiamondLockBuyDialog = false;

							bool isBotDialog = false;

							bool Accesspicker = false;

							bool signszzz = false;
							string itemFind = "";

							string strBuyOffer = "";
							string strBuyWorldLockOffer = "";
							string strBuyDiamondLockOffer = "";
							string strResult = "";
							int Result = 68662362;
							int buyOffer;
							bool gems = false;
							string textgems = "";
							string dialog_name = "";
							bool level = false;
							string textlevel = "";
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);

								if (infoDat.size() == 2) {
									if (infoDat[0] == "buttonClicked") btn = infoDat[1];
									if (infoDat[0] == "dialog_name" && infoDat[1] == "searchitem1337")
									{
										isFindDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "gemsdialog")
									{
										gems = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "leveldialog")
									{
										level = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "findid")
									{
										isFindDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "signsshitit")
									{
										signszzz = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqoffer")
									{
										isTradeDialog = true;
									}
									if (infoDat[0] == "stuffitem")
									{
										isStuffDialog = true;

									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqworldlockoffer")
									{
										isWorldLockBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqdiamondlockoffer")
									{
										isDiamondLockBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "antibotres")
									{
										isBotDialog = true;
									}
									if (infoDat[0] == "netid") {
										netid = infoDat[1];
										Accesspicker = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "dropdialog")
									{
										isDropDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "trashdialog")
									{
										isTrashDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "guildconfirm")
									{
										isGuildDialog = true;
									}
									if (isDropDialog) {
										if (infoDat[0] == "dropitemcount") dropitemcount = infoDat[1];

									}
									if (isTrashDialog) {
										if (infoDat[0] == "trashitemcount") trashitemcount = infoDat[1];

									}
									if (isDropDialog) {
										int x;

										try {
											x = stoi(dropitemcount);
										}
										catch (std::invalid_argument & e) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^Item `@dropped `^successfully!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										short int currentItemCount = 0;
										for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
										{
											if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastdropitem)
											{
												currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
											}
										}

										if (x <= 0 || x > currentItemCount) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^That too many or too less to drop!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										else {
											sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y, ((PlayerInfo*)(peer->data))->lastdropitem, x, 0);
											RemoveInventoryItem(((PlayerInfo*)(peer->data))->lastdropitem, x, peer);
											sendSound(peer, "object_spawn.wav");
										}
									}

									if (gems) {
										if (infoDat[0] == "textgems")
										{
											textgems = infoDat[1];
											bool contains_non_int
												= !std::regex_match(textgems, std::regex("^[0-9]+$"));

											if (contains_non_int == true) {
												GamePacket pfi = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requesting offer failed... You may only use positive numbers!"));
												ENetPacket* packetfi = enet_packet_create(pfi.data,
													pfi.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetfi);

												delete pfi.data;
											}
											else
											{
												int a = atoi(textgems.c_str());
												if (a > 0) {
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string acontent((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));
													int cgems = atoi(acontent.c_str());
													int bgems = a * 3000;
													int wls = ((PlayerInfo*)(peer->data))->kxpswl;
													((PlayerInfo*)(peer->data))->buygems = a;
													if (wls >= a)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`oPurchase Confirmation``|left|1366|\nadd_spacer|small|\nadd_label|small|`4You'll give:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o" + std::to_string(a) + "`w) KXPS Premium WLS``|left|242|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`2You'll get:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o" + std::to_string(bgems) + "`w) Gems``|left|112|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|confirmgems|`wDo The Purchase!|noflags|0|0|\nadd_button|cancel|`oCancel|noflags|0|0|"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Not enough WL's"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
											}
										}
									}

									if (level) {
										if (infoDat[0] == "textlevel")
										{
											textlevel = infoDat[1];
											bool contains_non_int
												= !std::regex_match(textlevel, std::regex("^[0-9]+$"));

											if (contains_non_int == true) {
												GamePacket pfi = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requesting offer failed... You may only use positive numbers!"));
												ENetPacket* packetfi = enet_packet_create(pfi.data,
													pfi.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetfi);

												delete pfi.data;
											}
											else
											{
												int a = atoi(textlevel.c_str());
												if (a > 0) {
													int level = ((PlayerInfo*)(peer->data))->level;
													int a = atoi(textlevel.c_str());
													int blevel = a * 5;
													int wls = ((PlayerInfo*)(peer->data))->kxpswl;
													((PlayerInfo*)(peer->data))->buygems = blevel;
													if (wls >= a)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`oPurchase Confirmation``|left|1366|\nadd_spacer|small|\nadd_label|small|`4You'll give:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o" + std::to_string(a) + "`w) KXPS Premium WLS``|left|242|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`2You'll get:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o" + std::to_string(blevel) + "`w) Level``|left|1488|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|confirmlevel|`wDo The Purchase!|noflags|0|0|\nadd_button|cancel|`oCancel|noflags|0|0|"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Not enough WL's"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
											}
										}
									}

									if (isTrashDialog) {
										int x;

										try {
											x = stoi(trashitemcount);
										}
										catch (std::invalid_argument & e) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^You have `4trashed `^this item successfully`^!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										short int currentItemCount = 0;
										for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
										{
											if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lasttrashitem)
											{
												currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
											}
										}

										if (x <= 0 || x > currentItemCount) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^That too many or too less to `4trash`^!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										else {
											//	sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y, ((PlayerInfo*)(peer->data))->lastdropitem, x, 0);
											RemoveInventoryItem(((PlayerInfo*)(peer->data))->lasttrashitem, x, peer);
											sendSound(peer, "trash.wav");
										}
									}

									if (signszzz) {
										if (infoDat[0] == "text")
										{
											text = infoDat[1];
											((PlayerInfo*)(peer->data))->SignPosX;
											((PlayerInfo*)(peer->data))->SignPosY;
											int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
											int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
											int posX = ((PlayerInfo*)(event.peer->data))->posX / 32; // good value is actually 31.16-31.33
											int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;
											string world = ((PlayerInfo*)(peer->data))->currentWorld;
											string posx = std::to_string(yy);
											string posy = std::to_string(xx);

											for (char c : text)

												if (c < 0x18 || std::all_of(text.begin(), text.end(), isspace))
												{

												}

											std::ofstream outfile("signs/" + world + posx + posy + ".txt");

											outfile << text;

											outfile.close();
										}
									}
									if (isBotDialog)
									{
										if (infoDat[0] == "antibot")
										{
											strResult = infoDat[1];

											bool contains_non_int
												= !std::regex_match(strBuyOffer, std::regex("^[0-9]+$"));

											if (contains_non_int == true)
											{
												Result = atoi(strResult.c_str());
												((PlayerInfo*)(peer->data))->Endresult = Result;
											}

											if (((PlayerInfo*)(peer->data))->resultnbr1 + ((PlayerInfo*)(peer->data))->resultnbr2 != Result)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[PLAY-Captcha]: Captcha failed."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;

												((PlayerInfo*)(peer->data))->Endresult = Result;

												enet_peer_disconnect_later(peer, 0);
												cout << "[CAPTCHA FAIL] user typed: " << Result << endl;
												cout << "[CAPTCHA FAIL] answer was: " << ((PlayerInfo*)(peer->data))->resultnbr1 + ((PlayerInfo*)(peer->data))->resultnbr2 << endl;
											}
										}
									}
									if (isFindDialog) {
										if (infoDat[0] == "item") itemFind = infoDat[1];
									}
									if (isWorldLockBuyDialog)
									{
										if (infoDat[0] == "worldlockoffer")
										{
											strBuyWorldLockOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strBuyWorldLockOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4 Invalid WorldLocks format."));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete ps.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strBuyWorldLockOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
												{
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4WorldLocks should be between 1-199."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 1000 * konvertuotasInt)
													{

														bool success = true;
														SaveShopsItemMoreTimes(242, konvertuotasInt, peer, success); // aposition, itemid, quantity, peer, success

														if (!success)continue;
														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `2World `^Lock!"), "audio/hub_open.wav"), 0));
														ENetPacket* packet2 = enet_packet_create(ps2.data,
															ps2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 1000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought gems."), "audio/hub_open.wav"), 0));
														ENetPacket* packet2 = enet_packet_create(ps2.data,
															ps2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete ps2.data;
													}
												}
											}

										}
									}
									if (isDiamondLockBuyDialog)
									{
										if (infoDat[0] == "diamondlockoffer")
										{
											strBuyDiamondLockOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strBuyDiamondLockOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4 Invalid DiamondLocks format."));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete ps.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strBuyDiamondLockOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
												{
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4DiamondLocks should be between 1-199."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 100000 * konvertuotasInt)
													{

														bool success = true;
														SaveShopsItemMoreTimes(1796, konvertuotasInt, peer, success); // aposition, itemid, quantity, peer, success

														if (!success)continue;
														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `1Diamond `^Lock!"), "audio/hub_open.wav"), 0));
														ENetPacket* packet2 = enet_packet_create(ps2.data,
															ps2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 100000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought gems."), "audio/hub_open.wav"), 0));
														ENetPacket* packet2 = enet_packet_create(ps2.data,
															ps2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete ps2.data;
													}
												}
											}

										}
									}
									if (isTradeDialog) {
										if (infoDat[0] == "worldoffer")
										{
											strBuyOffer = infoDat[1];

											bool contains_non_int
												= !std::regex_match(strBuyOffer, std::regex("^[0-9]+$"));

											if (contains_non_int == true)
											{
												GamePacket pfi = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requesting offer failed... You may only use positive numbers to begin a trade!"));
												ENetPacket* packetfi = enet_packet_create(pfi.data,
													pfi.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetfi);

												delete pfi.data;
											}
											else
											{
												buyOffer = std::atoi(strBuyOffer.c_str());

												GamePacket psu = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requested`w " + ((PlayerInfo*)(peer->data))->lastInfo + " `9for a world-trade (you sell world for`w " + strBuyOffer + " `4Gems`9)."));
												ENetPacket* packetsu = enet_packet_create(psu.data,
													psu.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetsu);
												delete psu.data;


												ENetPeer* currentPeerpx;

												for (currentPeerpx = server->peers;
													currentPeerpx < &server->peers[server->peerCount];
													++currentPeerpx)
												{
													if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
														continue;

													if (isHere(peer, currentPeerpx))
													{




														if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
														{
															GamePacket psu = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ((PlayerInfo*)(peer->data))->displayName + " `9requested you for a `4world-trade`9 (he/she sells world for`w " + strBuyOffer + " `4Gems`9). Do `4/tradeworld`9 if you want to buy or decline."));
															ENetPacket* packetsu = enet_packet_create(psu.data,
																psu.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeerpx, 0, packetsu);
															delete psu.data;

															((PlayerInfo*)(peer->data))->lastBuyer = ((PlayerInfo*)(currentPeerpx->data))->rawName;
															((PlayerInfo*)(currentPeerpx->data))->lastSeller = ((PlayerInfo*)(peer->data))->rawName;
															((PlayerInfo*)(currentPeerpx->data))->lastTradeAmount = buyOffer;
															((PlayerInfo*)(peer->data))->lastTradeAmount = buyOffer;
															((PlayerInfo*)(currentPeerpx->data))->lastSellWorld = getPlyersWorld(currentPeerpx)->name;
															((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														}
													}
												}
											}
										}


									}
									if (Accesspicker) {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->netID == stoi(netid)) {
													if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You can't access yourself"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else {
														WorldInfo info;
														world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You got world access!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You gave world access to player! (To remove acc type /unacc name!)"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														//enet_host_flush(server);
														string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet3 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);


														enet_peer_send(currentPeer, 0, packet3);
													}
												}
											}
										}
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "pssdia") 	isPasswordDialog = true;
									if (infoDat[0] == "dialog_name" && infoDat[1] == "grodia") 	isGrowidDialog = true;
									if (infoDat[0] == "dialog_name" && infoDat[1] == "register") isRegisterDialog = true;
									if (infoDat[0] == "dialog_name") dialog_name = infoDat[1];
									if (isPasswordDialog) {
										if (infoDat[0] == "oldpass") oldpass = infoDat[1];
										if (infoDat[0] == "newpass") password2 = infoDat[1];
										if (infoDat[0] == "verifypass")	password2verify = infoDat[1];
									}
									if (isGrowidDialog) {
										if (infoDat[0] == "newgrowid") newgrowid = infoDat[1];
										if (infoDat[0] == "username2") username2 = infoDat[1];
									}
									if (isRegisterDialog) {
										if (infoDat[0] == "username")
										{
											username = infoDat[1];
											restrictedname = username;
											toUpperCase(restrictedname);


											//cout << "user typed: " + restrictedname;
											string cleanrname = std::regex_replace(restrictedname, std::regex("^ +| +$|( ) +"), "$1");
											int level = 1000;

											if (restrictedname == "CON" || restrictedname == "NUL" || restrictedname == "BEX" || restrictedname == "PRN" || restrictedname == "AUX" || restrictedname == "CLOCK$" || restrictedname == "COM0" || restrictedname == "COM1" || restrictedname == "COM2" || restrictedname == "COM3" || restrictedname == "COM4" || restrictedname == "COM5" || restrictedname == "COM6" || restrictedname == "COM7" || restrictedname == "COM8" || restrictedname == "COM9" || restrictedname == "LPT0" || restrictedname == "LPT1" || restrictedname == "LPT2" || restrictedname == "LPT3" || restrictedname == "LPT4" || restrictedname == "LPT5" || restrictedname == "LPT6" || restrictedname == "LPT7" || restrictedname == "LPT8" || restrictedname == "LPT9")
											{
												enet_peer_disconnect_now(peer, 0);
											}
											else
											{
												((PlayerInfo*)(peer->data))->canCreate == true;
											}
											if (restrictedname == "AYON" || restrictedname == "HARUKO" || restrictedname == "JADLIONHD" || restrictedname == "VALKRIE") {
												if (((PlayerInfo*)(peer->data))->adminLevel != 1000) {
													enet_peer_disconnect_now(peer, 0);
												}
											}

										}

										if (infoDat[0] == "password") password = infoDat[1];
										if (infoDat[0] == "passwordverify") passwordverify = infoDat[1];
										//if (infoDat[0] == "email") email = infoDat[1];
										if (infoDat[0] == "discord") discord = infoDat[1];
										if (infoDat[0] == "pin") pin = infoDat[1];
									}
								}
								if (isGuildDialog) {
									if (infoDat[0] == "gname") gguildname = infoDat[1];
									if (infoDat[0] == "gstatement") gguildstatement = infoDat[1];
									if (infoDat[0] == "ggcflagbg") gguildflagbg = infoDat[1];
									if (infoDat[0] == "ggcflagfg") gguildflagfg = infoDat[1];
								}
								/*if (isStuffDialog) {

									if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
										int stuffitemi = -1;
										int gravity = 100;

										int x = ((PlayerInfo*)(peer->data))->lastPunchX;
										int y = ((PlayerInfo*)(peer->data))->lastPunchY;

										if (infoDat[0] == "stuffitem") stuffitem = infoDat[1];
										if (infoDat[0] == "gravity") gravitystr = infoDat[1];
										if (has_only_digits(stuffitem)) stuffitemi = atoi(stuffitem.c_str());
										if (has_only_digits_wnegative(gravitystr)) gravity = atoi(gravitystr.c_str());

										if (gravity > -1000 && gravity < 1000 && stuffitemi > -1 && stuffitemi < 9142) {
											world->items[x + (y*world->width)].displayBlock = stuffitemi;
											world->items[x + (y*world->width)].gravity = gravity;
										}


										updateStuffWeather(peer, x, y, stuffitemi, world->items[x + (y * world->width)].background, gravity, false, false); Nebaigta
										getPlyersWorld(peer)->weather = 29;
									}

								}*/
								if (isGuildDialog) {

									cout << gguildname << endl;
									cout << gguildstatement << endl;
									cout << gguildflagbg << endl;
									cout << gguildflagfg << endl;


									int GCState = PlayerDB::guildRegister(peer, gguildname, gguildstatement, gguildflagbg, gguildflagfg);
									if (GCState == -1) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because special characters isnt allowed!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -2) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because guild name is too short!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -3) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because guild name is too long!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -4) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the guild name is already taken!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -5) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the background block must be a number!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									if (GCState == -6) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the foreground block must be a number!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -7) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the background id is too long!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									if (GCState == -8) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the foreground id is too long!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (world->owner != ((PlayerInfo*)(peer->data))->rawName) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because you should be the owner of this world!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else {
										if (GCState == 1) {

											((PlayerInfo*)(peer->data))->createGuildName = gguildname;
											((PlayerInfo*)(peer->data))->createGuildStatement = gguildstatement;


											((PlayerInfo*)(peer->data))->createGuildFlagBg = gguildflagbg;
											((PlayerInfo*)(peer->data))->createGuildFlagFg = gguildflagfg;

											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild|left|5814|\nadd_textbox|`1Guild Name: `o" + gguildname + "``|\nadd_textbox|`1Guild Statement: `o" + gguildstatement + "``|\nadd_label_with_icon|small|`1<-Guild Flag Background``|left|" + gguildflagbg + "|\nadd_label_with_icon|small|`1<-Guild Flag Foreground``|left|" + gguildflagfg + "|\n\nadd_spacer|small|\nadd_textbox|`oCost: `4250,000 Gems``|\n\nadd_spacer|small|\nadd_button|confirmcreateguild|`oCreate Guild``|\nend_dialog||`wCancel``||\n"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete ps.data;

										}
									}
								}
							}
							if (btn.substr(0, 5) == "found") {
								PlayerInventory inventory;
								InventoryItem item;
								item.itemID = atoi(btn.substr(5, btn.length()).c_str());
								item.itemCount = 200;
								inventory.items.push_back(item);
								item.itemCount = 1;
								item.itemID = 18;
								inventory.items.push_back(item);
								item.itemID = 32;
								inventory.items.push_back(item);
								sendInventory(peer, inventory);
							}





							//enet_host_flush(server);




							int x = ((PlayerMoving*)(peer->data))->punchX;
							int y = ((PlayerMoving*)(peer->data))->punchY;
							int causedBy = ((PlayerMoving*)(peer->data))->netID;
							int tile = ((PlayerMoving*)(peer->data))->plantingTree;












							//MAGIC MACHINE

							if (btn == "magicmachine") {





								bool iscontains = false;
								SearchInventoryItem(peer, 7382, 100, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 4762, 100, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|6952|0|0|\n\nadd_spacer|small|\nadd_textbox|`oUnfortunately Magic Machine couldn't find any special blocks that can be shattered in your inventory!|\n\nadd_spacer|small|\nadd_button|close123321|`9Close|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}

									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|6952|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose block which you want to shatter!|\n\nadd_spacer|small|\nadd_button_with_icon|iamethyst||staticBlueFrame|4762|\n\nadd_spacer||0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;

									}
								}
								else {

									bool iscontainsss = false;
									SearchInventoryItem(peer, 4762, 100, iscontainsss);
									if (!iscontainsss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|6952|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose block which you want to shatter!|\n\nadd_spacer|small|\nadd_button_with_icon|ionyx||staticBlueFrame|7382|\n\nadd_spacer||0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|6952|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose block which you want to shatter!|\nadd_button_with_icon|ionyx||staticBlueFrame|7382|\nadd_button_with_icon|iamethyst||staticBlueFrame|4762|\n\nadd_spacer||0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}


							}




							if (btn == "iamethyst") {


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|6952|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `#Amethyst Blocks `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertamethyst|`9Convert!|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;



							}


							if (btn == "ionyx") {


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|6952|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `bOnyx Blocks `oInto `2Gems`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertonyx|`9Convert!|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;



							}

							if (btn == "takeworld") {
								WorldInfo* world = getPlyersWorld(peer);
								string name = ((PlayerInfo*)(peer->data))->rawName;
								string owner = ((PlayerInfo*)(peer->data))->playerinfo;
								string worlds = ((PlayerInfo*)(peer->data))->currentWorld;
								world->owner = ((PlayerInfo*)(peer->data))->rawName;
								world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD LOGS]: `w" + owner + " `wgave `2" + worlds + " to " + name + "``."));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								cout << owner << " gave " << world << " to " << name << endl;

								//enet_host_flush(server);
								delete p.data;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel > 665) {

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYou took this `2World`w!!!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);

										//enet_host_flush(server);
										delete p2.data;
									}
								}

							}

							if (btn == "warpsdb") {
								std::ifstream iff("sdbworld.json");


								if (iff.fail()) {
									iff.close();


								}
								if (iff.is_open()) {
								}
								json x;
								iff >> x; //load

								string world = x["World"];

								sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), world);
								((PlayerInfo*)(peer->data))->currentWorld = world;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Warping `5to `9Super Duper Broadcast `oLocation!!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;

								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								//ENetPeer * currentPeer;
								int state = getState(info);


							}

							if (btn == "yesconvertamethyst") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Have Shattered 100 `#Amethyst `9blocks!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;


								int effect = 221;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}



								RemoveInventoryItem(4762, 100, peer);

								int gemChance = rand() % 60000;
								GiveChestPrizeGems(peer, gemChance);





							}




							if (btn == "yesconvertonyx") {



								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Have Shattered 100 `bOnyx `9blocks!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								int effect = 221;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}



								RemoveInventoryItem(7382, 100, peer);

								int gemChance = rand() % 50;
								GiveChestPrizeGems(peer, gemChance);





							}












							if (btn == "warptosb") {
								string act = ((PlayerInfo*)(peer->data))->lastSdbWorld;
								if (act == "") {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the broadcast."));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else {
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									joinWorld(peer, act, 0, 0);
								}
							}

















							if (btn == "sutikimas") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1432|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||100|\nend_dialog|register||`2Complete!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								enet_host_flush(server);
								delete p.data;
							}
















							if (btn == "rankup") {


								int Pgems = 0;
								ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemfd >> Pgems;
								gemfd.close();

								string nextlvlName = ((PlayerInfo*)(peer->data))->rankupInfo.nextlvlName;
								int nextlvl = ((PlayerInfo*)(peer->data))->rankupInfo.nextRankId;
								int gems = ((PlayerInfo*)(peer->data))->rankupInfo.gems;
								int amber = ((PlayerInfo*)(peer->data))->rankupInfo.amber;
								int opal = ((PlayerInfo*)(peer->data))->rankupInfo.opal;
								int gold = ((PlayerInfo*)(peer->data))->rankupInfo.gold;
								int ruby = ((PlayerInfo*)(peer->data))->rankupInfo.ruby;
								int sapphire = ((PlayerInfo*)(peer->data))->rankupInfo.sapphire;
								int diamond = ((PlayerInfo*)(peer->data))->rankupInfo.diamond;
								int emerald = ((PlayerInfo*)(peer->data))->rankupInfo.emerald;
								int Pruby = ((PlayerInfo*)(peer->data))->rubble;
								int Pamber = ((PlayerInfo*)(peer->data))->amber;
								int Pgold = ((PlayerInfo*)(peer->data))->gold;
								int Pdiamond = ((PlayerInfo*)(peer->data))->diamond;
								int Popal = ((PlayerInfo*)(peer->data))->opal;
								int Psapphire = ((PlayerInfo*)(peer->data))->sapphire;
								int Pemerald = ((PlayerInfo*)(peer->data))->emerald;

								if (Pamber >= amber && Pgems >= gems && Popal >= opal && Pgold >= gold && Pruby >= ruby && Psapphire >= sapphire && Pdiamond >= diamond && Pemerald >= emerald)
								{
									((PlayerInfo*)(peer->data))->amber -= amber;
									((PlayerInfo*)(peer->data))->opal -= opal;
									((PlayerInfo*)(peer->data))->rubble -= ruby;
									((PlayerInfo*)(peer->data))->gold -= gold;
									((PlayerInfo*)(peer->data))->sapphire -= sapphire;
									((PlayerInfo*)(peer->data))->diamond -= diamond;
									((PlayerInfo*)(peer->data))->emerald -= emerald;
									((PlayerInfo*)(peer->data))->valgem -= gems;



									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have been promoted to `4" + nextlvlName + "`o!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;


									ENetPeer* currentPeer;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message: `wPlayer `8" + ((PlayerInfo*)(peer->data))->rawName + "`w just got promoted to the `8" + nextlvlName + "`w rank! `8(`wgo `2RANKUP`w to get promoted too!`8)"));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
									}
									delete p.data;

									if (((PlayerInfo*)(peer->data))->isIn)
									{
										if (((PlayerInfo*)(peer->data))->haveGrowId) {



											Pgems -= gems;
											ofstream gemof("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											gemof << Pgems;
											gemof.close();
										}
									}

									enet_peer_disconnect_later(peer, 0);


									ENetPeer* peer;
									int effect = 0;
									for (peer = server->peers;
										peer < &server->peers[server->peerCount];
										++peer)
									{
										if (peer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, peer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packetd);
											delete psp.data;



											//enet_host_flush(server);
										}

									}
								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}




							if (btn == "nukeyes") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									int effect = 90;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `4Huge explosion appears!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int x = 3040;
									int y = 736;

									RemoveInventoryItem(3764, 1, peer);



									vector<WorldInfo> worlds;

									//cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << " using atomic" << endl;
									WorldInfo* wrld = getPlyersWorld(peer);

									PlayerMoving data2;
									data2.packetType = 0x3;
									data2.characterState = 0x0; // animation
									data2.x = 3040;
									data2.y = 736;
									data2.punchX = 0;
									data2.punchY = 0;
									data2.XSpeed = 0;
									data2.YSpeed = 0;
									data2.netID = ((PlayerInfo*)(peer->data))->netID;
									data2.plantingTree = 0;

									PlayerMoving data;
									data.packetType = 0x3;
									data.characterState = 0x0; // animation
									data.x = 3040;
									data.y = 736;
									data.punchX = 0;
									data.punchY = 0;
									data.XSpeed = 0;
									data.YSpeed = 0;
									data.netID = ((PlayerInfo*)(peer->data))->netID;
									data.plantingTree = 6864;

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
										{

											/*for (int x = 0; x < world->width; x++)
											{
												sendTileUpdate(x, x, 758, ((PlayerInfo*)(peer->data))->netID, peer);
											}

											for (int y = 0; y < world->width; y++)
											{
												sendTileUpdate(y, y, 758, ((PlayerInfo*)(peer->data))->netID, peer);
											}*/



											for (int i = 0; i < world->width * world->height; i++)
											{
												sendTileUpdate(i, i, 758, ((PlayerInfo*)(peer->data))->netID, peer);

												if (world->items[i].foreground == 6) {
													world->items[i].foreground = 0;
												}
												else if (world->items[i].foreground == 8) {

												}
												else if (world->items[i].foreground == 242) {

												}
												else if (world->items[i].foreground == 2408) {

												}
												else if (world->items[i].foreground == 1796) {

												}
												else if (world->items[i].foreground == 4428) {

												}
												else if (world->items[i].foreground == 7188) {

												}
												else if (world->items[i].foreground == 4082) {

												}
												else if (world->items[i].foreground == 5260) {

												}
												else if (world->items[i].foreground == 2950) {

												}
												else if (world->items[i].foreground == 5980) {

												}
												else if (world->items[i].foreground == 8470) {

												}
												else {
													world->items[i].foreground = 0;
													world->items[i].background = 0;

													data.x = (i % world->width) * 32;
													data.y = (i / world->width) * 32;
													data2.x = (i % world->width) * 32;
													data2.y = (i / world->width) * 32;
													data.punchX = (i % world->width) * 1;
													data.punchY = (i / world->width) * 1;
													data2.punchX = (i % world->width) * 1;
													data2.punchY = (i / world->width) * 1;


													if (isHere(peer, currentPeer)) {
														SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														SendPacketRaw(4, packPlayerMoving(&data2), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
													}

												}
											}
										}
									}

								}

							}


							if (btn == "joinguildzzz") {
								((PlayerInfo*)(peer->data))->guild = ((PlayerInfo*)(peer->data))->guildlast;
								((PlayerInfo*)(peer->data))->isinvited = false;
								((PlayerInfo*)(peer->data))->joinguild = true;

								string fixedguildName = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);

								/*
								std::ifstream ifs2("guilds/" + fixedguildName + ".json");
								if (ifs2.fail()) {
									ifs2.close();
								}
								if (ifs2.is_open()) {

								}
								json j2;
								ifs2 >> j2;*/

								guildmem.push_back(((PlayerInfo*)(peer->data))->rawName);

								std::ifstream ifff("guilds/" + fixedguildName + ".json");
								if (ifff.fail()) {
									ifff.close();
									continue;
								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["Member"] = guildmem; //edit

								std::ofstream o("guilds/" + fixedguildName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}
								o << j << std::endl;
							}
							if (btn == "invitemenu") {


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`5Invite Options|left|1366|\n\nadd_spacer|small|\nadd_button|addfriendrnbutton|`9Add To Friends|0|0|\nadd_button|inviteguildbutton|`9Invite To Guild|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;




							}
							if (btn == "inviteguildbutton") {
								if (((PlayerInfo*)(peer->data))->guild != "") {
									int number = ((PlayerInfo*)(peer->data))->guildmatelist.size();
									if (number > 9) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ERROR: `oYou already have `450 `ofriends! Please remove some before adding new ones!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
												string name = ((PlayerInfo*)(currentPeer->data))->rawName;
												if (((PlayerInfo*)(currentPeer->data))->guild != "") {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3GUILD ERROR: `w" + ((PlayerInfo*)(currentPeer->data))->displayName + "`o is already in a Guild!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else {
													GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wGuild request sent to `2" + ((PlayerInfo*)(currentPeer->data))->displayName + "`5]"));
													ENetPacket* packet4 = enet_packet_create(p4.data,
														p4.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet4);
													delete p4.data;
													string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet2);
													delete data;
													((PlayerInfo*)(currentPeer->data))->guildlast = ((PlayerInfo*)(peer->data))->guild;
													((PlayerInfo*)(currentPeer->data))->isinvited = true;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD REQUEST] `oYou've been invited to join `2" + ((PlayerInfo*)(peer->data))->guild + "`o by `w" + ((PlayerInfo*)(peer->data))->displayName + "`o! To accept, `wwrench yourself `oand then choose `2Join " + ((PlayerInfo*)(peer->data))->guild + "`o."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;
												}
											}
										}
									}
								}
								else {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ERROR] `oYou must be in a Guild as a Elder or higher in order to invite players!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							if (btn == "viewbackpack") {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Backpack|left|1458|\nadd_spacer|\nadd_button|viewcrystals|`wView `9Crystals``|\nadd_button|viewfragments|`wView `9Fragments``|\nadd_spacer|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}

							if (btn == "viewcrystals") {
								int levels = ((PlayerInfo*)(peer->data))->level;
								int xp = ((PlayerInfo*)(peer->data))->xp;
								int rubble = ((PlayerInfo*)(peer->data))->rubble;
								int amber = ((PlayerInfo*)(peer->data))->amber;
								int opal = ((PlayerInfo*)(peer->data))->opal;
								int gold = ((PlayerInfo*)(peer->data))->gold;
								int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
								int diamond = ((PlayerInfo*)(peer->data))->diamond;
								int emerald = ((PlayerInfo*)(peer->data))->emerald;
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Crystals|left|1458|\nadd_spacer|\nadd_label_with_icon|small|`oYou have: `@" + to_string(rubble) + " `4Ruby's`0!|left|828|\nadd_label_with_icon|small|`oYou have: `@" + to_string(amber) + " `8Amber's`0!|left|3948|\nadd_label_with_icon|small|`oYou have: `@" + to_string(opal) + " `!Opal's`0!|left|5270|\nadd_label_with_icon|small|`oYou have: `@" + to_string(gold) + " `9Gold's`0!|left|3424|\nadd_label_with_icon|small|`oYou have: `@" + to_string(sapphire) + " `bSapphire's`0!|left|2812|\nadd_label_with_icon|small|`oYou have: `@" + to_string(diamond) + " `1Diamond's`0!|left|262|\nadd_label_with_icon|small|`oYou have: `@" + to_string(emerald) + " `2Emerald's`0!|left|826|\nadd_spacer|Back|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}


							if (btn == "viewfragments") {
								UpdateLocalPlayerFragments(peer);
								int earthfragment = ((PlayerInfo*)(peer->data))->fEarth;
								int darkfragment = ((PlayerInfo*)(peer->data))->fDark;
								int firefragment = ((PlayerInfo*)(peer->data))->fFire;
								int waterfragment = ((PlayerInfo*)(peer->data))->fWater;
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Fragments|left|1458|\nadd_spacer|\nadd_label_with_icon|small|`oYou have: `@" + to_string(earthfragment) + " `2Earth `9Fragment's`0!|left|5050|\nadd_label_with_icon|small|`oYou have: `@" + to_string(darkfragment) + " `bDark `9Fragment's`0!|left|5052|\nadd_label_with_icon|small|`oYou have: `@" + to_string(firefragment) + " `4Fire `9Fragment's`0!|left|5046|\nadd_label_with_icon|small|`oYou have: `@" + to_string(waterfragment) + " `1Water `9Fragment's`0!|left|5048|\nadd_spacer|Back|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}




							if (btn == "passbutton") {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}
							if (btn == "joinguild") {
								vector<string> gmembers;
								string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guildlast);
								if (guildname != "") {
									std::ifstream ifff("guilds/" + guildname + ".json");
									if (ifff.fail()) {
										ifff.close();
										cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
									}
									json j;
									ifff >> j;

									for (int i = 0; i < j["Member"].size(); i++) {
										gmembers.push_back(j["Member"][i]);
									}

									ifff.close();

									int membercount = gmembers.size();

									if (membercount > 14) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `oThat guild is already full!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {
										((PlayerInfo*)(peer->data))->guild = ((PlayerInfo*)(peer->data))->guildlast;
										((PlayerInfo*)(peer->data))->guildlast = "";
										((PlayerInfo*)(peer->data))->isinvited = false;
										((PlayerInfo*)(peer->data))->joinguild = true;
										updateInvis(peer);
										std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a jar!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load

										vector<string> gmlist;

										for (int i = 0; i < j["Member"].size(); i++) {
											gmlist.push_back(j["Member"][i]);
										}

										gmlist.push_back(((PlayerInfo*)(peer->data))->rawName);

										j["Member"] = gmlist; //edit

										std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}

										o << j << std::endl;






										std::ifstream iffff2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

										json jj2;

										if (iffff2.fail()) {
											iffff2.close();
											continue;
										}
										if (iffff2.is_open()) {


										}

										iffff2 >> jj2; //load

										std::ofstream oo2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
										if (!oo2.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										jj2["guild"] = ((PlayerInfo*)(peer->data))->guild;
										jj2["joinguild"] = true;
										oo2 << jj2 << std::endl;




										ENetPeer* currentPeer;

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild)
											{
												updateGuild(peer);
												updateGuild(currentPeer);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->displayName + " `ojoined the guild!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
												updateInvis(peer);
											}
										}
									}
								}
							}


							if (btn == "showguild") {
								string onlinegmlist = "";
								string grole = "";
								int onlinecount = 0;
								string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
								if (guildname != "") {
									std::ifstream ifff("guilds/" + guildname + ".json");
									if (ifff.fail()) {
										ifff.close();
										cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
										((PlayerInfo*)(peer->data))->guild = "";

									}
									json j;
									ifff >> j;

									int gfbg, gffg, guildlvl, guildxp;

									string gstatement, gleader;

									vector<string> gmembers;

									gfbg = j["backgroundflag"];
									gffg = j["foregroundflag"];
									gstatement = j["GuildStatement"];
									gleader = j["Leader"];
									guildlvl = j["GuildLevel"];
									guildxp = j["GuildExp"];
									for (int i = 0; i < j["Member"].size(); i++) {
										gmembers.push_back(j["Member"][i]);
									}
									((PlayerInfo*)(peer->data))->guildlevel = guildlvl;
									((PlayerInfo*)(peer->data))->guildexp = guildxp;

									((PlayerInfo*)(peer->data))->guildBg = gfbg;
									((PlayerInfo*)(peer->data))->guildFg = gffg;
									((PlayerInfo*)(peer->data))->guildStatement = gstatement;
									((PlayerInfo*)(peer->data))->guildLeader = gleader;
									((PlayerInfo*)(peer->data))->guildMembers = gmembers;

									ifff.close();
								}
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
											onlinecount++;
										}
										else {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
											onlinecount++;
										}
									}
								}
								if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oGuild Name : " + ((PlayerInfo*)(peer->data))->guild + "``|\nadd_textbox|`oStatement : " + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + "/15 members|\nadd_textbox|`oGuild Level : " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(((PlayerInfo*)(peer->data))->guildexp) + "|\n\nadd_spacer|small|\nadd_button|leavefromguild|`4Abandon Guild``|0|0|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_button|editguildstatement|`wEdit Guild Statement``|0|0|\n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button|backsocialportal|`wBack``|0|0|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oGuild Name : " + ((PlayerInfo*)(peer->data))->guild + "``|\nadd_textbox|`oStatement : " + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + "/15 members|\nadd_textbox|`oGuild Level : " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(((PlayerInfo*)(peer->data))->guildexp) + "|\n\nadd_spacer|small|\nadd_button|leavefromguild|`4Leave from guild``|0|0|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0| \n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button|backsocialportal|`wBack``|0|0|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}


							if (btn == "guildrewards")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}


							if (btn == "lbot")
							{
								((PlayerInfo*)(peer->data))->cloth_shirt = 1780;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 20; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)(peer->data))->x + 10, ((PlayerInfo*)(peer->data))->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lwings")
							{
								((PlayerInfo*)(peer->data))->cloth_back = 1784;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								((PlayerInfo*)(peer->data))->canDoubleJump = true;
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)(peer->data))->x + 10, ((PlayerInfo*)(peer->data))->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "ldrag")
							{
								((PlayerInfo*)(peer->data))->cloth_hand = 1782;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 21; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)(peer->data))->x + 10, ((PlayerInfo*)(peer->data))->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lsky")
							{
								((PlayerInfo*)(peer->data))->cloth_back = 7734;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								((PlayerInfo*)(peer->data))->canDoubleJump = true;
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)(peer->data))->x + 10, ((PlayerInfo*)(peer->data))->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lwhip")
							{
								((PlayerInfo*)(peer->data))->cloth_hand = 6026;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 76; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oThe truth is yours! (`oWhip of Truth mod added`o)"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
										((PlayerInfo*)(peer->data))->effect = 8421452;
										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)(peer->data))->x + 10, ((PlayerInfo*)(peer->data))->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lkat")
							{
								((PlayerInfo*)(peer->data))->cloth_hand = 2592;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 43; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNone can stand against you! (`oLegendary Swordsmaster mod added`o)"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
										((PlayerInfo*)(peer->data))->effect = 8421399;
										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)(peer->data))->x + 10, ((PlayerInfo*)(peer->data))->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "showguildzz") {

								string fg, bg, guildname, guildleader, gstatement;
								int guildlvl, guildexp;
								string guildName = ((PlayerInfo*)(peer->data))->guild;
								std::ifstream ifs("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
								if (ifs.is_open()) {
									json j;
									ifs >> j;

									gstatement = j["GuildStatement"];
									fg = j["foregroundflag"];
									bg = j["backgroundflag"];
									guildname = j["GuildName"];
									guildlvl = j["GuildLevel"];
									guildexp = j["GuildExp"];
									guildleader = j["Leader"];

									vector<string> gmlists;

									for (int i = 0; i < j["Member"].size(); i++) {
										gmlists.push_back(j["Member"][i]);
									}
									((PlayerInfo*)(peer->data))->guildmatelist = gmlists;

								}

								int block = stoi(fg);
								int wallpaper = stoi(bg);
								int flag = ((65536 * wallpaper) + block);

								string onlinefrnlist = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->guildmatelist.size();
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->guildmatelist.begin(), ((PlayerInfo*)(peer->data))->guildmatelist.end(), name) != ((PlayerInfo*)(peer->data))->guildmatelist.end()) {
										if (((PlayerInfo*)(currentPeer->data))->rawName == guildleader) {
											onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
											onlinecount++;
										}
										else {
											onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + "``|0|0|";
											onlinecount++;
										}
									}

								}
								if (guildleader == ((PlayerInfo*)(peer->data))->rawName) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + std::to_string(guildlvl) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(guildexp) + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_button|editguildstatement|`wEdit Guild Statement``|0|0|\nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + onlinefrnlist + "\nadd_spacer|small|\nadd_button|backsocialportal|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + std::to_string(guildlvl) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(guildexp) + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0| \nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + onlinefrnlist + "\nadd_spacer|small|\nadd_button|backsocialportal|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;

								}

							}

							if (btn == "editguildstatement")
							{

							}

							if (btn == "leavefromguild")
							{
								if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`8Are you sure?``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAfter `4Abandon `ofrom the guild, all guild's members will be `4kicked out `oand the guild will be `4destroyed`o!|left|8|\nadd_spacer|small|\nadd_button|confirmguildleaderleave|`4Yes, Abandon!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}


								else {



									std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
									if (ifff.fail()) {
										ifff.close();
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a jar!"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load

									vector<string> gmlist;

									for (int i = 0; i < j["Member"].size(); i++) {
										gmlist.push_back(j["Member"][i]);
									}

									gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->rawName), gmlist.end());


									j["Member"] = gmlist; //edit


									std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
											updateGuild(currentPeer);
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->rawName + "`o has left the guild!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
											updateInvis(currentPeer);
										}

									}



									((PlayerInfo*)(peer->data))->guildBg = 0;
									((PlayerInfo*)(peer->data))->guildFg = 0;
									((PlayerInfo*)(peer->data))->guildLeader = "";
									((PlayerInfo*)(peer->data))->guild = "";
									((PlayerInfo*)(peer->data))->guildStatement = "";
									//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
									((PlayerInfo*)(peer->data))->guildlast = "";
									((PlayerInfo*)(peer->data))->lastgm = "";
									((PlayerInfo*)(peer->data))->lastgmname = "";
									((PlayerInfo*)(peer->data))->joinguild = false;
									((PlayerInfo*)(peer->data))->lastgmworld = "";
									((PlayerInfo*)(peer->data))->guildMembers.clear();
									updateInvis(peer);


									std::ifstream iffff2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj2;

									if (iffff2.fail()) {
										iffff2.close();
										continue;
									}
									if (iffff2.is_open()) {


									}

									iffff2 >> jj2; //load

									std::ofstream oo2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo2.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									jj2["guild"] = "";
									jj2["joinguild"] = false;
									oo2 << jj2 << std::endl;




								}
							}

							if (btn == "confirmguildleaderleave")
							{
								//Player::OnConsoleMessage(peer, "Abandoned");

								std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
								if (ifff.fail()) {
									ifff.close();
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a jar!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								vector<string> gmlist;

								for (int i = 0; i < j["Member"].size(); i++) {
									gmlist.push_back(j["Member"][i]);
								}





								const int result = remove(("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json").c_str());
								if (result == 0) {
									cout << ((PlayerInfo*)(peer->data))->rawName + " abandoned from the guild" << endl;
								}
								else {
									cout << "ERROR deleting file, when " << ((PlayerInfo*)(peer->data))->rawName + " abandoned from the guild" << endl;
									cout << "His guild is: guilds/" << PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) << ".json" << endl;
									cout << (("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json").c_str());
								}

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (find(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != gmlist.end()) {

										((PlayerInfo*)(currentPeer->data))->guildBg = 0;
										((PlayerInfo*)(currentPeer->data))->guildFg = 0;
										((PlayerInfo*)(currentPeer->data))->guildLeader = "";
										((PlayerInfo*)(currentPeer->data))->guild = "";
										((PlayerInfo*)(currentPeer->data))->guildStatement = "";
										//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
										((PlayerInfo*)(currentPeer->data))->guildlast = "";
										((PlayerInfo*)(currentPeer->data))->lastgm = "";
										((PlayerInfo*)(currentPeer->data))->lastgmname = "";
										((PlayerInfo*)(currentPeer->data))->joinguild = false;
										((PlayerInfo*)(currentPeer->data))->lastgmworld = "";
										((PlayerInfo*)(currentPeer->data))->guildMembers.clear();
										updateInvis(currentPeer);

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `4Unfortunately, `obut guild's leader `4abandoned `ofrom the guild and you were `4kicked out`o."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}

								for (int i = 0; i < gmlist.size(); i++)
								{
									std::ifstream iffff2("players/" + gmlist[i] + ".json");

									json jj2;

									if (iffff2.fail()) {
										iffff2.close();
										continue;
									}
									if (iffff2.is_open()) {


									}

									iffff2 >> jj2; //load

									std::ofstream oo2("players/" + gmlist[i] + ".json");
									if (!oo2.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									jj2["guild"] = "";
									jj2["joinguild"] = false;
									oo2 << jj2 << std::endl;
								}

							}

							if (btn == "guildoffline") {


								string onlinegmlist = "";
								string offname, offlinegm;
								string grole = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->guildMembers.size();

								string gstatement = ((PlayerInfo*)(peer->data))->guildLeader;
								string bg = std::to_string(((PlayerInfo*)(peer->data))->guildBg);
								string fg = std::to_string(((PlayerInfo*)(peer->data))->guildFg);
								string guildname = ((PlayerInfo*)(peer->data))->guild;
								string guildleader = ((PlayerInfo*)(peer->data))->guildLeader;
								string guildlvl = "0";
								string guildexp = "0";
								ENetPeer* currentPeer;
								vector<string>offlineguild = ((PlayerInfo*)(peer->data))->guildMembers;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
											onlinecount++;
										}
										else {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
											onlinecount++;
											offlineguild.erase(std::remove(offlineguild.begin(), offlineguild.end(), name), offlineguild.end());
										}
									}
								}
								for (std::vector<string>::const_iterator i = offlineguild.begin(); i != offlineguild.end(); ++i) {
									offname = *i;
									offlinegm += "\nadd_button|offlinegm_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";

								}
								/*if (onlinecount > 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\n\nadd_spacer|small|\nadd_textbox|All of your friend are online!|\n\nadd_spacer|small| \n\nadd_spacer|small| \nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {*/
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + guildlvl + "|\nadd_textbox|`oGuild Exp : " + guildexp + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small| \nadd_button|goguildhome|`wGo to Guild Home``|0|0| \nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + offlinegm + "\nadd_spacer|small|\nadd_button|showguild|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}
							if (btn == "goguildhome") {
								string gworld;
								string guildName = ((PlayerInfo*)(peer->data))->guild;
								std::ifstream ifs("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
								if (ifs.is_open()) {
									json j;
									ifs >> j;

									gworld = j["GuildWorld"];

								}
								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								joinWorld(peer, gworld, 0, 0);
							}
							if (btn == "backtoexit") {
								if (((PlayerInfo*)(peer->data))->isInGame == true)
								{
									((PlayerInfo*)(peer->data))->isInGame = false;
									match.playersInGame--;
									sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
									((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
									sendWorldOffers(peer);
									Player::PlayAudio(peer, "audio/door_shut.wav", 0);
								}
							}
							if (btn == "worldPublic") {

								if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) getPlyersWorld(peer)->isPublic = true;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. Set world to: Public!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "createguildinfo") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guilds|left|5814|\nadd_label|small|`9Welcome to Grow Guilds where you can create a Guild! With a Guild you can level up the Guild to add more members!``|left|4|\n\nadd_spacer|small|\nadd_textbox|`9You will be charged `6250,000 `9Gems!``|\nadd_spacer|small|\nadd_button|createguild|`oCreate a Guild``|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								/*	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1 Guilds are going to work on update 3.0!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;*/
							}

							if (btn == "createguild") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild Creation``|left|5814|\nadd_spacer|small|\nadd_text_input|gname|Guild Name: ||20|\nadd_text_input|gstatement|Guild Statement: ||100|\nadd_text_input|ggcflagbg|`oGuild Flag Background ID:``||5|\nadd_text_input|ggcflagfg|`oGuild Flag Foreground ID:``||5|\nadd_spacer|small|\nadd_textbox|`oConfirm your guild settings by selecting `2Create Guild `obelow to create your guild.|\nadd_spacer|small|\nadd_textbox|`8Remember`o: A guild can only be created in a world owned by you and locked with a `5World Lock`o!|\nadd_spacer|small|\nadd_textbox|`4Warning! `oThe guild name cannot be changed once you have confirmed the guild settings!|\nadd_quick_exit|\nadd_spacer|small|\nend_dialog|guildconfirm|Cancel|Create Guild|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							if (btn.substr(0, 10) == "offlinegm_") {
								((PlayerInfo*)(peer->data))->lastgm = btn.substr(10, cch.length() - 10 - 1);
								if (btn.substr(10, cch.length() - 10 - 1) == ((PlayerInfo*)(peer->data))->guildLeader) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgm + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is `4offline`o.``|\nadd_spacer|small| \nadd_button|guildoffline|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgm + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|removegmoffline|`oKick from the guild``|0|0|\nadd_button|guildoffline|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}

							if (btn == "removegmoffline") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
										std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a jar!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load

										vector<string> gmlist;

										for (int i = 0; i < j["Member"].size(); i++) {
											gmlist.push_back(j["Member"][i]);
										}

										gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->lastgm), gmlist.end());


										j["Member"] = gmlist; //edit

										std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}

										o << j << std::endl;



										std::ifstream iffff2("players/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->lastgm) + ".json");

										json jj2;

										if (iffff2.fail()) {
											iffff2.close();
											continue;
										}
										if (iffff2.is_open()) {


										}

										iffff2 >> jj2; //load

										std::ofstream oo2("players/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->lastgm) + ".json");
										if (!oo2.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										jj2["guild"] = "";
										jj2["joinguild"] = false;
										oo2 << jj2 << std::endl;



										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->lastgm + "`o has been kicked from the guild!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Guild Member removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is no longer in the guild.``|\n\nadd_spacer|small|\nadd_button|guildportalbutton|`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}
							if (btn == "removegmonline") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastgm) {
										std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a jar!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load

										vector<string> gmlist;

										for (int i = 0; i < j["Member"].size(); i++) {
											gmlist.push_back(j["Member"][i]);
										}

										gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->lastgm), gmlist.end());


										j["Member"] = gmlist; //edit

										std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}

										o << j << std::endl;
										((PlayerInfo*)(currentPeer->data))->guildBg = 0;
										((PlayerInfo*)(currentPeer->data))->guildFg = 0;
										((PlayerInfo*)(currentPeer->data))->guildLeader = "";
										((PlayerInfo*)(currentPeer->data))->guild = "";
										((PlayerInfo*)(currentPeer->data))->guildStatement = "";
										//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
										((PlayerInfo*)(currentPeer->data))->guildlast = "";
										((PlayerInfo*)(currentPeer->data))->lastgm = "";
										((PlayerInfo*)(currentPeer->data))->lastgmname = "";
										((PlayerInfo*)(currentPeer->data))->joinguild = false;
										((PlayerInfo*)(currentPeer->data))->lastgmworld = "";
										((PlayerInfo*)(currentPeer->data))->guildMembers.clear();
										updateInvis(currentPeer);
										updateInvis(peer);


										std::ifstream iffff2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

										json jj2;

										if (iffff2.fail()) {
											iffff2.close();
											continue;
										}
										if (iffff2.is_open()) {


										}

										iffff2 >> jj2; //load

										std::ofstream oo2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
										if (!oo2.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										jj2["guild"] = "";
										jj2["joinguild"] = false;
										oo2 << jj2 << std::endl;


										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `oYou have been kicked from the guild by `2" + ((PlayerInfo*)(peer->data))->displayName + "`o."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
									if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
										updateGuild(currentPeer);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->lastgmname + "`o has been kicked from the guild!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Guild Member removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is no longer in the guild.``|\n\nadd_spacer|small|\nadd_button|guildportalbutton|`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}



							if (btn == "skiptutorial") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Now create your GrowID!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								int x = ((PlayerInfo*)(peer->data))->x;
								int y = ((PlayerInfo*)(peer->data))->y;
								GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 48), x, y));

								ENetPacket* packetd = enet_packet_create(psp.data,
									psp.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packetd);
							}
							if (btn == "tutorial") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wChoose destination|left|6128|\nadd_spacer|small|\nadd_button|how2item|`wHow to get any item?|0|0|\nadd_button|how2gem|`wHow to get `2Gems`w?|0|0|\nadd_button|how2level|`wHow to get `2Level`w?|0|0|\nadd_label|small|`wTo see all commands type `2/help `wor `2/?`w.|left|\nadd_spacer|small|\nadd_button|skiptutorial|`2Thanks|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "how2item") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get any item?|left|1970|\nadd_label|small|`wAlmost every item is free!|left|\nadd_spacer|small|\nadd_label|small|`wType `2/find `wand enter the item name to get item!|left|\nadd_spacer|small|\nadd_button|backtutorial|`wBack!|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "how2gem") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get gem?|left|112|\nadd_spacer|small|\nadd_label|small|`wBreaking blocks will give you `21-5 `wgems!|left|\nadd_spacer|small|\nadd_label|small|`wYou can buy items with gems!|left|\nadd_spacer|\nadd_button|backtutorial|`wBack!|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "how2level") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get level?|left|18|\nadd_spacer|small|\nadd_label|small|`wBreaking blocks will give you `21 `wxp collect `2300 `wxp to level up!|left|\nadd_spacer|small|\nadd_label|small|`wYou can get `1Blue Name `wwith being 100 level!|left|\nadd_spacer|\nadd_button|backtutorial|`wBack!|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "confirmcreateguild") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 249000)
								{
									int gemcalc10k = b - 250000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
									GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You created guild!"));
									//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
									ENetPacket* packetto = enet_packet_create(pto.data,
										pto.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetto);
									delete pto.data;



									string guildName = ((PlayerInfo*)(peer->data))->createGuildName;
									string guildStatement = ((PlayerInfo*)(peer->data))->createGuildStatement;
									string fixedguildName = PlayerDB::getProperName(guildName);
									string guildFlagbg = ((PlayerInfo*)(peer->data))->createGuildFlagBg;
									string guildFlagfg = ((PlayerInfo*)(peer->data))->createGuildFlagFg;

									//guildmem.push_back(((PlayerInfo*)(peer->data))->rawName);

									std::ofstream o("guilds/" + fixedguildName + ".json");
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									json j;
									vector<string> test1s;
									vector<string>test2s;

									((PlayerInfo*)(peer->data))->guildMembers.push_back(((PlayerInfo*)(peer->data))->rawName);
									j["GuildName"] = ((PlayerInfo*)(peer->data))->createGuildName;
									j["GuildRawName"] = fixedguildName;
									j["GuildStatement"] = ((PlayerInfo*)(peer->data))->createGuildStatement;
									j["Leader"] = ((PlayerInfo*)(peer->data))->rawName;
									j["Co-Leader"] = test1s;
									j["Elder-Leader"] = test2s;
									j["Member"] = ((PlayerInfo*)(peer->data))->guildMembers;
									j["GuildLevel"] = 0;
									j["GuildExp"] = 0;
									j["GuildWorld"] = ((PlayerInfo*)(peer->data))->currentWorld;
									j["backgroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagBg);
									j["foregroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagFg);
									o << j << std::endl;







									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;

									if (iffff.fail()) {
										iffff.close();
										continue;
									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load

									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									jj["guild"] = guildName;
									jj["joinguild"] = true;
									oo << jj << std::endl;






									updateInvis(peer);


									((PlayerInfo*)(peer->data))->guild = guildName;
									((PlayerInfo*)(peer->data))->joinguild = true;
									for (int i = 0; i < world->width * world->height; i++)
									{

										if (world->items[i].foreground == 242) {
											world->items[i].foreground = 5814;
										}
									}
									Player::OnAddNotification(peer, "`2You successfully created a guild!", "audio/hub_open.wav", "interface/science_button.rttex");

									enet_peer_disconnect_later(peer, 0);

								}
								else {
									GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You don't have enough gems."));
									//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
									ENetPacket* packetto = enet_packet_create(pto.data,
										pto.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetto);
									delete pto.data;
								}
							}
							if (btn == "backtutorial") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wChoose destination|left|6128|\nadd_spacer|small|\nadd_button|how2item|`wHow to get any item?|0|0|\nadd_button|how2gem|`wHow to get `2Gems`w?|0|0|\nadd_button|how2level|`wHow to get `2Level`w?|0|0|\nadd_label|small|`wTo see all commands type `2/help `wor `2/?`w.|left|\nadd_spacer|small|\nadd_button|skiptutorial|`2Thanks|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}


							/*if (btn == "trade")
							{
								ENetPeer* currentPeerpx;

								for (currentPeerpx = server->peers;
									currentPeerpx < &server->peers[server->peerCount];
									++currentPeerpx)
								{
									if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
										continue;

									if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
									{
										GamePacket p2 = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnStartTrade"), ((PlayerInfo*)(currentPeerpx->data))->netID), 1));

										//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;

										/*GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTradeStatus"), "Trader"));

										//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
										ENetPacket * packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet3);
										delete p3.data;
									}
								}
							}*/








































































							if (btn == "enableaap")
							{

							}
							if (btn == "dotradedialog")
							{
								//\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Menu``|left|242|\nadd_label|small|\nadd_button_with_icon|dotrade|Do the Trade!|noflags|1424||\nadd_button|decline|`4Cancel/Decline|noflags||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "decline")
							{
								string sellerName = ((PlayerInfo*)(peer->data))->lastSeller;
								string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld;
								int gemsforworld = ((PlayerInfo*)(peer->data))->lastTradeAmount;

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Player `3'" + ((PlayerInfo*)(peer->data))->rawName + "'`4 declined `2your world '" + sellingworld + "'trading!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;

										((PlayerInfo*)(currentPeer->data))->lastSeller = "";
										((PlayerInfo*)(currentPeer->data))->lastSellWorld = "";
										((PlayerInfo*)(currentPeer->data))->lastTradeAmount = 99999999999;
										((PlayerInfo*)(currentPeer->data))->lastBuyer = "";

										break;
									}
								}


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully `4decline`2 this world called '" + sellingworld + "' trading"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								((PlayerInfo*)(peer->data))->lastSeller = "";
								((PlayerInfo*)(peer->data))->lastSellWorld = "";
								((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
								((PlayerInfo*)(peer->data))->lastBuyer = "";

							}
							if (btn == "dotrade")
							{


								string sellerName = ((PlayerInfo*)(peer->data))->lastSeller;
								string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld;
								int gemsforworld = ((PlayerInfo*)(peer->data))->lastTradeAmount;
								string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;




								ifstream fdseller("gemdb/" + sellerName + ".txt");
								ifstream fdbuyer("gemdb/" + lastbuyerName + ".txt");
								int nowseller;
								int nowbuyer;
								fdseller >> nowseller;
								fdbuyer >> nowbuyer;
								fdseller.close();
								fdbuyer.close();

								if (nowbuyer < gemsforworld)
								{
									GamePacket pError = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You don't how enought gems`3 to buy '`2" + sellingworld + "`3' world for `2" + to_string(gemsforworld) + "`3 gems"));
									ENetPacket* packetError = enet_packet_create(pError.data,
										pError.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetError);
									delete pError.data;


									((PlayerInfo*)(peer->data))->lastSeller = "";
									((PlayerInfo*)(peer->data))->lastSellWorld = "";
									((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
									((PlayerInfo*)(peer->data))->lastBuyer = "";

									ENetPeer* currentPeerError;

									for (currentPeerError = server->peers;
										currentPeerError < &server->peers[server->peerCount];
										++currentPeerError)
									{
										if (currentPeerError->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeerError->data))->rawName == sellerName) {
											if (((PlayerInfo*)(currentPeerError->data))->haveGrowId == false) continue;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Player `3" + ((PlayerInfo*)(peer->data))->rawName + "`4 doesn't have '`8" + to_string(gemsforworld) + "`7' to buy your world '`8" + sellingworld + "'"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeerError, 0, packet);
											delete p.data;

											((PlayerInfo*)(currentPeerError->data))->lastSeller = "";
											((PlayerInfo*)(currentPeerError->data))->lastSellWorld = "";
											((PlayerInfo*)(currentPeerError->data))->lastTradeAmount = 99999999999;
											((PlayerInfo*)(currentPeerError->data))->lastBuyer = "";

											break;
										}
									}


									continue;
								}

								nowseller += gemsforworld;
								nowbuyer -= gemsforworld;

								ofstream ofseller("gemdb/" + sellerName + ".txt");
								ofseller << nowseller;
								ofseller.close();

								ofstream ofbuyer("gemdb/" + lastbuyerName + ".txt");
								ofbuyer << nowbuyer;
								ofbuyer.close();



								string text = "action|play_sfx\nfile|audio/keypad_hit.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);


								ENetPacket* packettrd = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeerp;

								for (currentPeerp = server->peers;
									currentPeerp < &server->peers[server->peerCount];
									++currentPeerp)
								{
									if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeerp))
										enet_peer_send(currentPeerp, 0, packettrd);
								}


								/*	GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowbuyer));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;*/

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowseller));
										ENetPacket* packetpp2 = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packetpp2);
										delete pp.data;

										((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully sold your world called '`8" + sellingworld + "`2' for `8" + to_string(gemsforworld) + "`2 gems"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;

										/*	GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(currentPeer->data))->tankIDName));
											memcpy(p7.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4); // ffloor
											((PlayerInfo*)(currentPeer->data))->displayName = ((PlayerInfo*)(currentPeer->data))->displayNamebackup;

											ENetPacket* packet7 = enet_packet_create(p7.data,
												p7.len,
												ENET_PACKET_FLAG_RELIABLE);

											delete p7.data;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer)) {
													if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
														enet_peer_send(currentPeer, 0, packet7);
													}
												}
											}*/


										((PlayerInfo*)(currentPeer->data))->lastSeller = "";
										((PlayerInfo*)(currentPeer->data))->lastSellWorld = "";
										((PlayerInfo*)(currentPeer->data))->lastTradeAmount = 99999999999;
										((PlayerInfo*)(currentPeer->data))->lastBuyer = "";


										sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
										sendWorldOffers(currentPeer);
										((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";

										break;
									}
								}




								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowbuyer));
								ENetPacket* packetpp2 = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp2);
								delete pp.data;

								WorldInfo* boughtworld = getPlyersWorld(peer);
								boughtworld->owner = ((PlayerInfo*)(peer->data))->rawName;
								boughtworld->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
								boughtworld->isPublic = false;
								((PlayerInfo*)(peer->data))->worldsowned.push_back(sellingworld);


								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully bought this world called '`8" + sellingworld + "`2' for `8" + to_string(gemsforworld) + "`2 gems"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								/*	GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2 " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									((PlayerInfo*)(peer->data))->displayName = "`2 " + ((PlayerInfo*)(peer->data))->tankIDName;

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									delete p7.data;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											{
												enet_peer_send(currentPeer, 0, packet7);

											}
										}
									}*/

								((PlayerInfo*)(peer->data))->lastSeller = "";
								((PlayerInfo*)(peer->data))->lastSellWorld = "";
								((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
								((PlayerInfo*)(peer->data))->lastBuyer = "";

								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								sendWorldOffers(peer);
								((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
							}


							if (btn == "btnitemstrade")
							{

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);


								delete p2.data;


							}



							if (btn == "btntradeworld") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Options``||18||\nadd_textbox|`oHow many gems for this world?: |\nadd_text_input|worldoffer|||7|\nend_dialog|reqoffer|Cancel|SEND TRADE|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}
								else
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This feature is available only for the owner of the world!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "worldPrivate") {
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
										getPlyersWorld(peer)->isPublic = false;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. Set world to: Private!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
							}
							if (btn == "allowMod") {
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
									{
										getPlyersWorld(peer)->allowMod = true;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. World flags modified -> ALLOW-MOD = TRUE!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
							}
							if (btn == "allowMod1")
							{
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {

									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
										getPlyersWorld(peer)->allowMod = false;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. World flags modified -> ALLOW-MOD = FALSE!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;


										ENetPeer* currentPeer;


										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
												if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld) {

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Owner `ohas `4disabled `5Mod-Noclip `oin this world."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;


													if (((PlayerInfo*)(currentPeer->data))->rawName != getPlyersWorld(peer)->owner && ((PlayerInfo*)(currentPeer->data))->adminLevel < 777)
													{
														((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = false;
														((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
														sendClothes(currentPeer);
														sendState(currentPeer);


														((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = true;
													}

												}
											}
										}
									}
								}
							}
							if (isFindDialog && btn.substr(0, 4) == "tool") {

								int id = atoi(btn.substr(4, btn.length() - 4).c_str());
								size_t invsize = ((PlayerInfo*)(peer->data))->currentInventorySize;

								if (id == 1486 || id == 6802) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Oops!|left|1486|\nadd_spacer|small|\nadd_textbox|`oSorry! You must `2purchase `othis item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;




								}






								if (id == 6952) {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Magic Machine``|left|6952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Really heavy and powerfull machine! `9Who knows what it does?... But the creators are sure that it will lead to profit!|\nadd_spacer|small|\nadd_button|buyatm|`7Buy `9Magic Machine `7[`46`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}



								if (id == 1008) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eATM `3Machine``|left|1008|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`3ATM Machines `1Can give you over `45-10 `2Gems `1Per PUNCH`^!|\nadd_spacer|small|\nadd_button|buyatm|`7Buy `eATM Machine `410 `2World Locks!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}



















































								if (id == 9058) {
									if (((PlayerInfo*)(peer->data))->adminLevel >= 1000) {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Sorry!|left|1432|\nadd_spacer|small|\nadd_textbox|`oThis `2Item `o Is not available for players!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;


										continue;
									}

									else {

										bool success = true;
										SaveShopsItem(9058, 1, peer, success);
										if (!success)continue;
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have received `4Cursed Katana`0!"), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
										continue;


									}


								}



								if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {


									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1432|\nadd_spacer|small|\nadd_textbox|`oSorry! Your inventory is full! You can purchase an inventory upgrade in the shop.|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;
								}

								bool iscontains = false;
								for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
								{


									if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == id) {


										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1432|\nadd_spacer|small|\nadd_textbox|`oSorry! Your inventory already contains this item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;


										iscontains = true;
									}
								}

								if (iscontains)
								{
									iscontains = false;
									continue;
								}












								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1Item `4" + to_string(id) + " `1Has been `2Added `1To your inventory!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet);
								delete p.data;

								/* remove inventory	if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {
										PlayerInventory inventory;
										InventoryItem item;
										item.itemID = id;
										item.itemCount = 200;
										inventory.items.push_back(item);
										item.itemCount = 1;
										item.itemID = 18;
										inventory.items.push_back(item);
										item.itemID = 32;
										inventory.items.push_back(item);
										((PlayerInfo*)(peer->data))->inventory = inventory;
										}
										*/

										//find iterptimas i json


								SaveFindsItem(id, 200, peer);

								/*InventoryItem item;
								item.itemID = id;
								item.itemCount = 200;
								((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

							sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);*/
							}



							else if (isFindDialog) {
								string itemLower2;
								vector<ItemDefinition> itemDefsfind;
								for (char c : itemFind) if (c < 0x20 || c>0x7A) goto SKIPFind;
								if (itemFind.length() < 3) goto SKIPFind3;
								for (const ItemDefinition& item : itemDefs)
								{
									string itemLower;
									for (char c : item.name) if (c < 0x20 || c>0x7A) goto SKIPFind2;
									if (!(item.id % 2 == 0)) goto SKIPFind2;
									itemLower2 = item.name;
									std::transform(itemLower2.begin(), itemLower2.end(), itemLower2.begin(), ::tolower);
									if (itemLower2.find(itemLower) != std::string::npos) {
										itemDefsfind.push_back(item);
									}
								SKIPFind2:;
								}
							SKIPFind3:;
								string listMiddle = "";
								string listFull = "";

								for (const ItemDefinition& item : itemDefsfind)
								{
									string kys = item.name;
									std::transform(kys.begin(), kys.end(), kys.begin(), ::tolower);
									string kms = itemFind;
									std::transform(kms.begin(), kms.end(), kms.begin(), ::tolower);
									if (kys.find(kms) != std::string::npos)
										listMiddle += "add_button_with_icon|tool" + to_string(item.id) + "|`$" + item.name + "``|left|" + to_string(item.id) + "||\n";
								}
								if (itemFind.length() < 3) {
									listFull = "add_textbox|`4Word is less than 3 letters!``|\n";
									showWrong(peer, listFull, itemFind);
								}
								else if (itemDefsfind.size() == 0) {
									//listFull = "add_textbox|`4Found no item match!``|\nadd_spacer|small|\n";
									showWrong(peer, listFull, itemFind);

								}
								else {
									GamePacket fff = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`9Found item : " + itemFind + "``|left|3146|\nadd_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||20|\nend_dialog|findid|Cancel|Find the item!|\nadd_spacer|big|\n" + listMiddle + "add_quick_exit|\n"));
									ENetPacket* packetd = enet_packet_create(fff.data,
										fff.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetd);

									//enet_host_flush(server);
									delete fff.data;
								}
							}
						SKIPFind:;
							if (btn == "crash")
							{
								sendConsoleMsg(peer, "`8Your set was removed in order to fix the crash. You can now continue playing, before that, we will need to disconnect you `3ONCE`8.");
								((PlayerInfo*)(peer->data))->cloth_hair = 0;
								((PlayerInfo*)(peer->data))->cloth_shirt = 0;
								((PlayerInfo*)(peer->data))->cloth_pants = 0;
								((PlayerInfo*)(peer->data))->cloth_feet = 0;
								((PlayerInfo*)(peer->data))->cloth_face = 0;
								((PlayerInfo*)(peer->data))->cloth_hand = 0;
								((PlayerInfo*)(peer->data))->cloth_back = 0;
								((PlayerInfo*)(peer->data))->cloth_mask = 0;
								((PlayerInfo*)(peer->data))->cloth_necklace = 0;
								((PlayerInfo*)(peer->data))->cloth_ances = 0;
								sendClothes(peer);
								enet_peer_disconnect_later(peer, 0);
							}


							if (btn == "effect0")
							{
								((PlayerInfo*)(peer->data))->effect = -1; // punch

							}
							if (btn == "effect1")
							{
								((PlayerInfo*)(peer->data))->effect = -500;	 // death ray	

							}
							if (btn == "effect2")
							{
								((PlayerInfo*)(peer->data))->effect = 8421381; // shotgun
								sendState(peer); //here
								sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
							}
							if (btn == "effect3")
							{
								((PlayerInfo*)(peer->data))->effect = 8420386; // Tank
							}
							if (btn == "effect4")
							{
								((PlayerInfo*)(peer->data))->effect = 8420396; // Silver Bow
							}
							if (btn == "effect5")
							{
								((PlayerInfo*)(peer->data))->effect = 8420389; // Rock Hammer
							}
							if (btn == "effect6")
							{
								((PlayerInfo*)(peer->data))->effect = 8421382; // Dragon
							}
							if (btn == "effect7")
							{
								((PlayerInfo*)(peer->data))->effect = -979; // egg
							}
							if (btn == "effect8")
							{
								((PlayerInfo*)(peer->data))->effect = -1017; // idk
							}
							if (btn == "effect9")
							{
								((PlayerInfo*)(peer->data))->effect = -991; // ice drag
							}
							if (btn == "effect10")
							{
								((PlayerInfo*)(peer->data))->effect = -1002; // Focused Eyes
							}
							if (btn == "effect11")
							{
								((PlayerInfo*)(peer->data))->effect = -991; // icedrag
							}
							if (btn == "effect12")
							{
								((PlayerInfo*)(peer->data))->effect = -997; // chaos curse wand
							}
							if (btn == "effect13")
							{
								((PlayerInfo*)(peer->data))->effect = 8420394;
							}
							if (btn == "effect14")
							{
								((PlayerInfo*)(peer->data))->effect = 8421391;
							}
							if (btn == "effect15")
							{
								((PlayerInfo*)(peer->data))->effect = 8421391; // battle trout
							}
							if (btn == "effect16")
							{
								((PlayerInfo*)(peer->data))->effect = -1008; // fiesta
							}
							if (btn == "effect17")
							{
								((PlayerInfo*)(peer->data))->effect = -1007; // squirt
							}
							if (btn == "effect18")
							{
								((PlayerInfo*)(peer->data))->effect = -1006; // key tar
							}
							if (btn == "effect19")
							{
								((PlayerInfo*)(peer->data))->effect = -940; // drag V2
							}
							if (btn == "effect20")
							{
								((PlayerInfo*)(peer->data))->effect = -1004; // lbot
							}
							if (btn == "effect21")
							{
								((PlayerInfo*)(peer->data))->effect = -1003; // l drag
							}
							if (btn == "effect22")
							{
								((PlayerInfo*)(peer->data))->effect = -950; // fiesta
							}
							if (btn == "effect23")
							{
								((PlayerInfo*)(peer->data))->effect = -996; // Green Swe
							}
							if (btn == "effect24")
							{
								((PlayerInfo*)(peer->data))->effect = -977; // Gungir
							}
							if (btn == "effect25")
							{
								((PlayerInfo*)(peer->data))->effect = -964; // Blue Soul
							}
							if (btn == "effect26")
							{
								((PlayerInfo*)(peer->data))->effect = -1011; //Black Shadow Effect

							}
							if (btn == "effect27")
							{
								((PlayerInfo*)(peer->data))->effect = -992; // Black Crystal
							}
							if (btn == "effect28")
							{
								((PlayerInfo*)(peer->data))->effect = -981; // l katana
							}
							if (btn == "effect29")
							{
								((PlayerInfo*)(peer->data))->effect = -978; // Black Holes
							}
							if (btn == "effect30")
							{
								((PlayerInfo*)(peer->data))->effect = 8420397; // Pineapple Blur Effect
							}
							if (btn == "effect31")
							{
								((PlayerInfo*)(peer->data))->effect = -995; // digger spade
							}
							if (btn == "effect32")
							{
								((PlayerInfo*)(peer->data))->effect = 0; //
							}
							if (btn == "effect33")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect34")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect35")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect36")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect37")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect38")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect39")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect40")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect41")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect42")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect43")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect44")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect45")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect46")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect47")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect48")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect49")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect50")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect51")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect52")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect53")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect54")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect55")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect56")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect57")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect58")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect59")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect60")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect61")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect62")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect63")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect64")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect65")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect66")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect67")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect67")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect68")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect69")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect70")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect71")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect72")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect73")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect74")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect75")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect76")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect77")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect78")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect79")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect80")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect81")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect82")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect83")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect84")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect85")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect86")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect87")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect88")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect89")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect90")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect91")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect92")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect93")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect94")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect95")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect96")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect97")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect98")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect99")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect100")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect101")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect102")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect103")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect104")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect105")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect106")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect107")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect108")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect109")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect110")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect111")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect112")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect113")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect114")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							sendState(peer); //here
							sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

							if (btn == "suspend")
							{
								if ((((PlayerInfo*)(peer->data))->lastInfo == "chandra") || ((PlayerInfo*)(peer->data))->lastInfo == "jar") {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4banned `w" + ((PlayerInfo*)(peer->data))->lastInfoname + " `#** `o(`4/rules `oto see the rules!)"));
									ENetPeer* currentPeer;

									cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used SUSPEND in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used SUSPEND on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									wrench.close();

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;


											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from KortexPS for 730 days"), "audio/hub_open.wav"), 0));
											ENetPacket* packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom KortexPS for 730 days"));
											ENetPacket* packet3 = enet_packet_create(ps3.data,
												ps3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet3);
											GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
											//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packetto = enet_packet_create(pto.data,
												pto.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetto);
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {

												PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
												p->ban = 1;
												string username = PlayerDB::getProperName(p->rawName);

												std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

												if (ifff.fail()) {
													ifff.close();


												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load

												int effect = p->effect;
												j["isBanned"] = 1;

												//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


												std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}

												o << j << std::endl;

												string bannamed = str.substr(5, cch.length() - 5 - 1);
												std::ofstream outfile("bans/" + bannamed + ".txt");

												outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

												outfile.close();
											}


											enet_peer_disconnect_later(currentPeer, 0);


										}
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet7);

										//enet_host_flush(server);
									}

								}

							}
							if (btn == "banbysystem")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4AUTO-BANNED BY SYSTEM **"));
									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from KortexPS for 730 days"), "audio/hub_open.wav"), 0));
											ENetPacket* packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom KortexPS for 730 days"));
											ENetPacket* packet3 = enet_packet_create(ps3.data,
												ps3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet3);
											GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
											//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packetto = enet_packet_create(pto.data,
												pto.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetto);
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {

												PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
												p->ban = 1;
												string username = PlayerDB::getProperName(p->rawName);

												std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

												if (ifff.fail()) {
													ifff.close();


												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load

												int effect = p->effect;
												j["isBanned"] = 1;

												//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


												std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}

												o << j << std::endl;

												string bannamed = str.substr(5, cch.length() - 5 - 1);
												std::ofstream outfile("bans/" + bannamed + ".txt");

												outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

												outfile.close();
											}


											enet_peer_disconnect_later(currentPeer, 0);


										}
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet7);

										//enet_host_flush(server);
									}

								}

							}
							if (btn == "ban7")
							{
#pragma warning (disable : 4996)
								// current date/time based on current system
								time_t now = time(0);




								cout << now << endl;


								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{


									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wFeature doesnt work yet, in the next update it will work for sure!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}

									}
								}
							}
							if (btn == "disconnect")
							{

								if ((((PlayerInfo*)(peer->data))->lastInfo == "chandra") || ((PlayerInfo*)(peer->data))->lastInfo == "jar") {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{
									cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used DISCONNECT in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used DISCONNECT on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									wrench.close();

									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Fake disconnected player from server."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											enet_peer_disconnect_later(currentPeerp, 0);
										}
									}
								}
							}
							if (btn == "freeze")
							{


								if ((((PlayerInfo*)(peer->data))->lastInfo == "chandra") || ((PlayerInfo*)(peer->data))->lastInfo == "jar") {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}


								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{

									cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used FREEZE in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used FREEZE on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									wrench.close();

									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											if (((PlayerInfo*)(currentPeerp->data))->isFrozen == false)
											{
												((PlayerInfo*)(currentPeerp->data))->isFrozen = true;



												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `!Freeze`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;

												((PlayerInfo*)(currentPeerp->data))->skinColor = -37500;
												sendClothes(currentPeerp);
												sendFrozenState(currentPeerp);

												GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wSHUSH... pretty cold here. `!(Frozen)`w mod added."));
												ENetPacket* packetf = enet_packet_create(pf.data,
													pf.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeerp, 0, packetf);
												delete pf.data;
											}
											else
											{
												((PlayerInfo*)(currentPeerp->data))->isFrozen = false;
												sendResetState(currentPeerp);

												GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeerp->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeerp, 0, packet2);
												delete p2.data;

												((PlayerInfo*)(currentPeerp->data))->skinColor = 0x8295C3FF;
												sendClothes(currentPeerp);


												GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wLiking it warm... `!(Frozen)`w mod removed."));
												ENetPacket* packetf = enet_packet_create(pf.data,
													pf.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeerp, 0, packetf);
												delete pf.data;

												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`!Unfrozen `wplayer `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}

										}

										string text = "action|play_sfx\nfile|audio/freeze.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

										ENetPacket* packetso = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										if (isHere(peer, currentPeerp))
										{
											enet_peer_send(currentPeerp, 0, packetso);
										}
									}
								}
							}
							if (btn == "tape")
							{


								if ((((PlayerInfo*)(peer->data))->lastInfo == "chandra") || ((PlayerInfo*)(peer->data))->lastInfo == "jar") {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}


								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{

									cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used MUTE in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used MUTE on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									wrench.close();

									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave duct-taped `w" + ((PlayerInfo*)(peer->data))->lastInfoname + "`o's mouth. `#** `o(`4/rules `oto see the rules!)"));
									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet7);

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											if (((PlayerInfo*)(currentPeerp->data))->taped == false)
											{
												((PlayerInfo*)(currentPeerp->data))->taped = true;
												((PlayerInfo*)(currentPeerp->data))->isDuctaped = true;
												((PlayerInfo*)(currentPeerp->data))->cantsay = true;
												sendState(currentPeerp);



												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `btape`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											else
											{
												((PlayerInfo*)(currentPeerp->data))->taped = false;
												((PlayerInfo*)(currentPeerp->data))->isDuctaped = false;
												((PlayerInfo*)(currentPeerp->data))->cantsay = false;
												sendState(currentPeerp);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUn`btaped`w player."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfo));
											//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packetto = enet_packet_create(pto.data,
												pto.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetto);
										}

										//enet_host_flush(server);
										string text = "action|play_sfx\nfile|audio/lightning.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

										ENetPacket* packetso = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										if (isHere(peer, currentPeerp))
										{
											enet_peer_send(currentPeerp, 0, packetso);
										}
									}
								}
							}
							if (btn == "punishview")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|view|`1View `w(`4Check IP`1/`4Information`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
							if (btn == "view")
							{
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									int pullX = ((PlayerInfo*)(peer->data))->x;
									int pullY = ((PlayerInfo*)(peer->data))->y;


									if (name == ((PlayerInfo*)(peer->data))->lastInfo)
									{
										string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
										string showplatidplain;
										if (showplatid == "4")
										{
											showplatidplain = "Android";
										}
										else if (showplatid == "0")
										{
											showplatidplain = "PC (Windows)";
										}
										else if (showplatid == "6")
										{
											showplatidplain = "Mac (OS X)";
										}
										else
										{
											showplatidplain = " UNIX (Linux, iOS (most likely), FreeBSD etc.) ";
										}
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1View player|left|1432|\nadd_spacer|small|\nadd_label|small|`oIP: " + ((PlayerInfo*)(currentPeer->data))->charIP + "|left|\nadd_label|small|`oPlatform: " + showplatidplain + "|left|\nadd_label|small|`oGame Version: " + ((PlayerInfo*)(currentPeer->data))->gameversion + "|left|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}
							if (btn == "banmenu")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish player|left|1432|\nadd_spacer|small|\nadd_button|suspend|`4Suspend|noflags|732|\nadd_button|tape|`bTape player|noflags|408|\nadd_button|disconnect|`6Disconnect|noflags|276|\nadd_button|freeze|`1Freeze|noflags|274|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "wban")
							{
								if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{
									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;



										string name = ((PlayerInfo*)(peer->data))->displayName;
										string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
										//string kickname = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname + " from `w" + world->name + "`o!"));
										string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										if (isHere(peer, currentPeerp))
										{
											ENetPacket* packetsou = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);



											enet_peer_send(currentPeerp, 0, packetsou);
											enet_peer_send(currentPeerp, 0, packet);
											delete data;
											delete p.data;
											if (((PlayerInfo*)(currentPeerp->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
											{


												namespace fs = std::experimental::filesystem;

												if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
													fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);

													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}
												else
												{
													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}

												sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
												sendWorldOffers(currentPeerp);


												((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";

											}
										}


									}

								}
							}
							if (btn == "autoban")
							{
								// Warning from `4System``: You've been `4BANNED`` from `wGrowtopia`` for 60 days``


							}
							if (btn == "kick")
							{
								if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "admin")
								{
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;



										string name = ((PlayerInfo*)(peer->data))->displayName;
										string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
										//string kickname = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4kicks " + "`w" + kickname));
										string text = "action|play_sfx\nfile|audio/male_scream.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										if (isHere(peer, currentPeer))
										{
											ENetPacket* packetsou = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(currentPeer, 0, packetsou);
											enet_peer_send(currentPeer, 0, packet);


											int x = 3040;
											int y = 736;


											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 6) {
													x = (i % world->width) * 32;
													y = (i / world->width) * 32;
												}
											}
											GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
											memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);

											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo)
											{
												enet_peer_send(currentPeer, 0, packet2);
											}



											delete p2.data;
											delete p.data;
											delete data;

										}

									}
								}
							}


							if (btn == "pull")
							{
								if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										int pullX = ((PlayerInfo*)(peer->data))->x;
										int pullY = ((PlayerInfo*)(peer->data))->y;


										if (name == ((PlayerInfo*)(peer->data))->lastInfo)
										{
											if (isHere(peer, currentPeer) && getPlyersWorld(peer)->name != "EXIT")
											{
												string name = ((PlayerInfo*)(peer->data))->displayName;
												string pullname = ((PlayerInfo*)(currentPeer->data))->displayName;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `5pulls " + "`w" + pullname));
												string text = "action|play_sfx\nfile|audio/object_spawn.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);

												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet);
												enet_peer_send(peer, 0, packet);




												ENetPacket* packetsou = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packetsou);
												enet_peer_send(peer, 0, packetsou);

												GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), pullX, pullY));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet2);

												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You have been pulled by " + ((PlayerInfo*)(peer->data))->displayName));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packetto);

												delete pto.data;
												delete p2.data;
												delete p.data;

											}
										}
									}
								}






							}
							if (btn == "backsocialportal") {
								if (((PlayerInfo*)(peer->data))->joinguild == true) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|showguild|Show Guild Members``|0|0|\nadd_button|guildrewards|Guild Rewards``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}

							if (btn == "backonlinelist") {

								string onlinefrnlist = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
										onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``|0|0|";
										onlinecount++;

									}

								}
								if (totalcount == 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_label|small|`1To add friends in `2KXPS `1Click on someone's name and click add as a friend!`o.``|left|4|\n\nadd_spacer|small|\nadd_button||`5Close``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (onlinecount == 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_label|small|`oNone of your friends are currently online.``|left|4|\n\nadd_spacer|small|\nadd_button|showoffline|`5Show offline``|0|0|\nadd_button||`5Close``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}

								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|" + onlinefrnlist + "\n\nadd_spacer|small|\nadd_button|showoffline|`5Show offline``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
							if (btn.substr(0, 9) == "onlinegm_") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(9, cch.length() - 9 - 1)) {
										((PlayerInfo*)(peer->data))->lastgmworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
										((PlayerInfo*)(peer->data))->lastgmname = ((PlayerInfo*)(currentPeer->data))->displayName;
										((PlayerInfo*)(peer->data))->lastgm = ((PlayerInfo*)(currentPeer->data))->rawName;
									}
								}
								if (btn.substr(9, cch.length() - 9 - 1) == ((PlayerInfo*)(peer->data))->rawName) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|This is you!|\n\nadd_spacer|small|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small| \nadd_button|removegmonline|Kick from guild|0|0|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small| \nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}
							if (btn == "showoffline") {
								string onlinelist = "";
								string offlinelist = "";
								string offname = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
								vector<string>offliness = ((PlayerInfo*)(peer->data))->friendinfo;

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;

									if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
										onlinelist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + "``|0|0|";
										onlinecount++;

										offliness.erase(std::remove(offliness.begin(), offliness.end(), name), offliness.end());
									}
								}
								for (std::vector<string>::const_iterator i = offliness.begin(); i != offliness.end(); ++i) {
									offname = *i;
									offlinelist += "\nadd_button|offlinefrns_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";

								}

								/*if (onlinecount > 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\n\nadd_spacer|small|\nadd_textbox|All of your friend are online!|\n\nadd_spacer|small| \n\nadd_spacer|small| \nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {*/
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_spacer|small|" + offlinelist + "\nadd_spacer|small|\n\nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}
							if (btn == "removecon") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastFrn) {


										((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());


										((PlayerInfo*)(currentPeer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(currentPeer->data))->friendinfo.begin(), ((PlayerInfo*)(currentPeer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->rawName), ((PlayerInfo*)(currentPeer->data))->friendinfo.end());


										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `2" + ((PlayerInfo*)(peer->data))->displayName + " `ohas removed you as a friend."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrnName + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "removeconoff") {
								((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json");
								if (ifff.fail()) {
									ifff.close();
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oPlayer `5" + ((PlayerInfo*)(peer->data))->lastFrn + " `odoes not exist!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load

								vector<string> friends;

								for (int i = 0; i < j["friends"].size(); i++) {
									friends.push_back(j["friends"][i]);
								}

								friends.erase(std::remove(friends.begin(), friends.end(), ((PlayerInfo*)(peer->data))->rawName), friends.end());

								j["friends"] = friends; //edit

								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrn + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn.substr(0, 11) == "onlinefrns_") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(11, cch.length() - 11 - 1)) {
										((PlayerInfo*)(peer->data))->lastFrnWorld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
										((PlayerInfo*)(peer->data))->lastFrnName = ((PlayerInfo*)(currentPeer->data))->tankIDName;
										((PlayerInfo*)(peer->data))->lastFrn = ((PlayerInfo*)(currentPeer->data))->rawName;
									}
								}

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrnName + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrnName + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "`o.|\n\nadd_spacer|small|\nadd_button|frnwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "``|0|0|\nadd_button|msgbutton|`5Send message``|0|0|\n\nadd_spacer|small|\nadd_button|removecon|`oRemove as friend``|0|0|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "frnwarpbutton") {
								if (((PlayerInfo*)(peer->data))->lastFrnWorld == "server")
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4 You cannot warp to your friend now! `7Try it later."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									delete p.data;
								}
								else
								{
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									joinWorld(peer, ((PlayerInfo*)(peer->data))->lastFrnWorld, 0, 0);
								}
							}
							if (btn == "msgbutton") {

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`5Message to `o" + ((PlayerInfo*)(peer->data))->lastFrnName + "|left|660|\nadd_spacer|small|\nadd_text_input|msgtext|||50|\nend_dialog|msgdia|Cancel|`5Send``| \nadd_spacer|big|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn.substr(0, 12) == "offlinefrns_") {
								((PlayerInfo*)(peer->data))->lastFrn = btn.substr(12, cch.length() - 12 - 1);

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrn + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrn + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|removeconoff|`oRemove as friend``|0|0|\nadd_button|showoffline|`oBack``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn.substr(0, 7) == "nothing") {
								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								joinWorld(peer, btn.substr(7, cch.length() - 7 - 1), 0, 0);
							}
							if (btn == "addfriendrnbutton") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) { // if last wrench

										if (((PlayerInfo*)(peer->data))->lastfriend == ((PlayerInfo*)(currentPeer->data))->rawName) { // last  h friend

											((PlayerInfo*)(peer->data))->friendinfo.push_back(((PlayerInfo*)(currentPeer->data))->rawName); //add


											((PlayerInfo*)(currentPeer->data))->friendinfo.push_back(((PlayerInfo*)(peer->data))->rawName);

											string text = "action|play_sfx\nfile|audio/love_in.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											enet_peer_send(peer, 0, packet2);
											delete data;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(peer->data))->rawName + "`o!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
											GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(currentPeer->data))->rawName + "`o!"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											delete p3.data;
											std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


											if (ifff.fail()) {
												ifff.close();


											}
											if (ifff.is_open()) {
											}
											json j;
											ifff >> j; //load


											j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo; //edit

											std::ifstream ifff2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");


											if (ifff2.fail()) {
												ifff2.close();


											}
											if (ifff2.is_open()) {
											}
											json x;
											ifff2 >> x; //load


											x["friends"] = ((PlayerInfo*)(currentPeer->data))->friendinfo; //edit


											std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << j << std::endl;

											std::ofstream a("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
											if (!a.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											a << x << std::endl;
										}
										else {
											GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wFriend request sent to " + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`5]"));
											ENetPacket* packet4 = enet_packet_create(p4.data,
												p4.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packet4);
											delete p4.data;
											string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											delete data;
											((PlayerInfo*)(currentPeer->data))->lastfriend = ((PlayerInfo*)(peer->data))->rawName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND REQUEST: `oYou've received a `wfriend request `ofrom `w" + ((PlayerInfo*)(peer->data))->rawName + "`o! To accept, click the `wwrench by his/her name `oand then choose `wAdd as friend`o."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
										}
									}
								}
							}


							if (btn == "starttrd")
							{
								if (world->owner == ((PlayerInfo*)(peer->data))->rawName && world->isPublic == false)
								{
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_button|chc0|Close|noflags|0|0|\nadd_spacer|small|\nadd_textbox|Choose amount of `4Gems`w to sell world for:|\nadd_text_input|worldoffer|World Offer||30|\nend_dialog|disabled111|Cancel|Request Offer!\n"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										// need also to reset seller/buyer when wl breaks and any exits (door or exit world) declines, or disconnects happen.
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR! `w >> `7You need a GrowID first to trade worlds! `wCreate one, it's free."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR! `w >> `7You are not the `9world `2owner`w or world is Public!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "dwheel")
							{

							}
							if (btn == "swheel")
							{

							}
							if (btn == "lkw")
							{
								//if (((PlayerInfo*)(peer->data))->boughtLKW == false)
							//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Dragon Knight Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Dragon Knight Wings``|left|\nadd_spacer|small|\nadd_button|yeslkw|`9Purchase for - `1100.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "pwing")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtPHOENIX == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Phoenix Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Phoenix Wings``|left|\nadd_spacer|small|\nadd_button|yespwng|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "ndev")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtNDEV == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Nightmare Devil Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Nightmare Devil Wings``|left|\nadd_spacer|small|\nadd_button|yesndev|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "txmom")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtTXMOM == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9TXMom's Crown``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9TXMom's Crown``|left|\nadd_spacer|small|\nadd_button|yestxmom|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "dav")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtDAV == false)
									//{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Da Vinci Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Da Vinci Wings``|left|\nadd_spacer|small|\nadd_button|yesdav|`9Purchase for - `1150.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "flashaxe")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtFLASHAXE == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Diamond Flashaxe``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Diamond Flashaxe``|left|\nadd_spacer|small|\nadd_button|yesflashaxe|`9Purchase for - `13.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "violet")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtVIOLET == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Violet Protodrake Leash``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Violet Protodrake Leash``|left|\nadd_spacer|small|\nadd_button|yesviolet|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "zeus")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtZEUS == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Zeus's Lightning Bolt``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Zeus's Lightning Bolt``|left|\nadd_spacer|small|\nadd_button|yeszeus|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "gbow")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGBOW == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Heartbow``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Heartbow``|left|\nadd_spacer|small|\nadd_button|yesgbow|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "gangel")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGANGEL == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Angel Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Angel Wings``|left|\nadd_spacer|small|\nadd_button|yesgangel|`9Purchase for - `115.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "gbug")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGBUG == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Love Bug``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Love Bug``|left|\nadd_spacer|small|\nadd_button|yesgbug|`9Purchase for - `12.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "hammer")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtWAR == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bWar hammer``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bWar hammer `wand get 10-15 gems per block``|left|\nadd_spacer|small|\nadd_button|yeswar|`9Purchase for - `1200.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "rayman")
							{
								/*if (((PlayerInfo*)(peer->data))->boughtRAY == false)
							}*/
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `wRayman Fist``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wRayman fist and 3 far``|left|\nadd_spacer|small|\nadd_button|yesray|`9Purchase for - `930 Premium Wls!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "tk69")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtTK == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `5Tk69 mystical board``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wTK69 and got 5-13 gems when breaking blocks!``|left|\nadd_spacer|small|\nadd_button|yestk|`9Purchase for - `2350.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "ances")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtAAC == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `6Ancestral``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `6Ancestral `wand get 8-20 gems per blocks + /ssb!``|left|\nadd_spacer|small|\nadd_button|yesaac|`9Purchase for - `2950000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "spd")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtSPD == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bDigger Spade``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bDigger spade `wand 2 hit when breaking block``|left|\nadd_spacer|small|\nadd_button|yesspd|`9Purchase for - `225 `9WLS!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}







							if (btn == "megaphone")
							{
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Megaphone Coming Soon!"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}











							if (btn == "gpegasus")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGPEGASUS == false)
								// {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Pegasus``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Pegasus``|left|\nadd_spacer|small|\nadd_button|yesgpegasus|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "gglass")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGGLASS == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Heart Glasses``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Heart Glasses``|left|\nadd_spacer|small|\nadd_button|yesgglass|`9Purchase for - `12.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "gneck")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGNECK == false)
									//{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Diamond Necklace``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Diamond Necklace``|left|\nadd_spacer|small|\nadd_button|yesgneck|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "gtangel")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGTANGEL == false)
									//{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Teeny Golden Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Teeny Golden Wings``|left|\nadd_spacer|small|\nadd_button|yesgtangel|`9Purchase for - `113.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "gdiaper")
							{
								///	if (((PlayerInfo*)(peer->data))->boughtGDIAPER == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Diaper``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Diaper``|left|\nadd_spacer|small|\nadd_button|yesgdiaper|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "hscythe")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtHSCYTHE == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Heavenly Scythe``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Heavenly Scythe``|left|\nadd_spacer|small|\nadd_button|yeshscythe|`9Purchase for - `115.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "grob")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtGROB == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Golden Items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Air Robinsons``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Air Robinsons``|left|\nadd_spacer|small|\nadd_button|yesgrob|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "ccrown")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtCCROWN == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Challenge Crown``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Challenge Crown``|left|\nadd_spacer|small|\nadd_button|yesccrown|`9Purchase for - `17.500!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "chimera")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtCHIMERA == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Danieldd's Chimera Wings``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Danieldd's Chimera Wings``|left|\nadd_spacer|small|\nadd_button|yeschimera|`9Purchase for - `15.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "brainflower")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtBRAIN == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`5Special Items``|left|1000|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Brainflower``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Brainflower``|left|\nadd_spacer|small|\nadd_button|yesbrain|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*		}
										else
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}*/
							}

							if (btn == "cwd")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtCWD == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Token Items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `1Focused Eyes``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `1Focused Eyes!``|left|\nadd_spacer|small|\nadd_button|yescwd|`9Purchase for - `15000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "rfs")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtRFS == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Token Items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Golden Pickaxe``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Golden Pickaxe!``|left|\nadd_spacer|small|\nadd_button|yesrfs|`9Purchase for - `115.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "cdg")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtCDG == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Token Items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Puppy Leash``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Puppy Leash!``|left|\nadd_spacer|small|\nadd_button|yescdg|`9Purchase for - `110.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "lgk")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtLGK == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Katana``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Katana `w& `9/supporter`w!``|left|\nadd_spacer|small|\nadd_button|yeslgk|`9Purchase for - `1100.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "lwp")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtLWHIP == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Whip of Truth``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Whip of Truth!``|left|\nadd_spacer|small|\nadd_button|yeslwp|`9Purchase for - `1100.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*		}
										else
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}*/
							}

							if (btn == "lgb")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtLGB == false) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Bot``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Bot!``|left|\nadd_spacer|small|\nadd_button|yeslgb|`9Purchase for - `1100.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*		}
										else
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}*/
							}
							if (btn == "yestit") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 299999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Title!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9We are disconnecing you once for legendary title."));
									ENetPacket* packet5 = enet_packet_create(p5.data,
										p5.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet5);
									delete p5.data;

									int gemcalc10k = b - 300000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtLTIT = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);
									enet_peer_disconnect_later(peer, 0);
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

							}
							if (btn == "ltit")
							{
								//		if (((PlayerInfo*)(peer->data))->boughtLTIT == false) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Title``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Title!``|left|\nadd_spacer|small|\nadd_button|yestit|`9Purchase for - `1300.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "lgw")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtLGW == false) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Legendary Wings!``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Legendary Wings!``|left|\nadd_spacer|small|\nadd_button|yeslgw|`9Purchase for - `1100.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*		}
										else
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}*/
							}

							if (btn == "lgd")
							{
								//if (((PlayerInfo*)(peer->data))->boughtLGD == false) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`#Legendary Items``|left|1790|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `9Dragon of Legend!``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `9Dragon of Legend!``|left|\nadd_spacer|small|\nadd_button|yeslgd|`9Purchase for - `1100.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}



							if (btn == "traderubbles") {
								if (((PlayerInfo*)(peer->data))->rubble > 10) {
									int valgem = rand() % 70;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int bb = b + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << bb;
									myfile.close();
									((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble - 10;
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You got " + to_string(valgem) + " gems."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`3You need 10 rubble to exchange again!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
							}
							if (btn == "traderubble") {
								if (((PlayerInfo*)(peer->data))->rubble > 0) {
									int valgem = rand() % 15;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int bb = b + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << bb;
									myfile.close();
									((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble - 1;
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You got " + to_string(valgem) + " gems."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`3You need enough rubble to exchange again!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

							}


























							if (btn == "craftatomic")
							{
								int amber = ((PlayerInfo*)(peer->data))->amber;
								int gold = ((PlayerInfo*)(peer->data))->gold;
								if (amber >= 75 && gold >= 15)
								{
									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko atomic!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["amber"];
									dabarTuri -= 75;
									jj["amber"] = dabarTuri;

									int dabarTuris = jj["gold"];
									dabarTuris -= 15;
									jj["gold"] = dabarTuris;

									oo << jj << std::endl;
									((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber - 75;
									((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold - 15;
									bool success = true;
									SaveShopsItemMoreTimes(3764, 1, peer, success); // aposition, itemid, quantity, peer, success
									if (!success)continue;
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have crafted `4Atomic Fireball`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}

							if (btn == "buywl")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wBuying WorldLock Options``||18||\nadd_textbox|`oHow many WorldLocks do you want to buy?: |\nadd_text_input|worldlockoffer|||7|\nend_dialog|reqworldlockoffer|Cancel|BUY WORLDLOCK|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

								/*
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 1000)
								{

									bool success = true;
									SaveShopsItemMoreTimes(242, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `2World `^Lock!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

									int gemcalc10k = b - 1000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought gems."), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}
								*/
							}





							if (btn == "buyamethyst") //BAISIOS NESAMONES ATSARGIAU!
							{

								//KAINA 15
								// SaveShopsItem(4762, 200, peer, success);
								/*													GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully bought 200 Amethyst Block's!"), "audio/hub_open.wav"), 0));
										ENetPacket * packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;*/
								bool iscontains = false;
								SearchInventoryItem(peer, 1486, 15, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 6802, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2Growtokens`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											bool iscontainssss = false;
											SearchInventoryItem(peer, 4762, 1, iscontainssss);
											if (!iscontainssss)
											{
												RemoveInventoryItem(6802, 1, peer);
												SaveShopsItemMoreTimes(1486, 85, peer, success);
												//RemoveInventoryItem(1796, 1, peer);
												SaveShopsItem(4762, 200, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `8200 `#Amethyst `9Blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `#Amethyst `9blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										bool iscontainssss = false;
										SearchInventoryItem(peer, 4762, 1, iscontainssss);
										if (!iscontainssss)
										{
											RemoveInventoryItem(1486, 15, peer);
											SaveShopsItem(4762, 200, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `8200 `#Amethyst `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `#Amethyst `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

							}













							if (btn == "buymagicmachine") //PRO ITEM ...
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 6802, 5, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2Mega Growtoken`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(6802, 5, peer);
										SaveShopsItemMoreTimes(6952, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `9Magic Machine!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}










							if (btn == "buyatm")
							{



								bool iscontains = false;
								SearchInventoryItem(peer, 1486, 20, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 6802, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enough `2Growtokens9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(6802, 1, peer);
											SaveShopsItemMoreTimes(1486, 80, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(1008, 1, peer, success);


											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `eATM Machine!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;

										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(1486, 20, peer);
										SaveShopsItemMoreTimes(1008, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `eATM Machine!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}

							}


							if (btn == "buyonyx")
							{




								bool iscontains = false;
								SearchInventoryItem(peer, 1486, 30, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 6802, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2Growtoken`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											bool iscontainssss = false;
											SearchInventoryItem(peer, 7382, 1, iscontainssss);
											if (!iscontainssss)
											{
												RemoveInventoryItem(6802, 1, peer);
												SaveShopsItemMoreTimes(1486, 85, peer, success);
												//RemoveInventoryItem(1796, 1, peer);
												SaveShopsItem(7382, 200, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `8200 `bOnyx `9Blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `bOnyx `9blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										bool iscontainssss = false;
										SearchInventoryItem(peer, 7382, 1, iscontainssss);
										if (!iscontainssss)
										{
											RemoveInventoryItem(1486, 30, peer);
											SaveShopsItem(7382, 200, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `8200 `bOnyx `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `bOnyx `9blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

							}









							if (btn == "buyinvupgrade") {
								bool iscontains = false;
								SearchInventoryItem(peer, 1486, 50, iscontains);

								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 6802, 1, iscontainss);

									if (!iscontainss)
									{

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Failed To Purchase `2You Dont Have Enought Growtoken"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;


									}
									else {

										bool success = true;


										short nextSpace = 0;

										if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
										{
											nextSpace = 200;
										}
										else
										{
											nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
										}

										ofstream fs("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fs << nextSpace;
										fs.close();

										if (success)
										{
											RemoveInventoryItem(6802, 1, peer);
											SaveShopsItemMoreTimes(1486, 50, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`2Successfully upgraded your inventory to `8" + to_string(nextSpace) + " `2spaces."), "audio/hub_open.wav"), 0));
											ENetPacket* packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete ps2.data;
											enet_peer_disconnect_later(peer, 0);
										}

									}

								}
								else {
									bool success = true;
									//SaveShopsItemMoreTimes(242, 70, peer, success);
									short nextSpace = 0;

									if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
									{
										nextSpace = 200;
									}
									else
									{
										nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
									}

									ofstream fs("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									fs << nextSpace;
									fs.close();

									if (success)
									{
										RemoveInventoryItem(1486, 50, peer);
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`2Successfully upgraded your inventory to `8" + to_string(nextSpace) + " `2spaces."), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
										enet_peer_disconnect_later(peer, 0);
									}
								}
							}














							if (btn == "amethyst")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Amethyst `^Blocks``|left|4762|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Amethyst `^Blocks `1Gives you over `450-500 `2Gems `1Per block`^!|\nadd_spacer|small|\nadd_button|buyamethyst|`7Buy `9200 `7Blocks `415`2 Growtoken!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "atm")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eATM `3Machine``|left|1008|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`3ATM Machines `1Can give you over `45-10 `2Gems `1Per PUNCH`^! `#This item is permanent`^!|\nadd_spacer|small|\nadd_button|buyatm|`7Buy `eATM Machine `420 `2Growtokens!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "magicmchn")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Magic Machine``|left|6952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Really heavy and powerfull machine! `9Who knows what it does?... But the creators are sure that it will lead to profit!|\nadd_spacer|small|\nadd_button|buymagicmachine|`7Buy `9Magic Machine `7[`45`e Mega Token`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}
							if (btn == "onyx")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `bOnyx `^Blocks``|left|7382|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`bOnyx `^Blocks `1Gives you over `450-1000 `2Gems `1Per block`^!|\nadd_spacer|small|\nadd_button|buyonyx|`7Buy `9200 `7Blocks `430 `2Growtoken|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "worldlock")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `2World `^Locks``|left|242|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`2World `^Lock `0Allows you to lock any free world! `4WARNING! `2World `^Lock `oCosts `21000 Gems!|\nadd_spacer|small|\nadd_button|buywl|`9Buy `2World `^Lock!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}





							if (btn == "buywls")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`2World Locks``|left|7188|\nadd_button_with_icon|worldlock||staticBlueFrame|242|1000|\nadd_button_with_icon|diamondlock||staticBlueFrame|1796|100000|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "resources")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Crystals`6!``|left|1792|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oHere you can purchase `1crystals`o! Everything here costs `9gem's`o! If you searching for something `2free `othis place is not for you!|\nadd_spacer|small|\nadd_button|buyruby|`@Buy `4Ruby's `@[`21/1K`@]|\nadd_spacer|small|\nadd_button|buyamber|`@Buy `8Amber's `@[`21/3K`@]|\nadd_spacer|small|\nadd_button|buyopal|`@Buy `1Opal's `@[`21/10K`@]|\nadd_spacer|small|\nadd_button|buygold|`@Buy `9Gold's `@[`21/20K`@]|\nadd_spacer|small|\nadd_button|buysapphire|`@Buy `bSapphires's `@[`21/30K`@]|\nadd_spacer|small|\nadd_button|buydiamond|`@Buy `3Diamond's `@[`21/100K`@]|\nadd_spacer|small|\nadd_button|buyemerald|`@Buy `2Emerald's `@[`21/300K`@]|\nadd_spacer|small|\nadd_button|store|`#Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}






							if (btn == "buyruby")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `4Ruby's`6!``|left|828|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase 1 `4Ruby `oFor `21000 Gems`o?|\nadd_spacer|small|\nadd_button|confirmruby|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "buyamber")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `8Amber's`6!``|left|3948|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase 1 `8Amber `oFor `23000 Gems`o?|\nadd_spacer|small|\nadd_button|confirmamber|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "buyopal")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `1Opal's`6!``|left|5270|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase 1 `1Opal `oFor `210000 Gems`o?|\nadd_spacer|small|\nadd_button|confirmopal|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buygold")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Gold's`6!``|left|3424|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase 1 `9Gold `oFor `220000 Gems`o?|\nadd_spacer|small|\nadd_button|confirmgold|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buysapphire")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `bSapphire's`6!``|left|2812|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase 1 `bSapphire `oFor `230000 Gems`o?|\nadd_spacer|small|\nadd_button|confirmsapphire|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;



							}

							if (btn == "buydiamond")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `3Diamond's`6!``|left|262|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase 1 `3Diamond `oFor `2100000 Gems`o?|\nadd_spacer|small|\nadd_button|confirmdiamond|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buyemerald")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `2Emerald's`6!``|left|826|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase 1 `2Emerald `oFor `2300000 Gems`o?|\nadd_spacer|small|\nadd_button|confirmemerald|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							//Resursu shopo aptarnavimas
							if (btn == "confirmruby")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 1000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `4Ruby`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 1000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko ruby!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["rubble"];
									dabarTuri += 1;
									jj["rubble"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;


									ENetPeer* currentPeer;
									int effect = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}



							if (btn == "confirmamber")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 3000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `8Amber`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 3000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko amber!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["amber"];
									dabarTuri += 1;
									jj["amber"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber + 1;


									ENetPeer* currentPeer;
									int effect = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmopal")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 10000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `1Opal`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 10000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko opal!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["opal"];
									dabarTuri += 1;
									jj["opal"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->opal = ((PlayerInfo*)(peer->data))->opal + 1;


									ENetPeer* currentPeer;
									int effect = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmgold")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 20000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `9Gold`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 20000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko gold!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["gold"];
									dabarTuri += 1;
									jj["gold"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold + 1;


									ENetPeer* currentPeer;
									int effect = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmsapphire")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 30000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `bSapphire`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 30000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko sapphire!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["sapphire"];
									dabarTuri += 1;
									jj["sapphire"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire + 1;


									ENetPeer* currentPeer;
									int effect = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmdiamond")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 100000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `3Diamond`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko diamond!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["diamond"];
									dabarTuri += 1;
									jj["diamond"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->diamond = ((PlayerInfo*)(peer->data))->diamond + 1;


									ENetPeer* currentPeer;
									int effect = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmemerald")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 300000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `2Emerald`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 300000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko emerald!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["emerald"];
									dabarTuri += 1;
									jj["emerald"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald + 1;


									ENetPeer* currentPeer;
									int effect = 0;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "ringstore")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `4Ring's `2Store`w!``|left|1900|\nadd_button_with_icon|ringofforce||staticBlueFrame|1874|\nadd_button_with_icon|ringofwinds||staticBlueFrame|1876|\nadd_button_with_icon|ringofwater||staticBlueFrame|2970|\nadd_button_with_icon|ringofgemini||staticBlueFrame|1986|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringoffistful||staticBlueFrame|1932|\nadd_button_with_icon|ringofwisdom||staticBlueFrame|1996|\nadd_button_with_icon|ringofsavings||staticBlueFrame|3140|\nadd_button_with_icon|ringofnature||staticBlueFrame|6846|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringofsmithing||staticBlueFrame|3174|\nadd_button_with_icon|ringofnight||staticBlueFrame|8962|\nadd_button_with_icon|ringofshrinking||staticBlueFrame|6028|\nadd_button_with_icon|theonering||staticBlueFrame|1904|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}




							if (btn == "storeinvupgrade")
							{
								short nextSpace = 0;

								if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
								{
									nextSpace = 200;
								}
								else
								{
									nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
								}

								if (((PlayerInfo*)(peer->data))->currentInventorySize == 200)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `9Inventory Upgrade`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`2Your inventory spaces are full upgraded!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `9Inventory Upgrade`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYour inventory space is`8 " + to_string(((PlayerInfo*)(peer->data))->currentInventorySize) + " `onow.|\nadd_label|small|\nadd_textbox|`9After purchasing an inventory upgrade, your inventory will have`2 " + to_string(nextSpace) + "`9 spaces.|left|8|\nadd_spacer|small|\nadd_button|buyinvupgrade|`2Purchase `c50 `2Growtoken`w!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							if (btn == "blocks")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`wSpecial Premium `@Blocks``|left|2590|\nadd_button_with_icon|amethyst||staticBlueFrame|4762|\nadd_button_with_icon|onyx||staticBlueFrame|7382|\nadd_button_with_icon|atm||staticBlueFrame|1008|\nadd_button_with_icon|magicmchn||staticBlueFrame|6952|\nadd_quick_exit|\nadd_label|small||END_LIST|noflags|0|0|\nend_dialog|marketthingie|Close||\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "ingameassets")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wWelcome to our store!``|left|1430|\n\nadd_spacer|small|\nadd_button_with_icon|buydivine||staticBlueFrame|1958|\nadd_button_with_icon|buygod||staticBlueFrame|32|\nadd_button_with_icon|buyminimod||staticBlueFrame|1956|\nadd_button_with_icon|buyvip||staticBlueFrame|158|\nadd_button_with_icon|buygems||staticBlueFrame|112|\nadd_button_with_icon|buylvl||staticBlueFrame|18||\nadd_button|back|Back|noflags|0|0|\nadd_button|continue|Close|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "buyminimod")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wPurchase Moderator``|left|278|\nadd_smalltext|`4Make sure to read this information clearly!``|left|\n\nadd_spacer|small|\nadd_textbox|Price: `3600 `5KXPS `9Premium Wls`w.|left|\nadd_textbox|Duration: `w[`4~`w]|left|\nadd_textbox|Stock: `w[`4~`w]|\nadd_spacer|small|\nadd_textbox|`9Rules:|left|\nadd_smalltext|`91. `2Do Not Abuse Your Role|left|\nadd_smalltext|`92. `2if you are going to ban people, make sure to have screenshots/video proof.|left|\nadd_smalltext|`93. `2Sharing Acoount will result in account loss.|left|\nadd_smalltext|`94. `2Trying to sell account will result in ip-banned.|left|\nadd_spacer|small|\nadd_textbox|`9Commands:|small|\nadd_smalltext|`eAll commands are displayed in /mhelp (moderator help).|small|\nadd_spacer|left|\nadd_textbox|`eHow To Buy:|\nadd_smalltext|`rIf u want buy `#@Moderator `rRank, Message `4@OWNER `ron Discord Server.``|left|\nadd_spacer|small|\nadd_textbox|`eWhen will i received my purchase:|\nadd_smalltext|`rYou Will received within `424`r hours after you have made your payment.|left|\nadd_button|buymodgtid|`wPurchase `^Moderator `wWith KXPS wls!|noflags|0|0|\nadd_spacer|small|\nend_dialog|gazette|Close||"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "buygod")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wPurchase God``|left|278|\nadd_smalltext|`4Make sure to read this information clearly!``|left|\n\nadd_spacer|small|\nadd_textbox|Price: `31200 `5KXPS `9Premium Wls`w.|left|\nadd_textbox|Duration: `w[`4~`w]|left|\nadd_textbox|Stock: `w[`4~`w]|\nadd_spacer|small|\nadd_textbox|`9Rules:|left|\nadd_smalltext|`91. `2Do Not Abuse Your Role|left|\nadd_smalltext|`92. `2if you are going to ban people, make sure to have screenshots/video proof.|left|\nadd_smalltext|`93. `2Sharing Acoount will result in account loss.|left|\nadd_smalltext|`94. `2Trying to sell account will result in ip-banned.|left|\nadd_spacer|small|\nadd_textbox|`9Commands:|small|\nadd_smalltext|`eAll commands are displayed in /ghelp (God help).|small|\nadd_spacer|left|\nadd_textbox|`eHow To Buy:|\nadd_smalltext|`rIf u want buy `o@God `rRank, Message `4@OWNER `ron Discord Server.``|left|\nadd_spacer|small|\nadd_textbox|`eWhen will i received my purchase:|\nadd_smalltext|`rYou Will received within `424`r hours after you have made your payment.|left|\nadd_button|buygodgtid|`wPurchase `sGod `wWith KXPS wls!|noflags|0|0|\nadd_spacer|small|\nend_dialog|gazette|Close||"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "buydivine")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wPurchase Divine``|left|278|\nadd_smalltext|`4Make sure to read this information clearly!``|left|\n\nadd_spacer|small|\nadd_textbox|Price: `31500 `5KXPS `9Premium Wls`w.|left|\nadd_textbox|Duration: `w[`4~`w]|left|\nadd_textbox|Stock: `w[`4~`w]|\nadd_spacer|small|\nadd_textbox|`9Rules:|left|\nadd_smalltext|`91. `2Do Not Abuse Your Role|left|\nadd_smalltext|`92. `2if you are going to ban people, make sure to have screenshots/video proof.|left|\nadd_smalltext|`93. `2Sharing Acoount will result in account loss.|left|\nadd_smalltext|`94. `2Trying to sell account will result in ip-banned.|left|\nadd_spacer|small|\nadd_textbox|`9Commands:|small|\nadd_smalltext|`eAll commands are displayed in /dhelp (moderator help).|small|\nadd_spacer|left|\nadd_textbox|`eHow To Buy:|\nadd_smalltext|`rIf u want buy `#@Moderator `rRank, Message `4@OWNER `ron Discord Server.``|left|\nadd_spacer|small|\nadd_textbox|`eWhen will i received my purchase:|\nadd_smalltext|`rYou Will received within `424`r hours after you have made your payment.|left|\nadd_button|buydivinegtid|`wPurchase `cDivine `wWith KXPS wls!|noflags|0|0|\nadd_spacer|small|\nend_dialog|gazette|Close||"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "buyvip")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wPurchase VIP``|left|6802|\nadd_smalltext|`4Make sure to read this information clearly!``|left|\n\nadd_spacer|small|\nadd_textbox|Price: `3200 `5KXPS `9Premium Wls`w.|left|\nadd_textbox|Duration: `w[`4~`w]|left|\nadd_textbox|Stock: `w[`4~`w]|\nadd_spacer|small|\nadd_textbox|`9Rules:|left|\nadd_smalltext|`91. `2Do Not Abuse Your Role|left|\nadd_smalltext|`94. `2Trying to sell account will result in ip-banned.|left|\nadd_spacer|small|\nadd_textbox|`9Commands:|small|\nadd_smalltext|`eAll commands are displayed in /vhelp (vip help).|small|\nadd_spacer|left|\nadd_textbox|`eHow To Buy:|\nadd_smalltext|``rIf u want buy `9VIP `rRank, Message `4@OWNER `ron Discord Server.``|left|\nadd_spacer|small|\nadd_textbox|`eWhen will i received my purchase:|\nadd_smalltext|`rYou Will received within `424`r hours after you have made your payment.|left|\nadd_button|buyvipgtid|`wPurchase `1VIP `wWith KXPS Premium WL|noflags|0|0|\nadd_spacer|small|\nend_dialog|gazette|Close||"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "buytoken")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|``2Growtoken``|left|1486|\nadd_button_with_icon|growtoken||staticBlueFrame|1486|5000|\nadd_button_with_icon|megatoken||staticBlueFrame|6802|500000|noflags|0|0|\nadd_spacer|small|\nend_dialog|gazette|Close|||\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "growtoken")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `2Growtokens``|left|1486|\nadd_spacer|small|\nadd_button|buygtoken|`9Buy `2Growtoken!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "megatoken")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Mega `2Growtoken``|left|6802|\nadd_spacer|small|\nadd_button|buymtoken|`9Buy `4 Mega`2Growtoken!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "buymtoken")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 500000)
								{

									bool success = true;
									SaveShopsItemMoreTimes(6802, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;
									GamePacket ps2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Succesfully `wPurchased `9Your Mega Growtoken its now on your inventory"));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

									int gemcalc10k = b - 500000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


								}
								else
								{
									GamePacket ps2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error `w >> `oYou don't have enough Gems!!!"));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}
							if (btn == "buygtoken")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 5000)
								{

									bool success = true;
									SaveShopsItemMoreTimes(1486, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;
									GamePacket ps2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Succesfully `wPurchased `^Your Growtoken its now on your inventory"));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

									int gemcalc10k = b - 5000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


								}
								else
								{
									GamePacket ps2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error `w >> `oYou don't have enough Gems!!!"));
									ENetPacket* packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}
							if (btn == "buymodgtid")
							{
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;
								if (kxpswl >= 600)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`oPurchase Confirmation``|left|1366|\nadd_spacer|small|\nadd_label|small|`4You'll give:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o600`w) KXPS Premium WLS``|left|242|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`2You'll get:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`oPermanent`w) Moderator Role``|left|32|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|confirmmod1|`wDo The Purchase!|noflags|0|0|\nadd_button|cancel|`oCancel|noflags|0|0|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error `w >> `oYou don't have enough Premium Wls!!!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "confirmlevel") {
								int level = ((PlayerInfo*)(peer->data))->level;
								int blevel = ((PlayerInfo*)(peer->data))->buygems;
								int tlevel = level + blevel;
								int wls = ((PlayerInfo*)(peer->data))->kxpswl;
								int minuswl = blevel / 5;
								int rwl = wls - minuswl;
								((PlayerInfo*)(peer->data))->kxpswl = rwl;
								((PlayerInfo*)(peer->data))->level = tlevel;
								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["level"] = tlevel; //edit
								j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl = rwl;; //edit



								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;
							}
							if (btn == "confirmgems") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string acontent((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));
								int buygems = ((PlayerInfo*)(peer->data))->buygems;
								int buygemsz = buygems * 3000;
								int a = atoi(acontent.c_str());
								int aa = a + buygemsz;
								int cwl = ((PlayerInfo*)(peer->data))->kxpswl;
								int rwl = cwl - buygems;
								((PlayerInfo*)(peer->data))->kxpswl = rwl;
								ofstream myfile;
								myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile << aa;
								myfile.close();
								GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
								ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packetsa);
								delete psa.data;

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl; //edit



								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;
							}
							if (btn == "confirmmod1") {
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;

								((PlayerInfo*)(peer->data))->kxpswl = kxpswl - 600;
								((PlayerInfo*)(peer->data))->adminLevel = 666;

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl; //edit
								j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel; //edit



								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;
								string imie = ((PlayerInfo*)(peer->data))->rawName;
								string message2 = "`2Congratulation to new `#Moderator `5" + imie;
								sendConsoleMsg(peer, "`2Gratz `oYou are a `#Moderator`w now!!!, We will need to disconnect you once.");
								string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message2));
									ENetPacket* packet2s = enet_packet_create(p2s.data,
										p2s.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet2s);
									delete p2s.data;
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(currentPeer, 0, packet2);
								}
								enet_peer_disconnect_later(peer, 0);
							}
							if (btn == "buygodgtid")
							{
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;
								if (kxpswl >= 1200)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`oPurchase Confirmation``|left|1366|\nadd_spacer|small|\nadd_label|small|`4You'll give:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o1200`w) KXPS Premium WLS``|left|242|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`2You'll get:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`oPermanent`w) God Role``|left|4211|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|confirmgod1|`wDo The Purchase!|noflags|0|0|\nadd_button|cancel|`oCancel|noflags|0|0|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error `w >> `oYou don't have enough Premium Wls!!!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "confirmgod1") {
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;

								((PlayerInfo*)(peer->data))->kxpswl = kxpswl - 1200;
								((PlayerInfo*)(peer->data))->adminLevel = 777;

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl; //edit
								j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel; //edit



								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;

								string imie = ((PlayerInfo*)(peer->data))->rawName;
								string message2 = "`2Congratulation to new `sGOD `5" + imie;

								string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message2));
									ENetPacket* packet2s = enet_packet_create(p2s.data,
										p2s.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet2s);
									delete p2s.data;
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(currentPeer, 0, packet2);
								}
								enet_peer_disconnect_later(peer, 0);
							}
							if (btn == "buydivinegtid")
							{
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;
								if (kxpswl >= 1500)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`oPurchase Confirmation``|left|1366|\nadd_spacer|small|\nadd_label|small|`4You'll give:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o1500`w) KXPS Premium WLS``|left|242|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`2You'll get:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`oPermanent`w) Divine Role``|left|2874|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|confirmdivine1|`wDo The Purchase!|noflags|0|0|\nadd_button|cancel|`oCancel|noflags|0|0|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error `w >> `oYou don't have enough Premium Wls!!!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "confirmdivine1") {
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;

								((PlayerInfo*)(peer->data))->kxpswl = kxpswl - 1500;
								((PlayerInfo*)(peer->data))->adminLevel = 888;

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl; //edit
								j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel; //edit



								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;

								string imie = ((PlayerInfo*)(peer->data))->rawName;
								string message2 = "`2Congratulation to new `cDivine `5" + imie;

								string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message2));
									ENetPacket* packet2s = enet_packet_create(p2s.data,
										p2s.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet2s);
									delete p2s.data;
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(currentPeer, 0, packet2);
								}
								enet_peer_disconnect_later(peer, 0);
							}
							if (btn == "buyvipgtid") {
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;
								if (kxpswl >= 200)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`oPurchase Confirmation``|left|1366|\nadd_spacer|small|\nadd_label|small|`4You'll give:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`o200`w) KXPS Premium WLS``|left|242|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_label|small|`2You'll get:|left|23|\nadd_spacer|small|\nadd_label_with_icon|small|`w(`oPermanent`w) Vip Role``|left|242|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|confirmvip1|`wDo The Purchase!|noflags|0|0|\nadd_button|cancel|`oCancel|noflags|0|0|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error `w >> `oYou don't have enough Premium Wls!!!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "confirmvip1") {
								int kxpswl = ((PlayerInfo*)(peer->data))->kxpswl;

								((PlayerInfo*)(peer->data))->kxpswl = kxpswl - 200;
								((PlayerInfo*)(peer->data))->adminLevel = 555;

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl; //edit
								j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel; //edit



								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;
								string imie = ((PlayerInfo*)(peer->data))->rawName;
								string message2 = "`2Congratulation to new `1VIP `5" + imie;

								string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message2));
									ENetPacket* packet2s = enet_packet_create(p2s.data,
										p2s.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet2s);
									delete p2s.data;
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(currentPeer, 0, packet2);
								}
								enet_peer_disconnect_later(peer, 0);
							}
							if (btn == "buygems")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wPurchase Gems``|left|112|\nadd_smalltext|`4Make sure to read this information clearly!``|left|\n\nadd_spacer|small|\nadd_textbox|Price: `33000/1 Growtopia World Lock.|left|\nadd_textbox|Duration: `w[`4~`w]|left|\nadd_textbox|Stock: `w[`4~`w]|\nadd_spacer|small|\nadd_textbox|`9Rules:|left|\nadd_smalltext|`91. `2Do not sell it to other people.|left|\nadd_smalltext|`92. `2Trying To Sell Your Gems To Other People Will Result Ban/Ipban.|left|\nadd_spacer|left|\nadd_textbox|`eHow To Buy:|\nadd_smalltext|`rIf u want buy `9Gems`r, Message `4@OWNER `ron Discord Server.``|left|\nadd_spacer|small|\nadd_textbox|`eWhen will i received my purchase:|\nadd_smalltext|`rYou Will received within `424`r hours after you have made your payment.|left|\n\nadd_textbox|`oHow much you want to buy??|\nadd_text_input|textgems|||100|\nend_dialog|gemsdialog|Cancel|OK|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "buylvl")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wPurchase Level``|left|18|\nadd_smalltext|`4Make sure to read this information clearly!``|left|\n\nadd_spacer|small|\nadd_textbox|Price: `35/1 Growtopia World Lock.|left|\nadd_textbox|Duration: `w[`4~`w]|left|\nadd_textbox|Stock: `w[`4~`w]|\nadd_spacer|small|\nadd_textbox|`9Rules:|left|\nadd_smalltext|`91. `2Trying Sell Your Account Will Result Ipban.|left|\nadd_spacer|left|\nadd_textbox|`eHow To Buy:|\nadd_smalltext|`rIf u want buy `#2Level`r, Message `4@OWNER `ron Discord Server.``|left|\nadd_spacer|small|\nadd_textbox|`eWhen will i received my purchase:|\nadd_smalltext|`rYou Will received within `424`r hours after you have made your payment.|left|\nadd_text_input|textlevel|||100|\nend_dialog|leveldialog|Cancel|OK|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "depowl")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wPurchase `2KXPS `9Premium WL``|left|242|\nadd_smalltext|`4Make sure to read this information clearly!``|left|\n\nadd_spacer|small|\nadd_textbox|Price: `31/1 Growtopia World Lock.|left|\nadd_textbox|Duration: `w[`4~`w]|left|\nadd_textbox|Stock: `w[`4~`w]|\nadd_spacer|small|\nadd_textbox|`9Rules:|left|\nadd_smalltext|`91. `2Trying Sell Your Account Will Result Ipban.|left|\nadd_spacer|left|\nadd_textbox|`eHow To Buy:|\nadd_smalltext|`rIf u want buy `2KXPS `9Premium WL`r, Message `4@OWNER `ron Discord Server.``|left|\nadd_spacer|small|\nadd_textbox|`eWhen will i received my purchase:|\nadd_smalltext|`rYou Will received within `424`r hours after you have made your payment.|left|\nend_dialog|gazette|Close||"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "no")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_textbox|`wWelcome to the `5KXPS Items `wStore|left|\nadd_smalltext|`wThere is 2 types of items currency in GT`4ID `wChoose your currency|left|\nadd_spacer|small|\nadd_button|no2|`wPurchase `9in-game items `w(`6Premium Wls`w)|noflags|0|0|\nadd_button|no1|`wPurchase `9in-game items `w(`9Gems`w)|noflags|0|0|\nend_dialog|store|Close|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "no2")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`9Premium items``|left|1486|\nadd_button_with_icon|rayman||staticBlueFrame|5480|30|\nadd_button_with_icon|spd||staticBlueFrame|2952|25|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_quick_exit|\nend_dialog|marketthingie|Close||\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "no1")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wWelcome to our store!|left|1430|\nadd_spacer|small|\nadd_label|small|`2Please choose item that you want to purchase!|left|\nadd_spacer|small|\nadd_label_with_icon|small|`9Legendary items``|left|1790|\nadd_button_with_icon|ltit||staticBlueFrame|1794|300000|\nadd_button_with_icon|lgb||staticBlueFrame|1780|100000|\nadd_button_with_icon|lgw||staticBlueFrame|1784|100000|\nadd_button_with_icon|lgd||staticBlueFrame|1782|100000|\nadd_button_with_icon|lgk||staticBlueFrame|2592|100000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|lwp||staticBlueFrame|6026|100000|\nadd_button_with_icon|lkw||staticBlueFrame|7734|100000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`2Token items``|left|1486|\nadd_button_with_icon|cwd||staticBlueFrame|1204|5000|\nadd_button_with_icon|rfs||staticBlueFrame|1438|15000|\nadd_button_with_icon|cdg||staticBlueFrame|1742|10000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`5Special items``|left|1000|\nadd_button_with_icon|pwing||staticBlueFrame|1674|10000|\nadd_button_with_icon|dav||staticBlueFrame|8286|150000|\nadd_button_with_icon|zeus||staticBlueFrame|1804|5000|\nadd_button_with_icon|ndev||staticBlueFrame|1970|7500|\nadd_button_with_icon|txmom||staticBlueFrame|4626|7500|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|flashaxe||staticBlueFrame|1836|3000|\nadd_button_with_icon|violet||staticBlueFrame|1868|7500|\nadd_button_with_icon|chimera||staticBlueFrame|6334|5000|\nadd_button_with_icon|brainflower||staticBlueFrame|3462|10000|\nadd_button_with_icon|ccrown||staticBlueFrame|3138|7500|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`6Super Special Items``|left|1458|\nadd_button_with_icon|hammer||staticBlueFrame|7912|100000|\nadd_button_with_icon|ances||staticBlueFrame|5078|950000|\nadd_button_with_icon|tk69||staticBlueFrame|8834|350000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_quick_exit|\nend_dialog|marketthingie|Close||\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "store") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_button|divine|`wPurchase `cDivine|noflags|3798|\nadd_button|god|`wPurchase `sGod|noflags|3798|\nadd_button|mods|`wPurchase `^MOD|noflags|4758|\nadd_button|vip|`wPurchase `1VIP|noflags|3798|\nadd_button|gems|`wPurchase `6GEM|left|112|\nadd_button|lvl|`wPurchase `3LEVEL|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "mods") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `^Moderator``|left|278|\n\nadd_spacer|small|\nadd_spacer|small| |left|1426|\nadd_label|small|Price: `13Diamond Locks.|left|1432|\nadd_label|small|`oStock: `w[`4~`w]|left|1432|\nadd_label|small|Duration: `w[`4~`0] |left|1432|\nadd_label|small|`6Rules:|left|1432|\nadd_label|small|`61.`2Do not abuse your power|left|3132|\nadd_label|small|`62.`2If you are going to punish people,make sure to have screenshot/video proof.|left|1432|\nadd_label|small|`63.`2Sharing account will result in a account loss.|left|212|\nadd_label|small|`64.`2Trying to sell account will be result in a `4IPBAN`0.|left|322|\nadd_spacer|small| |left|921|\nadd_label|small|`6Commands:|left|3223|\nadd_label|small|`eAll command will be displayed in /mhelp.|left|212|\nadd_spacer|small| |left|212|\nadd_label|small|`eHow to buy:|left|212|\nadd_label|small|`rDm Jar or Chandra to purchase moderator!|left|212|\nadd_button|back|`5Close|noflags|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "divine") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `cDivine``|left|278|\n\nadd_spacer|small|\nadd_spacer|small| |left|1426|\nadd_label|small|Price: `150 Diamond Locks.|left|1432|\nadd_label|small|`oStock: `w[`4~`w]|left|1432|\nadd_label|small|Duration: `w[`4~`0] |left|1432|\nadd_label|small|`6Rules:|left|1432|\nadd_label|small|`61.`2Do not abuse your power|left|3132|\nadd_label|small|`62.`2If you are going to punish people,make sure to have screenshot/video proof.|left|1432|\nadd_label|small|`63.`2Sharing account will result in a account loss.|left|212|\nadd_label|small|`64.`2Trying to sell account will be result in a `4IPBAN`0.|left|322|\nadd_spacer|small| |left|921|\nadd_label|small|`6Commands:|left|3223|\nadd_label|small|`eAll command will be displayed in /dhelp.|left|212|\nadd_spacer|small| |left|212|\nadd_label|small|`eHow to buy:|left|212|\nadd_label|small|`rDm Jar or Chandra to purchase moderator!|left|212|\nadd_button|back|`5Close|noflags|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "god") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `sGod``|left|278|\n\nadd_spacer|small|\nadd_spacer|small| |left|1426|\nadd_label|small|Price: `125 Diamond Locks.|left|1432|\nadd_label|small|`oStock: `w[`4~`w]|left|1432|\nadd_label|small|Duration: `w[`4~`0] |left|1432|\nadd_label|small|`6Rules:|left|1432|\nadd_label|small|`61.`2Do not abuse your power|left|3132|\nadd_label|small|`62.`2If you are going to punish people,make sure to have screenshot/video proof.|left|1432|\nadd_label|small|`63.`2Sharing account will result in a account loss.|left|212|\nadd_label|small|`64.`2Trying to sell account will be result in a `4IPBAN`0.|left|322|\nadd_spacer|small| |left|921|\nadd_label|small|`6Commands:|left|3223|\nadd_label|small|`eAll command will be displayed in /ghelp.|left|212|\nadd_spacer|small| |left|212|\nadd_label|small|`eHow to buy:|left|212|\nadd_label|small|`rDm Jar or Chandra to purchase moderator!|left|212|\nadd_button|back|`5Close|noflags|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "vip") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `1VIP``|left|1486|\n\nadd_spacer|small|\nadd_spacer|small| |left|1426|\nadd_label|small|Price: `11Diamond Locks.|left|1432|\nadd_label|small|`oStock: `w[`4~`w]|left|1432|\nadd_label|small|Duration: `w[`4~`0] |left|1432|\nadd_label|small|`6Rules:|left|1432|\nadd_label|small|`61.`2Do not abuse your power|left|3132|\nadd_label|small|`62.`2Sharing account will result in a account loss.|left|212|\nadd_label|small|`63.`2Trying to sell account will be result in a `4IPBAN`0.|left|322|\nadd_spacer|small| |left|921|\nadd_label|small|`6Commands:|left|3223|\nadd_label|small|`eAll command will be displayed in /vhelp.|left|212|\nadd_spacer|small| |left|212|\nadd_label|small|`eHow to buy:|left|212|\nadd_label|small|`rDm Jar or Chandra to purchase vip!|left|212|\nadd_button|back|`5Close|noflags|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "gems") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `6Gems``|left|112|\n\nadd_spacer|small|\nadd_spacer|small| |left|1426|\nadd_label|small|Price: `110000/`6World lock|left|1432|\nadd_label|small|`oStock: `w[`4~`w]|left|1432|\nadd_label|small|Duration: `w[`4~`0] |left|1432|\nadd_label|small|`6Rules:|left|1432|\nadd_label|small|`61.`2Do not sell your gems to other people|left|3132|\nadd_label|small|`62.`2Trying to sell ur gems to other people will result in a `4IPBAN`0.|left|1432|\nadd_spacer|small| |left|212|\nadd_label|small|`eHow to buy:|left|212|\nadd_label|small|`rDm Jar or Chandra to purchase gems!|left|212|\nadd_button|back|`5Close|noflags|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "lvl") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPurchase `3Levels``|left|1488|\n\nadd_spacer|small|\nadd_spacer|small| |left|1426|\nadd_label|small|Price: `13/`6World lock|left|1432|\nadd_label|small|`oStock: `w[`4~`w]|left|1432|\nadd_label|small|Duration: `w[`4~`0] |left|1432|\nadd_label|small|`6Rules:|left|1432|\nadd_label|small|`61.`2Trying to sell ur account will result in a `4IPBAN`0.|left|3132|\nadd_spacer|small| |left|212|\nadd_label|small|`eHow to buy:|left|212|\nadd_label|small|`rDm Jar or Chandra to purchase level!|left|212|\nadd_button|back|`5Close|noflags|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "yeslwp") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 99999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Whip of Truth!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtLWHIP = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;

									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

							}
							if (btn == "yeslkw") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 99999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Dragon Knight's Wings!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtLKW = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;

									PlayerInventory inventory;
									InventoryItem item;
									item.itemCount = 1;
									item.itemID = 18;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 32;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 7734;
									inventory.items.push_back(item);
									sendInventory(peer, inventory);

									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

							}


							if (btn == "anticrash") {
								sendConsoleMsg(peer, "`8Your set was removed in order to fix the crash. You can now continue playing, before that, we will need to disconnect you `3ONCE`8.");
								((PlayerInfo*)(peer->data))->cloth_hair = 0;
								((PlayerInfo*)(peer->data))->cloth_shirt = 0;
								((PlayerInfo*)(peer->data))->cloth_pants = 0;
								((PlayerInfo*)(peer->data))->cloth_feet = 0;
								((PlayerInfo*)(peer->data))->cloth_face = 0;
								((PlayerInfo*)(peer->data))->cloth_hand = 0;
								((PlayerInfo*)(peer->data))->cloth_back = 0;
								((PlayerInfo*)(peer->data))->cloth_mask = 0;
								((PlayerInfo*)(peer->data))->cloth_necklace = 0;
								((PlayerInfo*)(peer->data))->cloth_ances = 0;

								enet_peer_disconnect_later(peer, 0);


							}




							if (btn == "yescwd") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 4999)
								{

									bool success = true;
									SaveShopsItem(1204, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Focused Eyes `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 5000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtCWD = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesrfs") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 14999)
								{

									bool success = true;
									SaveShopsItem(1438, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Golden Pickaxe `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 15000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtRFS = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesray") {
								int wl = ((PlayerInfo*)(peer->data))->kxpswl;
								int price = 30;

								if (wl > 29)
								{
									bool success = true;
									SaveShopsItem(5480, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Rayman Fist `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int wls = wl - price;




									((PlayerInfo*)(peer->data))->kxpswl = wl - price;
									((PlayerInfo*)(peer->data))->boughtRAY = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY; //edit
									j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl;




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough KXPS WLS."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yestk") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 349999)
								{

									bool success = true;
									SaveShopsItem(8834, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3TK69 Mystical board `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 350000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtTK = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesaac") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 949999)
								{

									bool success = true;
									SaveShopsItem(5084, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Ancestral `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 950000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtAAC = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}



							if (btn == "yesspd") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));
								int b = ((PlayerInfo*)(peer->data))->kxpswl;

								if (b > 24)
								{

									bool success = true;
									SaveShopsItem(2952, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Digger Spade `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 25;



									((PlayerInfo*)(peer->data))->boughtSPD = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD; //edit
									j["kxpswl"] = gemcalc10k;




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yespwng") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 9999)
								{
									bool success = true;
									SaveShopsItem(1674, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;

									sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Phoenix Wings `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 10000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
									((PlayerInfo*)(peer->data))->boughtPHOENIX = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yeszeus") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 4999)
								{

									bool success = true;
									SaveShopsItem(1804, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Zeus's Lightning Bolt `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 5000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									((PlayerInfo*)(peer->data))->boughtZEUS = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}

							if (btn == "yeswar") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 199999)
								{
									bool success = true;
									SaveShopsItem(7912, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;

									sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3War Hammers `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									int gemcalc10k = b - 200000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtWAR = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							if (btn == "yesccrown") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 7499)
								{

									bool success = true;
									SaveShopsItem(3138, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Challenge Crown `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 7500;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtCCROWN = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yeschimera") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 4999)
								{
									bool success = true;
									SaveShopsItem(6334, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Chimera Wings `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 5000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtCHIMERA = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesbrain") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 9999)
								{

									bool success = true;
									SaveShopsItem(3462, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Brain Flower `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 10000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtBRAIN = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesflashaxe") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 2999)
								{
									bool success = true;
									SaveShopsItem(1836, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Diamond Flashaxe `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 3000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtFLASHAXE = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesviolet") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 7499)
								{
									bool success = true;
									SaveShopsItem(1868, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Violet Protodrake Leash `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 7500;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtVIOLET = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesdav") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 149000)
								{

									bool success = true;
									SaveShopsItem(8286, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Da Vinci Wings `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 150000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtDAV = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesndev") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 7499)
								{

									bool success = true;
									SaveShopsItem(1970, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Nightmare Devil Wings `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 7500;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtNDEV = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yestxmom") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 7499)
								{

									bool success = true;
									SaveShopsItem(4626, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3TXMom Crown `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 7500;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtTXMOM = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yescdg") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 9999)
								{

									bool success = true;
									SaveShopsItem(1742, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `1You have `2purchased `3Puppy Leash `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 10000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtCDG = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yeslgk") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 99999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Katana!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtLGK = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									PlayerInventory inventory;
									InventoryItem item;
									item.itemCount = 1;
									item.itemID = 18;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 32;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 2592;
									inventory.items.push_back(item);
									sendInventory(peer, inventory);



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yeslgb") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 99999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Bot!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtLGB = true;



									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									PlayerInventory inventory;
									InventoryItem item;
									item.itemCount = 1;
									item.itemID = 18;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 32;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 1780;
									inventory.items.push_back(item);
									sendInventory(peer, inventory);



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yeslgw") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 99999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Legendary Wings!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtLGW = true;



									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									PlayerInventory inventory;
									InventoryItem item;
									item.itemCount = 1;
									item.itemID = 18;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 32;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 1784;
									inventory.items.push_back(item);
									sendInventory(peer, inventory);



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yeslgd") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 99999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now bought Dragon of Legend!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtLGD = true;



									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;

									PlayerInventory inventory;
									InventoryItem item;
									item.itemCount = 1;
									item.itemID = 18;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 32;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 1782;
									inventory.items.push_back(item);
									sendInventory(peer, inventory);


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "lwings")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wDisabled shop, need to improve it soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;

								/*std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 9999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - You now have access to legendary wings! do /item 1784 to get them."));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 10000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems to buy these"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}*/


								if (btn == "pay500gem") {

									/*std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));

									std::ifstream ifsz2("wrenchsessions/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentxx((std::istreambuf_iterator<char>(ifsz2)),
										(std::istreambuf_iterator<char>()));

									std::ifstream ifs3("gemdb/" + contentxx + ".txt");
									std::string contentxxp((std::istreambuf_iterator<char>(ifs3)),
										(std::istreambuf_iterator<char>()));


									int b = atoi(content.c_str());
									int b2 = atoi(contentxxp.c_str());
									if (b > 499)
									{
										if (((PlayerInfo*)(peer->data))->rawName == contentxx)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wExplain me why you wanna pay to yourself first bruh.``"));
											ENetPacket * packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;

										}
										else
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`2TRANSACTION SUCCESS! - Sent `4Gems `wto " + contentxx + ", may need to reenter to take effect.``"));
											ENetPacket * packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;

											int gemcalc500 = b - 500;
											int gemcalc500add = b2 + 500;

											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc500);
											myfile2.close();

											ofstream myfile4;
											myfile4.open("gemdb/" + contentxx + ".txt");
											myfile4 << std::to_string(gemcalc500add);
											myfile4.close();
										}



									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rYou don't have enough `4Gems `w to pay.``"));
										ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									if (btn == "pay5000gem")
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#Feature coming soon!``"));
										ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/

								}

							}
							if (isPasswordDialog) {
								cout << oldpass << endl;
								cout << password2 << endl;
								cout << password2verify << endl;
								if (((PlayerInfo*)(peer->data))->tankIDPass != oldpass) {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Current Password you have entered is incorrect!``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
								else if (password2 != password2verify) {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Password Verify failed.``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
								else {
									((PlayerInfo*)(peer->data))->tankIDPass = password2;
									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["password"] = hashPassword(((PlayerInfo*)(peer->data))->tankIDPass); //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;
									GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), password2));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									GamePacket p9 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your password has been changed!"));
									ENetPacket* packet9 = enet_packet_create(p9.data,
										p9.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet9);
									delete p9.data;
									enet_peer_disconnect_later(peer, 0);
								}
							}
							if (isGrowidDialog) {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 19999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your growid has been changed!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 20000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->tankIDName = newgrowid;
									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load
									j["username"] = (((PlayerInfo*)(peer->data))->tankIDName); //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;
									GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), newgrowid));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rYou need to have enough gems to change `2name`w!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}

#ifdef REGISTRATION
							if (isRegisterDialog) {


								int regState = PlayerDB::playerRegister(peer, username, password, passwordverify, discord, pin);
								if (regState == 1) {
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string acontent((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int arda = 0;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << arda;
									myfile.close();
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^Your account has been created!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									GamePacket p8 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), username), password));
									ENetPacket* packet8 = enet_packet_create(p8.data,
										p8.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet8);

									//enet_host_flush(server);
									delete p8.data;
									enet_peer_disconnect_later(peer, 0);



									GamePacket p7 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), 0));
									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet7);
									GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), username), password));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);

									//enet_host_flush(server);
									delete p3.data;
									string nam1e = "```0" + username;
									((PlayerInfo*)(event.peer->data))->displayName = username;
									((PlayerInfo*)(event.peer->data))->tankIDName = username;
									((PlayerInfo*)(event.peer->data))->tankIDPass = password;
									((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
									((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
									((PlayerInfo*)(event.peer->data))->haveGrowId = true;
									GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), nam1e));
									memcpy(p4.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet4 = enet_packet_create(p4.data,
										p4.len,
										ENET_PACKET_FLAG_RELIABLE);
									string text = "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);

									//enet_host_flush(server);
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packet4);
											GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `2New Account with username: `4" + username + " `rIP:`4" + ((PlayerInfo*)(peer->data))->charIP));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
													ENetPacket* packet6 = enet_packet_create(p6.data,
														p6.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet6);




													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet2);

													//enet_host_flush(server);
												}
											}
											delete data;
											delete p6.data;
											delete p4.data;
										}
									}
								}
								else if (regState == -1) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Account creation failed, because it already exists!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -2) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Account creation failed, because the name is too short!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -3) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Passwords mismatch!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -4) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Account creation failed, because email address is invalid!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -5) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Account creation failed, because Discord ID is invalid!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -6) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Account creation failed due to account name that is being used by system!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -7) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Oops! `9Looks like players data have been resetted, `wmake sure to use your `bPIN `wthat you used when creating your account. `2For help, message `w! Wry#4304 on Discord!`w``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -8) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Oops! `9Looks like `wPIN `9is not in a range of 1000-9999. Choose a `wPIN `9from 1000-9999!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -9) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Oops! `9Looks like `wPIN `9contains text, only numbers. Choose a `wPIN `9from 1000-9999!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -10) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Player name contains illegal characters.``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -11) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Your connection have been cancelled!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
#endif
							}
						}

						string dropText = "action|drop\n|itemID|"; // drop funkcianalumas
						if (cch.find(dropText) == 0)
						{

							std::stringstream ss(cch);
							std::string to;
							int idx = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") idx = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							((PlayerInfo*)(peer->data))->lastdropitem = idx;
							((PlayerInfo*)(peer->data))->lastdropitemcount = count;

							if (idx == -1) continue;
							if (itemDefs.size() < idx || idx < 0) continue;
							if (((PlayerInfo*)(peer->data))->lastdropitem == 18 || ((PlayerInfo*)(peer->data))->lastdropitem == 32) {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You can't drop that."));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}
							else {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Drop Coming Soon!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}


								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wDrop " + itemDefs.at(idx).name + "``|left|" + std::to_string(idx) + "|\nadd_textbox|`oHow many to drop?|\nadd_text_input|dropitemcount|||3|\nend_dialog|dropdialog|Cancel|Ok|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
								/*GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Drop Coming Soon!"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;*/
							}
						}

						string trashText = "action|trash\n|itemID|"; // drop funkcianalumas
						if (cch.find(trashText) == 0)
						{

							std::stringstream ss(cch);
							std::string to;
							int idx = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") idx = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							((PlayerInfo*)(peer->data))->lasttrashitem = idx;
							((PlayerInfo*)(peer->data))->lasttrashitemcount = count;

							if (idx == -1) continue;
							if (itemDefs.size() < idx || idx < 0) continue;
							if (((PlayerInfo*)(peer->data))->lasttrashitem == 18 || ((PlayerInfo*)(peer->data))->lasttrashitem == 32) {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You can't trash that."));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}
							else {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wTrash " + itemDefs.at(idx).name + "``|left|" + std::to_string(idx) + "|\nadd_textbox|`oHow many to trash?|\nadd_text_input|trashitemcount|||3|\nend_dialog|trashdialog|Cancel|Ok|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
						}

						if (cch.find("text|") != std::string::npos) {
							bool canchat = true;
							PlayerInfo* pData = ((PlayerInfo*)(peer->data));
							if (str.length() && str[0] == '/')
							{
								sendConsoleMsg(peer, "`6" + str);
								sendAction(peer, ((PlayerInfo*)(peer->data))->netID, str);

							}

							else if (((PlayerInfo*)(peer->data))->taped == false) {
								sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, str);

							}
							else {
								for (char c : str)

									if (c < 0x18 || std::all_of(str.begin(), str.end(), isspace))
									{
										canchat = false;
									}
								if (canchat)
								{
									sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, "`7I'm `bcursed `#:( ");

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Can't talk properly while you're duct-taped!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

							}

							if (str.find('/') != std::string::npos)
							{
								time_t now = time(0);
								char* dt = ctime(&now);
								ofstream command("chatLogs/commands.txt", std::ios_base::app);
								command << dt << ((PlayerInfo*)(peer->data))->rawName << ": " << str << endl << endl;
								command.close();
							}
							else
							{
								time_t now = time(0);
								char* dt = ctime(&now);
								ofstream chat("chatLogs/chat.txt", std::ios_base::app);
								chat << dt << ((PlayerInfo*)(peer->data))->rawName << ": " << str << endl << endl;
								chat.close();
							}












							if (str == "/mod") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 0) {
									((PlayerInfo*)(peer->data))->skinColor = atoi("-1`");
									sendClothes(peer);
									((PlayerInfo*)(peer->data))->isModState = true;
									((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
									sendState(peer);
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^Moderator Mode `2Enabled`^!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p.data;
									delete data;
								}
							}

							else if (str == "/news")
							{
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), news));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete p3.data;
							}

							else if (str == "/unlegend") {
								sendConsoleMsg(peer, "`oYou no longer have `6legend `oname!");
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName;
								((PlayerInfo*)(peer->data))->boughtLTIT = false;

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT; //edit




								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;
							}

							else if (str.substr(0, 4) == "/as ")
							{
								string guess = str.substr(4, cch.length() - 4 - 1);
								std::ifstream ifsz("math.txt");
								std::string acontent((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));
								string a = acontent;
								std::ifstream ifssz("gems.txt");
								std::string gems((std::istreambuf_iterator<char>(ifssz)),
									(std::istreambuf_iterator<char>()));
								int prize = atoi(gems.c_str());
								std::ifstream aifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string acontents((std::istreambuf_iterator<char>(aifsz)),
									(std::istreambuf_iterator<char>()));
								int z = atoi(acontents.c_str());
								if (guess == a)
								{
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p411 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oOk, `5 The winner is `2" + name));
										ENetPacket* packet411 = enet_packet_create(p411.data,
											p411.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet411);
										delete p411.data;

										string null = "if98efhuiuf84ydfhu";
										ofstream myfile;
										myfile.open("math.txt");
										myfile << null;
										myfile.close();

										int total = z + prize;
										string news = std::to_string(total);
										ofstream myfiles;
										myfiles.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfiles << news;
										myfiles.close();

										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), total));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
									}
								}
								else
								{
									GamePacket p411 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oThere is no event right now"));
									ENetPacket* packet411 = enet_packet_create(p411.data,
										p411.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet411);
									delete p411.data;
								}
							}

							else if (str == "/save") {
								ENetPeer* Peer;
								saveLevel(peer);
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Account Saved!!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete p3.data;
							}


							/*else if (str.substr(0, 8) == "/givewl ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == ) {
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										ENetPeer* currentPeer;
										string imie = str.substr(8, cch.length() - 8 - 1);
										int tkn = 0;
										if (imie.find(" ") != std::string::npos)
										{
											tkn = atoi(imie.substr(imie.find(" ") + 1).c_str());
											imie = imie.substr(0, imie.find(" "));
										}
										else {
											GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Pay failed"));
											ENetPacket* packet4 = enet_packet_create(p4.data,
												p4.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet4);
											delete p4.data;
										}
										if (tkn < 0)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You think you are smart huh?"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}
										else if (tkn >= 0)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player`w " + ((PlayerInfo*)(peer->data))->rawName + "`o gave you `2" + std::to_string(tkn) + " Tokens`o!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED) {
													int token = ((PlayerInfo*)(currentPeer->data))->kxpswl;
													int a = token + tkn;

													((PlayerInfo*)(currentPeer->data))->kxpswl = a;

													std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();

														GamePacket p41ss = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not Found"));
														ENetPacket* packet41ss = enet_packet_create(p41ss.data,
															p41ss.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet41ss);
														delete p41ss.data;
													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["kxpswl"] = ((PlayerInfo*)(currentPeer->data))->kxpswl; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;

													GamePacket p41s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> `4Players is offline `6But we will give him `2" + std::to_string(tkn) + " `9WLS"));
													ENetPacket* packet41s = enet_packet_create(p41s.data,
														p41s.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet41s);
													delete p41s.data;
												}
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
												{
													int token = ((PlayerInfo*)(currentPeer->data))->kxpswl;
													int a = token + tkn;

													((PlayerInfo*)(currentPeer->data))->kxpswl = a;

													std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();

														GamePacket p41ssv = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not Found"));
														ENetPacket* packet41ssv = enet_packet_create(p41ssv.data,
															p41ssv.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet41ssv);
														delete p41ssv.data;
													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["kxpswl"] = ((PlayerInfo*)(currentPeer->data))->kxpswl; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;

													GamePacket p41 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou gave `5" + imie + " `2" + std::to_string(tkn) + " `9WLS"));
													ENetPacket* packet41 = enet_packet_create(p41.data,
														p41.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet41);
													delete p41.data;

													GamePacket p411 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou get `2" + std::to_string(tkn) + " `9WLS"));
													ENetPacket* packet411 = enet_packet_create(p41.data,
														p411.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet411);
													delete p411.data;
												}
											}
										}
									}
									else
									{
										GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are not allowed to use this command!!!"));
										ENetPacket* packet4 = enet_packet_create(p4.data,
											p4.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet4);
										delete p4.data;
									}
								}
							}*/

							/*else if (str.substr(0, 8) == "/givewl ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										ENetPeer* currentPeer;
										string imie = str.substr(8, cch.length() - 8 - 1);
										int tkn = 0;
										bool found = false;
										if (imie.find(" ") != std::string::npos)
										{
											tkn = atoi(imie.substr(imie.find(" ") + 1).c_str());
											imie = imie.substr(0, imie.find(" "));
										}
										else {
											int a = 0;

											std::ifstream iff("players/" + imie + ".json");


											if (iff.fail()) {
												iff.close();


											}
											if (iff.is_open()) {
											}
											json x;
											iff >> x; //load


											a = x["kxpswl"];

											x["kxpswl"] = a + tkn;


											std::ofstream o("players/" + imie + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << x << std::endl;

											GamePacket p41s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> `4Players is offline `6But we will give to `5" + imie + " `2" + std::to_string(tkn) + " `9WLS"));
											ENetPacket* packet41s = enet_packet_create(p41s.data,
												p41s.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet41s);
											delete p41s.data;
										}
										if (tkn < 0)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You think you are smart huh?"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}
										else if (tkn >= 0)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player`w " + ((PlayerInfo*)(peer->data))->rawName + "`o gave you `2" + std::to_string(tkn) + " Tokens`o!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
												{
													int token = ((PlayerInfo*)(currentPeer->data))->kxpswl;
													int a = token + tkn;

													((PlayerInfo*)(currentPeer->data))->kxpswl = a;

													found = true;

													std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");


													if (ifff.fail()) {
														ifff.close();


													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load


													j["kxpswl"] = ((PlayerInfo*)(currentPeer->data))->kxpswl; //edit




													std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}

													o << j << std::endl;

													GamePacket p41 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou gave `5" + imie + " `2" + std::to_string(tkn) + " `9WLS"));
													ENetPacket* packet41 = enet_packet_create(p41.data,
														p41.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet41);
													delete p41.data;

													GamePacket p411 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou get `2" + std::to_string(tkn) + " `9WLS"));
													ENetPacket* packet411 = enet_packet_create(p411.data,
														p411.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet411);
													delete p411.data;
												}
											}


										}
										if (found = false)
										{
											int a = 0;

											std::ifstream iff("players/" + imie + ".json");


											if (iff.fail()) {
												iff.close();


											}
											if (iff.is_open()) {
											}
											json x;
											iff >> x; //load


											a = x["kxpswl"];

											x["kxpswl"] = a + tkn;


											std::ofstream o("players/" + imie + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << x << std::endl;

											GamePacket p41s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> `4Players is offline `6But we will give to `5" + imie + " `2" + std::to_string(tkn) + " `9WLS"));
											ENetPacket* packet41s = enet_packet_create(p41s.data,
												p41s.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet41s);
											delete p41s.data;
										}

									}
									else
									{
										GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Pls Verify!!!"));
										ENetPacket* packet4 = enet_packet_create(p4.data,
											p4.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet4);
										delete p4.data;
									}
								}
							}*/
							else if (str.substr(0, 8) == "/givewl ") {
								string imie = str.substr(8, cch.length() - 8 - 1);
								int wls = 0;
								bool found = false;
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									ENetPeer* currentPeer;

									if (imie.find(" ") != std::string::npos)
									{
										wls = atoi(imie.substr(imie.find(" ") + 1).c_str());
										imie = imie.substr(0, imie.find(" "));
									}
									int a = 0;
									int b = 0;
									bool exist = std::experimental::filesystem::exists("claim/" + imie + ".json");
									if (!exist)
									{
										std::ofstream o("claim/" + imie + ".json");
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										json j;
										j["gems"] = 0;
										j["wls"] = 0;
										j["level"] = 0;
										o << j << std::endl;
									}
									std::ifstream ifff("claim/" + imie + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load

									a = j["wls"];
									b = wls + a;

									std::ifstream iff("claim/" + imie + ".json");


									if (iff.fail()) {
										iff.close();


									}
									if (iff.is_open()) {
									}
									json x;
									iff >> x; //load

									x["wls"] = b;


									std::ofstream oo("claim/" + imie + ".json"); //save
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									oo << x << std::endl;

									GamePacket p41 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou gave `5" + imie + " `2" + std::to_string(wls) + " `9WLS"));
									ENetPacket* packet41 = enet_packet_create(p41.data,
										p41.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet41);
									delete p41.data;



									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == imie) {
											found = true;

											GamePacket ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wMessage from `4Admin`0: `2 We `5have sent your `1WL KXPS's `7Do `o/claim``"), "audio/hub_open.wav"), 0));

											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete ps.data;
										}


									}

								}

							}
							else if (str.substr(0, 11) == "/givelevel ") {
								string imie = str.substr(11, cch.length() - 11 - 1);
								int wls = 0;
								bool found = false;
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									ENetPeer* currentPeer;

									if (imie.find(" ") != std::string::npos)
									{
										wls = atoi(imie.substr(imie.find(" ") + 1).c_str());
										imie = imie.substr(0, imie.find(" "));
									}
									int a = 0;
									int b = 0;
									bool exist = std::experimental::filesystem::exists("claim/" + imie + ".json");
									if (!exist)
									{
										std::ofstream o("claim/" + imie + ".json");
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										json j;
										j["gems"] = 0;
										j["wls"] = 0;
										j["level"] = 0;
										o << j << std::endl;
									}
									std::ifstream ifff("claim/" + imie + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load

									a = j["level"];
									b = wls + a;

									std::ifstream iff("claim/" + imie + ".json");


									if (iff.fail()) {
										iff.close();


									}
									if (iff.is_open()) {
									}
									json x;
									iff >> x; //load

									x["level"] = b;


									std::ofstream oo("claim/" + imie + ".json"); //save
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									oo << x << std::endl;

									GamePacket p41 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou gave `5" + imie + " `2" + std::to_string(wls) + " `9Levels"));
									ENetPacket* packet41 = enet_packet_create(p41.data,
										p41.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet41);
									delete p41.data;



									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == imie) {
											found = true;

											GamePacket ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wMessage from `4Admin`0: `2 We `5have sent your `1Level's `7Do `o/claim``"), "audio/hub_open.wav"), 0));

											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete ps.data;
										}


									}

								}

							}
							else if (str.substr(0, 10) == "/givegems ") {
								string imie = str.substr(10, cch.length() - 10 - 1);
								int wls = 0;
								bool found = false;
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									ENetPeer* currentPeer;

									if (imie.find(" ") != std::string::npos)
									{
										wls = atoi(imie.substr(imie.find(" ") + 1).c_str());
										imie = imie.substr(0, imie.find(" "));
									}
									bool exist = std::experimental::filesystem::exists("claim/" + imie + ".json");
									if (!exist)
									{
										std::ofstream o("claim/" + imie + ".json");
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										json j;
										j["gems"] = 0;
										j["wls"] = 0;
										j["level"] = 0;
										o << j << std::endl;
									}

									std::ifstream ifff("claim/" + imie + ".json");

									
									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json xf;
									ifff >> xf; //load

									int bs = xf["gems"];
									int b = bs + wls;
									
									std::ifstream iff("claim/" + imie + ".json");


									if (iff.fail()) {
										iff.close();


									}
									if (iff.is_open()) {
									}
									json x;
									iff >> x; //load

									x["gems"] = b;


									std::ofstream oo("claim/" + imie + ".json"); //save
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									oo << x << std::endl;

									GamePacket p41 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou gave `5" + imie + " `2" + std::to_string(wls) + " `9Gems"));
									ENetPacket* packet41 = enet_packet_create(p41.data,
										p41.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet41);
									delete p41.data;



									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == imie) {
											found = true;

											GamePacket ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wMessage from `4Admin`0: `2 We `5have sent your `1Gems `7Do `o/claim``"), "audio/hub_open.wav"), 0));

											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete ps.data;
										}


									}

								}

							}
							else if (str == "/claim") {
								claim(peer);
							}
							else if (str == "/mods") {

								string x;

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 666) {
										x.append("`^" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``, ");
									}

								}
								x = x.substr(0, x.length() - 2);

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5Moderators online: " + x));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
							}
							else if (str.substr(0, 11) == "/depoworld ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									string world = str.substr(11, cch.length() - 11 - 1);
									ofstream myfile;
									myfile.open("deposit.txt");
									myfile << world;
									myfile.close();

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You changed the Deposit World :)"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							else if (str == "/deposit") {
								string name = ((PlayerInfo*)(peer->data))->rawName;
								std::ifstream ifs("deposit.txt");
								std::string deposit((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));
								string depositworld = deposit;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`oDeposit info|left|3138|\nadd_spacer|small|\nadd_textbox|`5Hi everyone :) if you guys want to deposit just go to `o" + depositworld + " `5Don't forget to record and send proof to Server Creator``|left|100|\nadd_textbox|`2Contact This `4Our `5Discord `4Admin `ofor more information``|left|100|\nadd_spacer|small|\nadd_button|idontwantto|`2Understand|noflags|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							else if (str == "/sdepo") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {

									string name = ((PlayerInfo*)(peer->data))->rawName;
									std::ifstream ifs("deposit.txt");
									std::string deposit((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));
									string depositworld = deposit;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`oDeposit Announcement|left|3138|\nadd_textbox|`5from : `o" + name + "``|left|100|\nadd_spacer|small|\nadd_textbox|`5Hi everyone :) if you guys want to deposit just go to `o" + depositworld + " `5Don't forget to record and send proof to Server Creator or `#chandra#0001 :)``|left|100|\nadd_textbox|`2Contact This `4Number `oFor more information `6: hidden|left|100|\nadd_spacer|small|\nadd_button|idontwantto|`2Understand|noflags|0|0|"));
									string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;







									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;

										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;

								}
							}

							/*else if (str.substr(0, 5) == "/sdb ") {
								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Not allowed to SDB while ducttaped!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									if (((PlayerInfo*)(peer->data))->level < 10)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> `4OOPS: `oTo cut down on `4spam `o the broadcast features available to who are level `55 `oand higher."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {

										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 0)
										{
											using namespace std::chrono;
											string message = str.substr(5, cch.length() - 5 - 1);
											string world = ((PlayerInfo*)(peer->data))->currentWorld;
											if (((PlayerInfo*)(peer->data))->lastSB + 30000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											}
											else {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Cooldown >> Wait 30 seconds to throw another Super-Broadcast!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												continue;
											}
											int gemcalc10k = b - 0;


											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;

											GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> Super duper broadcast send to all Player!"));
											ENetPacket* packet5 = enet_packet_create(p5.data,
												p5.len,
												ENET_PACKET_FLAG_RELIABLE);



											enet_peer_send(peer, 0, packet5);
											delete p5.data;

											string name = ((PlayerInfo*)(peer->data))->rawName; /*"`#[`eVIP-SB`#] `5** From (`6" + name + "`#) in [`4HIDDEN!`#] ** : `9"*/
											/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`oSuper Duper Broadcast|left|3138|\nadd_textbox|`5from : `o" + name + "``|left|100|\nadd_spacer|small|\nadd_textbox|`5" + message + "``|left|100|\nadd_spacer|small|\nadd_button|warpsdb|`5Warp To`o " + world + "``|noflags|0|0|\nadd_button|idontwantto|`oIgnore|noflags|0|0|"));
											string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;


											std::ifstream iff("sdbworld.json");


											if (iff.fail()) {
												iff.close();


											}
											if (iff.is_open()) {
											}
											json x;
											iff >> x; //load


											x["World"] = ((PlayerInfo*)(peer->data))->currentWorld;




											std::ofstream o("sdbworld.json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << x << std::endl;




											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;

												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet);




												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet2);

												//enet_host_flush(server);
											}
											delete data;
											delete p.data;
										}
										else
										{
											int needgems = 200 - b;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to send Super-Broadcast"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}
								}
							}*/
							else if (str == "/nicked") {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									string x = "";


									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;


										if (((PlayerInfo*)(currentPeer->data))->adminLevel > 333) {

											string name = ((PlayerInfo*)(currentPeer->data))->displayName;

											if ((((PlayerInfo*)(currentPeer->data))->isNicked == true))
											{

												x.append("`w'" + ((PlayerInfo*)(currentPeer->data))->displayName + "'" + "->" + ((PlayerInfo*)(currentPeer->data))->rawName + "``, ");

											}











										}


									}
									x = x.substr(0, x.length() - 2);


									if (x == "")
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "``Nicked vips/mods/devs: None visible."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "``Nicked vips/mods/devs: " + x));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
									}

								}
							}
							else if (str == "/find")
							{
								if (((PlayerInfo*)(peer->data))->haveGrowId)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wItem Finder``|left|6016|\nadd_textbox|Enter a word below to Find the item!|\nadd_text_input|item|Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\nadd_quick_exit|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									//enet_host_flush(server);
									delete p.data;
								}
							}
							else if (str == "/online") {

								string online = "";
								int total = 0;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0) {
										online += ((PlayerInfo*)(currentPeer->data))->displayName + "`o, `w";
										total++;
									}
								}
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5Players online [`wTotal: `2" + to_string(total) + "`5]: `w" + online));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							else if (str == "/magic") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 999) {
									if (!world) continue;
									float x = ((PlayerInfo*)(peer->data))->x;
									float y = ((PlayerInfo*)(peer->data))->y;
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										Player::OnParticleEffect(currentPeer, 105, x, y, 105);
									}

									bool found = false;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											bool isRev = false;
											for (int i = 5; i < 45; i++) {
												if (isRev == false) {
													Player::OnParticleEffect(currentPeer, 3, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
													Player::OnParticleEffect(currentPeer, 2, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
													isRev = true;
												}
												else {
													Player::OnParticleEffect(currentPeer, 3, x - i * (rand() % 9), y - i * (rand() % 9), i * 100);
													Player::OnParticleEffect(currentPeer, 2, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
													isRev = false;
												}
											}
										}
									}
								}
							}
							else if (str.substr(0, 4) == "/pe ")
							{   //NiteSpicy
								string name = ((PlayerInfo*)(peer->data))->rawName;
								string dname = ((PlayerInfo*)(peer->data))->displayName;
								int effect = atoi(str.substr(4).c_str());
								if (((PlayerInfo*)(peer->data))->adminLevel > 887) {
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;

										if (((PlayerInfo*)(peer->data))->adminLevel > 665) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD LOGS]: `2Particle Effect " + std::to_string(effect) + " from `4" + name + "`w(`4" + dname + "`w)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
										}
									}
								}
							}

							else if (str.substr(0, 8) == "/summon ") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 665) {
									if (str.substr(8, cch.length() - 8 - 1) == "") continue;
									if ((str.substr(8, cch.length() - 8 - 1) == "chandra")) continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) continue;
									string name = str.substr(8, str.length());


									ENetPeer* currentPeer;


									bool found = false;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;


										string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


										std::transform(name.begin(), name.end(), name.begin(), ::tolower);
										std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);


										if (name == name2) {
											GamePacket pox = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You were summoned by a mod."));
											ENetPacket* packetpox = enet_packet_create(pox.data,
												pox.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetpox);
											updateAllClothes(currentPeer);
											sendClothes(currentPeer);
											sendPlayerToPlayer(currentPeer, peer);
											found = true;
										}


									}
									if (found) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Summoning " + name));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
									}
									else {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not found!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
									}
								}


							}
							else if (str.substr(0, 5) == "/pay ")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));
								string name = ((PlayerInfo*)(peer->data))->rawName;
								int b = atoi(content.c_str());
								ENetPeer* currentPeer;
								string imie = str.substr(5, cch.length() - 5 - 1);
								int phm = 0;
								if (imie.find(" ") != std::string::npos)
								{
									phm = atoi(imie.substr(imie.find(" ") + 1).c_str());
									imie = imie.substr(0, imie.find(" "));
								}
								else {
									GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Pay failed"));
									ENetPacket* packet4 = enet_packet_create(p4.data,
										p4.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet4);
									delete p4.data;
								}
								if (phm < 0)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You think you are smart huh?"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else if (b >= phm)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player`w " + ((PlayerInfo*)(peer->data))->rawName + "`o paid you `2" + std::to_string(phm) + " Gems`o!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											std::string acontent((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int a = atoi(acontent.c_str());
											int bb = b - phm;
											int aa = a + phm;
											ofstream myfile;
											myfile.open("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											myfile << aa;
											myfile.close();
											myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile << bb;
											myfile.close();
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You paid`w " + imie + "`2 " + std::to_string(phm) + " Gems`o!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), bb));
											ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packetsa);
											GamePacket psa2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
											ENetPacket* packetsa2 = enet_packet_create(psa2.data, psa2.len, ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetsa2);
											enet_peer_send(currentPeer, 0, packet);
											delete psa.data;
											delete psa2.data;
											cout << name << " paid " << imie << " " << phm << endl;
										}
										if (((PlayerInfo*)(currentPeer->data))->adminLevel > 665) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `2" + name + "`w Paid `2" + imie + "`4 " + std::to_string(phm)));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
										}
									}
									delete p.data;
								}
								else if (b < phm)
								{
									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Sorry but you need " + std::to_string(phm) + " gems to pay someone."));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									delete p3.data;
								}
							}
							else if (str.substr(0, 6) == "/pull ")
							{
								cout << "/pull from " << ((PlayerInfo*)(peer->data))->displayName << endl;
								WorldInfo* world = getPlyersWorld(peer);
								if (((PlayerInfo*)(peer->data))->rawName == world->owner)
								{
									ENetPeer* currentPeer;
									string imie = str.substr(6, cch.length() - 6 - 1);
									int x = ((PlayerInfo*)(peer->data))->x;
									int y = ((PlayerInfo*)(peer->data))->y;
									string dupa;
									GamePacket pmsg = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o" + ((PlayerInfo*)(peer->data))->displayName + " `5pulls " + imie));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
											{
												dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
												PlayerMoving data;
												data.packetType = 0x0;
												data.characterState = 0x924; // animation
												data.x = x;
												data.y = y;
												data.punchX = -1;
												data.punchY = -1;
												data.XSpeed = 0;
												data.YSpeed = 0;
												data.netID = ((PlayerInfo*)(currentPeer->data))->netID;
												data.plantingTree = 0x0;
												SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
												GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												delete p2.data;
											}
										}
									}
									ENetPacket* packetmsg = enet_packet_create(pmsg.data,
										pmsg.len,
										ENET_PACKET_FLAG_RELIABLE);
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packetmsg);
										}
									}
									delete pmsg.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need to be world owner to use that command."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

								}
							}
							else if (str == "/cry")
							{
								GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ":'("), 0));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										enet_peer_send(currentPeer, 0, packet2);
									}
								}
								delete p2.data;
								continue;
							}

							else if (str.substr(0, 4) == "/me ")
							{
								if (((PlayerInfo*)(peer->data))->isDuctaped == false && ((PlayerInfo*)(peer->data))->haveGrowId == true)
								{
									string namer = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`#<`w" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`5>"), 0));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w<" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`w>"));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packet2);
											enet_peer_send(currentPeer, 0, packet3);
										}
									}
									delete p2.data;
									delete p3.data;
									continue;
								}
							}
							else if (str.substr(0, 11) == "/clearwarn ") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 998) {
									string imie = str.substr(11, cch.length() - 11 - 1);
									bool exist = std::experimental::filesystem::exists("warn/" + imie + ".txt");
									if (exist)
									{
										ofstream myfile;
										myfile.open("warn/" + imie + ".txt");
										myfile << "";
										myfile.close();
									}
								}
							}
							else if (str.substr(0, 11) == "/checkwarn ") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 555)
								{
									string imie = str.substr(11, cch.length() - 11 - 1);
									string txt = "";
									bool exist = std::experimental::filesystem::exists("warn/" + imie + ".txt");
									if (exist) {
										std::ifstream ifs("warn/" + imie + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifs)),
											(std::istreambuf_iterator<char>()));
										txt = content;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|" + imie + " `4Warn `9Check|left|3732|\nadd_spacer|small|" + txt + "\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
									else
									{
										bool exist = std::experimental::filesystem::exists("players/" + imie + ".json");
										if (exist)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5Player Has No Warn"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
										else
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6That player wasn't even exist"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}
							}
							else if (str.substr(0, 6) == "/warn ") {

								if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}



								string warn_info = str;

								size_t extra_space = warn_info.find("  ");
								if (extra_space != std::string::npos) {
									warn_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string warn_user;
								string warn_message;
								if ((pos = warn_info.find(delimiter)) != std::string::npos) {
									warn_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Please specify a `9Player `@You want to `4Warn`@!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								if ((pos = warn_info.find(delimiter)) != std::string::npos) {
									warn_user = warn_info.substr(0, pos);
									warn_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Please enter your `4Warn `@Reason!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
								string warner = ((PlayerInfo*)(peer->data))->rawName;
								warn_message = warn_info;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == warn_user) {
										int c = ((PlayerInfo*)(currentPeer->data))->warns;
										((PlayerInfo*)(currentPeer->data))->warns = c + 1;
										((PlayerInfo*)(currentPeer->data))->reason = warn_message;
										((PlayerInfo*)(currentPeer->data))->playerinfo = warner;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										int xy = ((PlayerInfo*)(currentPeer->data))->warns;
										string number = std::to_string(xy);
										string warner = ((PlayerInfo*)(currentPeer->data))->playerinfo;
										string reason = ((PlayerInfo*)(currentPeer->data))->reason;
										string color = "`" + number.substr(0, 1);
										string colors = "`5";
										string bonus = "add_textbox|";
										string footer = "|left|100|";
										bool exist = std::experimental::filesystem::exists("warn/" + name + ".txt");
										if (!exist)
										{
											ofstream warn("warn/" + name + ".txt", std::ios_base::app);
											warn << bonus << color << number << "`0. " << colors << reason << " `0" << "( " + color + warner + "`0 )" << footer << endl;
											warn.close();
										}
										ofstream warn("warn/" + name + ".txt", std::ios_base::app);
										warn << bonus << color << number << "`0. " << colors << reason << " `0" << "( " + color + warner + "`0 )" << footer << endl;
										warn.close();
										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^Player `9" + warn_user + " `^Have Been `4Warned`^!"));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet0);
										delete p0.data;
										GamePacket ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wWarning from `4Admin`0: " + warn_message), "audio/hub_open.wav"), 0));

										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;
										break;
									}
								}
							}

							else if (str == "/rules") {
								//cout << "/rules from " << ((PlayerInfo*)(peer->data))->displayName << endl;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHelp & Rules``|left|18|\n\nadd_spacer|small|\nadd_label|small|`wTo keep this community,We've got some rules to follow it:|left|1432|\nadd_label_with_icon|small|`wKeep your password secret.sharing your password will result in stolen world.|left|1432|\nadd_label_with_icon|small|`0Be civil. Bullying, racism,excessive profanity,sexual content and abuse behavior is not allowed|left|1432|\nadd_label_with_icon|small|`wUsing 1 hit ingame is illegal.Except you are using Rayman + sorrow.|left|1432|\nadd_label_with_icon|small|`wTrying to get punishment or asking for punishment can earn you a worse punishment.|left|1432|\nadd_label_with_icon|small|`wDon't lie about mods or fake official KortexPS system messages.``|left|1432|\nadd_label_with_icon|small|`wSelling gems for outside server items is illegal!|left|1432|\nadd_label_with_icon|small|`wDo not sb about a rude stuff.|left|1432|\nadd_label_with_icon|small|`0Do not war sb.|left|1432|\nadd_label_with_icon|small|`0Any advertising in any manner will lead to a ban or mute|left|1432|\nadd_label_with_icon|small|`0A Staff insult or other players can lead to a demotion in rank or mute or ban or curse.|left|1432|\nadd_label_with_icon|small|`0Any mention of selling your account will result in your account being blocked.|left|1432|\nadd_label_with_icon|small|`w@Moderators are here to enforce the rules. Abusing, spamming or harassing mods will have consequences.|left|1432|\nadd_label_with_icon|small|`w/ban, /mute, /curse, /warn without proofs may result in demotion .|left|1432|\nadd_label|small|`0Thank You!|left|21|\nadd_label|small|~`e@Chandra|left|32|\nadd_button|chc0|`0I accept these Rules.|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								//enet_host_flush(server);
								delete p.data;
							}

							else if (str.substr(0, 3) == "/r ") {
								if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!"));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									delete p0.data;
									continue;
								}


								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastMsger) {

										((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `2" + ((PlayerInfo*)(peer->data))->lastMsger + "`6)"));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet0);
										delete p0.data;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:0_PL:4_OID:_CT:[MSG]_ `c>> from `c(`w" + ((PlayerInfo*)(peer->data))->rawName + "`c) in [`$" + ((PlayerInfo*)(peer->data))->currentWorld + "`c] >`$ " + str.substr(3, cch.length() - 3 - 1) + "`o"));
										string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										delete data;
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;
										break;
									}
								}
							}
							else if (str.substr(0, 10) == "/giveaway ") {
								if (adminlevel(((PlayerInfo*)(peer->data))->rawName) >= 1000) {
									ENetPeer* currentPeer;
									string imie = str.substr(5, cch.length() - 5 - 1);
									GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/large/anni_sta.rttex"), "`2Giveaway gems for `3EVERYONE!"), "audio/pinata_lasso.wav"), 0));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									GamePacket p2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/large/anni_sta.rttex"), "`2Giveaway gems for `3EVERYONE!"), "audio/pinata_lasso.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 0)
										{

											int gemcalc10k = b + atoi(str.substr(10, cch.length() - 10 - 1).c_str());


											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packetpp);
											delete pp.data;
										}
									}
								}
							}
							else if (str.substr(0, 10) == "/giveaway ") {
								if (adminlevel(((PlayerInfo*)(peer->data))->rawName) <= 1000) {
									ENetPeer* currentPeer;
									string imie = str.substr(5, cch.length() - 5 - 1);
									GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/large/anni_sta.rttex"), "`2Giveaway gems for `3EVERYONE!"), "audio/pinata_lasso.wav"), 0));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									GamePacket p2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/large/anni_sta.rttex"), "`2Giveaway gems for `3EVERYONE!"), "audio/pinata_lasso.wav"), 0));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 0)
										{

											int gemcalc10k = b + atoi(str.substr(10, cch.length() - 10 - 1).c_str());


											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packetpp);
											delete pp.data;
										}
									}
								}
							}

							else if (str.substr(0, 4) == "/rgo") {
								string act = ((PlayerInfo*)(peer->data))->lastMsgWorld;
								if (act == "") {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the message."));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else {
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									joinWorld(peer, act, 0, 0);
								}
							}


							else if (str.substr(0, 3) == "/a ") {

								if (((PlayerInfo*)(peer->data))->adminLevel <= 222) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Ninja `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								ENetPeer* currentPeer;
								int imie = atoi(str.substr(3, cch.length() - 3 - 1).c_str());
								if (imie == 0) continue;
								if (imie == hasil) {
									resultnbr1 = 0;
									resultnbr2 = 0;
									hasil = 0;

									int currentGems = 0;
									ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									ifs >> currentGems;
									ifs.close();

									currentGems += prize;
									ofstream myfile;
									ofstream ofs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									ofs << currentGems;
									ofs.close();


									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), currentGems));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									prize = 0;


									string nama = ((PlayerInfo*)(peer->data))->displayName;
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										sendConsole(currentPeer, "`9** KXPS Daily: Party Math Event Winner is `w" + nama + "`9!");
										sendSound(currentPeer, "pinata_lasso.wav");

									}
								}
							}
							else if (str == "/help") {

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5Supported Commands Are `o>> /help, /dance, /furious, /love, /cry, /mad, /sleep, /yes, /no, /troll, /cheer, /fp, /omg, /fa, /rolleyes, /dab, /idk, /shrug, /dance2, /sassy, /love, /mods, /pull, /rgo, /purchase /r, /rules, /news, /report <name>, /ghost, /unghost, /inventory, /item id, /color number, /who, /count, /sb message, /radio, /find, /pay (user) (amount), /cleaninv, /unequip, /msg, /deposit, /uba, /wl"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								//enet_host_flush(server);

							}
							else if (str == "/vhelp") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 554) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1VIP Commands Are `o>> /nick, /vsb, /invis, /flag, /warp, /v <text>"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_host_flush(server);
								}
							}
							else if (str == "/mhelp") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 665) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Moderator Commands Are `o>> /nick, /invis, /flag, /summon, /msb, /nuke, /warp, /warpto"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_host_flush(server);
								}

							}
							else if (str == "/ghelp") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 776) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`sGod Commands Are `o>> /nick, /invis, /flag, /summon, /msb, /nuke, /warp, /warpto"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_host_flush(server);
								}
							}
							else if (str == "/dhelp") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 887) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`cDivine Commands Are `o>> /nick, /invis, /flag, /summon, /msb, /nuke, /warp, /warpto"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_host_flush(server);
								}
							}
							else if (str == "/ahelp") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 998) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Admin Commands Are `o>> /nick, /invis, /flag, /summon, /msb, /nuke, /warp, /warpto, /pe"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_host_flush(server);
								}
							}
							else if (str == "/ohelp") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Owner Commands Are `o>> /nick name, /nick, /invis, /ban, /curse, /mute, /flag, /msb, /gsb, /gsm, /nuke, /giveaway, /spl, /rpl, /pl, /magic, /give"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_host_flush(server);
								}
								else if (str.substr(0, 7) == "/level ") {
									if (((PlayerInfo*)(peer->data))->adminLevel > 999) {
										((PlayerInfo*)(peer->data))->level = atoi(str.substr(7).c_str());
										int level = ((PlayerInfo*)(peer->data))->level;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Now your level are `2" + std::to_string(level) + "`0!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
							}
							else if (str.substr(0, 6) == "/flag ") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 554) {
									//string lol = str.substr(6, cch.length() - 6 - 1);
									int lol = atoi(str.substr(6).c_str());

									GamePacket p2 = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 1), 2), lol), 0));
									memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet3 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packet3);
										}
									}
									delete p2.data;
								}
							}
							else if (str.substr(0, 11) == "/givelevel ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {


										string msg_info = str;

										size_t extra_space = msg_info.find("  ");
										if (extra_space != std::string::npos) {
											msg_info.replace(extra_space, 2, " ");
										}

										string delimiter = " ";
										size_t pos = 0;
										string pm_user;
										string pm_message;
										if ((pos = msg_info.find(delimiter)) != std::string::npos) {
											msg_info.erase(0, pos + delimiter.length());
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease specify a `2player `oyou want to give level to him."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
										}

										if ((pos = msg_info.find(delimiter)) != std::string::npos) {
											pm_user = msg_info.substr(0, pos);
											msg_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter `2level `oamount."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
										}

										pm_message = msg_info;
										ENetPeer* currentPeer;

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(pm_user)) {
												((PlayerInfo*)(currentPeer->data))->level = atoi(pm_message.c_str());
												((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
												((PlayerInfo*)(currentPeer->data))->lastMsgerTrue = ((PlayerInfo*)(currentPeer->data))->displayName;
												((PlayerInfo*)(currentPeer->data))->lastMsgWorld = ((PlayerInfo*)(peer->data))->currentWorld;
												GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oyou gave to player `2" + pm_message));
												ENetPacket* packet0 = enet_packet_create(p0.data,
													p0.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet0);
												delete p0.data;
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6you got level from `2" + ((PlayerInfo*)(peer->data))->displayName + "`2" + pm_message + " is your level now`o"));
												string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet2);
												delete data;
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete ps.data;

												break;
											}
										}
									}
								}
							}
							else if (str.substr(0, 8) == "/report ")
							{
								string imie = str.substr(8, cch.length() - 8 - 1);
								string dupa;
								string worldlocate;
								ENetPeer* currentPeer;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player `w" + imie + "`o has been reported."));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
									{
										dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
										worldlocate = " (In world: " + ((PlayerInfo*)(peer->data))->currentWorld + ")";



									}

									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD LOGS]: `wSuspect `2" + dupa + "`4 has been reported by " + ((PlayerInfo*)(peer->data))->rawName + worldlocate));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								cout << "Report from " << ((PlayerInfo*)(peer->data))->rawName << " in world " << ((PlayerInfo*)(peer->data))->currentWorld << std::dec << " reported -> " << dupa << endl;



							}


							


							else if (str.substr(0, 8) == "/warpto ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 555) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Premium `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (str.substr(8, cch.length() - 8 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You can't warp to yourself!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if ((str.substr(8, cch.length() - 8 - 1) == "chandra") || (str.substr(8, cch.length() - 8 - 1) == "jar")) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to warp to server creators!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 666 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									string name = str.substr(8, str.length());


									ENetPeer* currentPeer;


									bool found = false;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;


										string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


										std::transform(name.begin(), name.end(), name.begin(), ::tolower);
										std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);


										if (name == name2) {
											if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
											{
												//std::this_thread::sleep_for(std::chrono::milliseconds(200));
											}
											else
											{
												sendPlayerToPlayer(peer, currentPeer);
												found = true;
											}

										}
									}
									if (found) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Magically `^Warped to player `4" + name + "`^!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
									}
									else {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Player Not `4Found! `@Or is currently in `4EXIT`@!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
									}
								}


							}







							else if (str.substr(0, 6) == "/warp ") {

								if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								string world = str.substr(6, str.length());
								((PlayerInfo*)(peer->data))->playerinfo = world;
								std::transform(world.begin(), world.end(), world.begin(), ::toupper);
								if (world == "SERVER" && ((PlayerInfo*)(peer->data))->adminLevel != 1000)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp to `9Server`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->currentWorld == "HELL")
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp from this world`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if (world == "EXIT")
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp to `9Exit`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								else
								{
									bool contains_non_alpha
										= !std::regex_match(world, std::regex("^[A-Za-z0-9]+$"));

									if (contains_non_alpha == true)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Warping Failed! Only Letters / Numbers Allowed`@!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
									else
									{
										WorldInfo* worlds = getPlyersWorld(peer);
										if (((PlayerInfo*)(peer->data))->adminLevel < 666) {
											if (worlds->nuked) {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4You can't warp `6Because this world is nuked!!!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Magically `^Warped To `4" + world + "`^!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);



												sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), world);
											}
										}
										


									}



								}




							}
							else if (str.substr(0, 5) == "/asb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `#ADMIN-Broadcast`` from `$`2" + name + "```` (in `4JAMMED!) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}



							else if (str.substr(0, 5) == "/gsb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You received `sGod - Broadcast`` From `6" + name + ""));
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `sGod-Broadcast`` from `$`2" + name + "```` (in `4JAMMED!) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										ENetPacket* packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet3);
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
									delete p3.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}


							else if (str.substr(0, 5) == "/jcb ") {
							using namespace std::chrono;
							if (((PlayerInfo*)(peer->data))->adminLevel >= 1000) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You received `sjar - Broadcast`` From `6" + name + ""));
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `1jar-Broadcast`` from `$`2" + name + "```` (in `4JAMMED!) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
								string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet);




									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet2);

									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet3);
									//enet_host_flush(server);
								}
								delete data;
								delete p.data;
								delete p3.data;
							}
							else {


								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;

							}
							}

							else if (str.substr(0, 5) == "/ocb ") {
							using namespace std::chrono;
							if (((PlayerInfo*)(peer->data))->adminLevel >= 1000) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You received `schandra - Broadcast`` From `6" + name + ""));
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `2chandra-Broadcast`` from `$`2" + name + "```` (in `4JAMMED!) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
								string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet);




									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet2);

									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet3);
									//enet_host_flush(server);
								}
								delete data;
								delete p.data;
								delete p3.data;
							}
							else {


								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;

							}
							}

							
















							else if (str.substr(0, 5) == "/lsb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 999) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `6Admin-Broadcast`` from `$`2" + name + "```` (in `4JAMMED!) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}
							else if (str.substr(0, 4) == "/sb ") {
								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Not allowed to SB while ducttaped!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									if (((PlayerInfo*)(peer->data))->level < 10)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> `4OOPS: `oTo cut down on `4spam `o the broadcast features available to who are level `510 `oand higher."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {

										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 0)
										{
											using namespace std::chrono;
											if (((PlayerInfo*)(peer->data))->lastSB + 30000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											}
											else {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Cooldown >> Wait 30 seconds to throw another Super-Broadcast!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												continue;
											}
											int gemcalc10k = b - 0;


											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;

											GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> Super-Broadcast sent to all players online!"));
											ENetPacket* packet5 = enet_packet_create(p5.data,
												p5.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet5);
											delete p5.data;

											string name = ((PlayerInfo*)(peer->data))->rawName; /*"`#[`eVIP-SB`#] `5** From (`6" + name + "`#) in [`4HIDDEN!`#] ** : `9"*/
											string world = ((PlayerInfo*)(peer->data))->currentWorld;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[`9Super-Broadcast`#] `5** From (`6" + name + "`5) in [`9" + world + "`5] ** : `9" + str.substr(4, cch.length() - 4 - 1)));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet);




												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet2);

												//enet_host_flush(server);
											}
											delete data;
											delete p.data;
										}
										else
										{
											int needgems = 200 - b;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to send Super-Broadcast"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}
								}
							}

							else if (str.substr(0, 5) == "/vsb ") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 554) {
									if (((PlayerInfo*)(peer->data))->isDuctaped == true)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Not allowed to VSB while ducttaped!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else
									{



										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->lastSB + 15000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
										{
											((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
										}
										else {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Cooldown >> Wait 15 seconds to throw another Super-Broadcast!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet);
											delete p.data;
											//enet_host_flush(server);
											continue;
										}


										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[`eVIP-SB`#] `5** From (`6" + name + "`5) in [`4HIDDEN!`5] ** : `9" + str.substr(5, cch.length() - 5 - 1)));
										string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPeer* currentPeer;

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(currentPeer, 0, packet);
										}
										delete data;
										delete p.data;
									}
								}
							}

							else if (str == "/take")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel >= 999) {
									WorldInfo* world = getPlyersWorld(peer);
									string name = ((PlayerInfo*)(peer->data))->rawName;
									world->owner = ((PlayerInfo*)(peer->data))->rawName;
									world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;



									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYou took this `2World`w!!!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									//enet_host_flush(server);
									delete p.data;
								}
								
								
							}

							else if (str.substr(0, 11) == "/giveworld ") {
								WorldInfo* world = getPlyersWorld(peer);
								string imie = str.substr(11, cch.length() - 11 - 1);
								string name = ((PlayerInfo*)(peer->data))->rawName;
								string nworld = ((PlayerInfo*)(peer->data))->currentWorld;
								if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										

										if (((PlayerInfo*)(currentPeer->data))->rawName == imie) {
											if (((PlayerInfo*)(currentPeer->data))->currentWorld == nworld) {

												((PlayerInfo*)(currentPeer->data))->playerinfo = name;

												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`oGive World Confirmation|left|3732|\nadd_textbox|`5" + name + "```oWant to give `2" + nworld + "`o to you|left|100|\nadd_spacer|small|\nadd_button|takeworld|`2Accept|noflags|0|0|\nadd_button|idontwantto|`4Cancel|noflags|0|0|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
											}
										}
									}

									
								}
							}

							else if (str.substr(0, 6) == "/pull ")
							{
								cout << "/pull from " << ((PlayerInfo*)(peer->data))->displayName << endl;
								WorldInfo* world = getPlyersWorld(peer);
								if (((PlayerInfo*)(peer->data))->rawName == world->owner)
								{
									ENetPeer* currentPeer;
									string imie = str.substr(6, cch.length() - 6 - 1);
									int x = ((PlayerInfo*)(peer->data))->x;
									int y = ((PlayerInfo*)(peer->data))->y;
									string dupa;
									GamePacket pmsg = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o" + ((PlayerInfo*)(peer->data))->displayName + " `5pulls " + imie));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
											{
												dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
												PlayerMoving data;
												data.packetType = 0x0;
												data.characterState = 0x924; // animation
												data.x = x;
												data.y = y;
												data.punchX = -1;
												data.punchY = -1;
												data.XSpeed = 0;
												data.YSpeed = 0;
												data.netID = ((PlayerInfo*)(currentPeer->data))->netID;
												data.plantingTree = 0x0;
												SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
												GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												delete p2.data;
											}
										}
									}
									ENetPacket* packetmsg = enet_packet_create(pmsg.data,
										pmsg.len,
										ENET_PACKET_FLAG_RELIABLE);
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packetmsg);
										}
									}
									delete pmsg.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need to be world owner to use that command."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

								}
							}

							else if (str.substr(0, 5) == "/msb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel > 665)
								{
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[`bMOD-SB`#] `5** From (`6" + name + "`#) in [`4HIDDEN!`#] ** : `9" + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
							}











































































							else if (str.substr(0, 5) == "/psb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 666) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `#Moderator-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Premium `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}


























							/*else if (str == "/banworld")
							{

								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "admin") {
									((PlayerInfo*)(peer->data))->canExit = false;




									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;


										if (isHere(peer, currentPeerp))
										{

											string name = ((PlayerInfo*)(peer->data))->displayName;
											string kickname = ((PlayerInfo*)(currentPeerp->data))->displayName;
											//string kickname = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname));
											string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);


											ENetPacket* packetsou = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);



											enet_peer_send(peer, 0, packetsou);
											enet_peer_send(peer, 0, packet);
											delete data;
											delete p.data;


											sendPlayerWBan(currentPeerp, ((PlayerInfo*)(peer->data))->displayName, ((PlayerInfo*)(currentPeerp->data))->displayName);


											namespace fs = std::experimental::filesystem;

											if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
												fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);

												std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

												outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

												outfile.close();
											}
											else
											{
												std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

												outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

												outfile.close();
											}

											sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
											sendWorldOffers(currentPeerp);


											((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";


										}
									}
									((PlayerInfo*)(peer->data))->canExit = true;

								}
							}*/
							else if (str == "/nuke") {

								if (((PlayerInfo*)(peer->data))->adminLevel > 665) {
									WorldInfo* world = getPlyersWorld(peer);
									if (world->nuked) {
										world->nuked = false;
										cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " has unnuked " << world->name << endl;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You have `@Un-Nuked `^the world!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										world->nuked = true;
										cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " has nuked " << world->name << endl;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You have `@Nuked `^the world!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										//enet_host_flush(server);
										string name = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o>>`4" + world->name + " `4was nuked from orbit`o. It's the only way to be sure. Play nice, everybody!"));
										string text = "action|play_sfx\nfile|audio/bigboom.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											ENetPacket* packet = enet_packet_create(p1.data,
												p1.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											if (isHere(peer, currentPeer)) {
												if (((PlayerInfo*)(currentPeer->data))->adminLevel < 666) {
													//((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
													sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
													sendWorldOffers(currentPeer);
													((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
												}
											}
											//enet_host_flush(server);
										}
										delete data;
										delete p1.data;
									}
									continue;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `^Mods `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
							}






							else if (str == "/pban")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									continue;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Please include `^Player Name `@That you want to `4Ban`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}









							else if (str == "/ban")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra" || ((PlayerInfo*)(peer->data))->rawName == world->owner) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Please include `^Player Name `@That you want to `4Ban `@From World!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}

							else if (str == "/curse")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Please include `^Player Name `@That you want to `bCurse`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}
							else if (str == "/mute")
							{


								if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (((PlayerInfo*)(peer->data))->adminLevel >= 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Please include `^Player Name `@That you want to `5Mute`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}
							else if (str == "/tban")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel >= 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tban <user> <minutes>"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}
							else if (str.substr(0, 6) == "/tban ") {
								string ban_info = str;

								size_t extra_space = ban_info.find("  ");
								if (extra_space != std::string::npos) {
									ban_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string ban_user;
								string ban_time;
								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tban <user> <minutes>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_user = ban_info.substr(0, pos);
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tban <user> <minutes>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								ban_time = ban_info;
								cout << "/tban " << ban_user << " " << ban_time;
							}
							/*else if (str.substr(0, 7) == "/block ")
							{
								string blox = str.substr(6, str.length());


								bool contains_non_alpha
									= !std::regex_match(blox, std::regex("^[0-9]+$"));

								if (contains_non_alpha)
								{
									int bloxint = atoi(str.substr(7).c_str());
									if (bloxint >= 0 && bloxint < 7559)
									{
										((PlayerInfo*)(peer->data))->cloth_face = atoi(str.substr(7).c_str());
										sendState(peer);
										((PlayerInfo*)(peer->data))->skinColor = 2;
										sendClothes(peer);

										int block = atoi(str.substr(7).c_str());

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You are " + std::to_string(block) + " now!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only numbers from 0-7558!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only numbers!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							else if (str.substr(0, 5) == "/eff ") {


								int effect = atoi(str.substr(5).c_str());
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}

							}*/











							else if (str.substr(0, 5) == "/ssb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->boughtAAC == false)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR `w>> You will need to buy `6Ancestral `wbefore u can do /ssb!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

								else
								{
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `2Special - Broadcast`` from `$`6" + name + "```0 (in `6" + ((PlayerInfo*)(peer->data))->currentWorld + "`0) ** :`` `$ " + str.substr(5, cch.length() - 5 - 1)));
									string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
										enet_peer_send(currentPeer, 0, packet);

										//enet_host_flush(server);

									}
									delete data;
									delete p.data;
								}
							}

							else if (str.substr(0, 5) == "/dsb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel < 888)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR `w>> This command is only for divine!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

								else
								{
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You received `cDivine - Broadcast`` From `6" + name + ""));
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `cDivine - Broadcast`` from `$`o" + name + "```0 (in `o" + ((PlayerInfo*)(peer->data))->currentWorld + "`0) ** :`` `5 " + str.substr(5, cch.length() - 5 - 1)));
									string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
										enet_peer_send(currentPeer, 0, packet);

										ENetPacket* packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet3);

										//enet_host_flush(server);

									}
									delete data;
									delete p.data;
									delete p3.data;
								}
							}









							else if (str.substr(0, 5) == "/ban ") {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 666) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									string imie = str.substr(5, cch.length() - 5 - 1);

									std::ifstream ifff("players/" + imie + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["isBanned"] = 1; //edit

									std::ofstream o("players/" + imie + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;

									cout << "Server operator " << ((PlayerInfo*)(peer->data))->rawName << " has banned " << str.substr(5, cch.length() - 5 - 1) << "." << endl;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4banned `w" + imie + " `#** `o(`4/rules `oto see the rules!)"));
									ENetPacket* packet = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p2.data;

									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == imie) {
											Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4BANNED `0from KortexPS for 720 Days", "audio/hub_open.wav", "interface/atomic_button.rttex");
											enet_peer_disconnect_later(currentPeer, 0);
										}
									}
								}
							}


							else if (str.substr(0, 6) == "/wban ")
							{

								if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{

									if (str.substr(6, cch.length() - 6 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(6, cch.length() - 6 - 1)) continue;
									if ((str.substr(6, cch.length() - 6 - 1) == "jar") || (str.substr(6, cch.length() - 6 - 1) == "chandra")) continue;
									if ((str.substr(6, cch.length() - 6 - 1) == "chandra")) continue;

									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;



										string name = ((PlayerInfo*)(peer->data))->displayName;
										string kickname = str.substr(6, cch.length() - 6 - 1);
										//string kickname = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname + " from `w" + world->name + "`o!"));
										string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										if (isHere(peer, currentPeerp))
										{
											ENetPacket* packetsou = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);



											enet_peer_send(currentPeerp, 0, packetsou);
											enet_peer_send(currentPeerp, 0, packet);
											delete data;
											delete p.data;
											if (((PlayerInfo*)(currentPeerp->data))->rawName == kickname)
											{


												namespace fs = std::experimental::filesystem;

												if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
													fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);

													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}
												else
												{
													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}

												sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
												sendWorldOffers(currentPeerp);


												((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";

											}
										}


									}

								}

							}

							else if (str.substr(0, 6) == "/pban ") {

								if (((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									if (str.substr(6, cch.length() - 6 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(6, cch.length() - 6 - 1)) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to ban yourself!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;

									}
									if ((str.substr(6, cch.length() - 6 - 1) == "chandra")) continue;
									if ((str.substr(11, cch.length() - 11 - 1) == "chandra") || (str.substr(11, cch.length() - 11 - 1) == "jar")) {
										//cout << "[WARNING]" << endl;
										ENetPeer* currentPeer;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);

										}

										delete p.data;
										Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
										autoBan(peer, false, 3);
										continue;

									}


									string username = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

									bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(username) + ".json");
									if (!existx)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Player `@Not Found! `4Ban `@Aborted!"));

										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}


									std::ifstream iffff("players/" + username + ".json");

									json jj;

									if (iffff.fail()) {
										iffff.close();
										continue;
									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load

									std::ofstream oo("players/" + username + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									jj["isBanned"] = 1;
									oo << jj << std::endl;

									//string bannamed = str.substr(6, cch.length() - 6 - 1);
									std::ofstream outfile("bans/" + username + ".txt");

									outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

									outfile.close();


									cout << "Server operator " << ((PlayerInfo*)(peer->data))->rawName << " has banned " << str.substr(6, cch.length() - 6 - 1) << "." << endl;

									ENetPeer* currentPeer;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4banned `2" + str.substr(6, cch.length() - 6 - 1) + " `#** `o(`4/rules `oto see the rules!)"));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1))) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave used `#Ban `oon `2" + str.substr(6, cch.length() - 6 - 1) + "`o! `#**"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from KortexPS for 730 days"), "audio/hub_open.wav"), 0));
											ENetPacket* packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom KortexPS for 730 days"));
											ENetPacket* packet3 = enet_packet_create(ps3.data,
												ps3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet3);
											//j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
											//((PlayerInfo*)(currentPeer->data))->bans = ((PlayerInfo*)(peer->data))->bans + 1;
											delete ps.data;
											delete ps2.data;
											delete ps3.data;

											enet_peer_disconnect_later(currentPeer, 0);

										}

										enet_peer_send(currentPeer, 0, packet);

										//enet_host_flush(server);
									}
									delete p.data;


									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2BANNED `4player `w" + PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1))));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p6.data;
								}
							}


							else if (str.substr(0, 5) == "/spk ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									string getlol = str.substr(5, str.length());
									int lol = getlol.find(" ");
									string name = str.substr(5, lol);
									string message = str.substr(lol + 6, str.length());
									sendFakeChatMessage(peer, name, message);
								}
							}


							else if (str == "/pl") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/large/special_event.rttex"), "`2Public Lava!: `wLava is being placed in world `4" + ((PlayerInfo*)(peer->data))->currentWorld + "`w, go break it and grab some extra `5Gems!"), "audio/pinata_lasso.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);
										//j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;

										delete ps2.data;
									}
								}
							}

							else if (str.substr(0, 8) == "/unmute ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									if (str.substr(8, cch.length() - 8 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) continue;
									if ((str.substr(8, cch.length() - 8 - 1) == "jar") || (str.substr(8, cch.length() - 8 - 1) == "chandra")) continue;

									string name = PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1));

									bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(name) + ".json");
									if (!existx)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Player `@Not Found! `5Unmute `@Aborted!"));

										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}

									remove(("mutedplayers/" + name + ".txt").c_str());

									ENetPeer* currentPeer;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bremoved mute from `2" + name + " `#** `o(`4/rules `oto see the rules!)"));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);

										if (((PlayerInfo*)(currentPeer->data))->rawName == name) {


											((PlayerInfo*)(currentPeer->data))->taped = false;
											((PlayerInfo*)(currentPeer->data))->isDuctaped = false;
											((PlayerInfo*)(currentPeer->data))->cantsay = false;
											sendState(currentPeer);

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You have been unmuted!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											sendClothes(currentPeer);
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You have unmuted the player!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											delete p.data;
										}

									}
									delete p2.data;

									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2UNMUTED `4player `w" + PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1))));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p6.data;

								}
								else {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You need to have a higher admin-level to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}

							else if (str.substr(0, 6) == "/mute ") {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									if (str.substr(6, cch.length() - 6 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(6, cch.length() - 6 - 1)) continue;
									if ((str.substr(6, cch.length() - 6 - 1) == "jar") || (str.substr(6, cch.length() - 6 - 1) == "chandra")) continue;

									if ((str.substr(6, cch.length() - 6 - 1) == "jar") || (str.substr(6, cch.length() - 6 - 1) == "chandra")) {
										//cout << "[WARNING]" << endl;
										ENetPeer* currentPeer;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);

										}

										delete p.data;
										Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
										autoBan(peer, false, 3);
										continue;

									}



									string name = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

									bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(name) + ".json");
									if (!existx)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Player `@Not Found! `5Mute `@Aborted!"));

										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}






									std::ofstream outfile("mutedplayers/" + name + ".txt");

									outfile << "muted by: " + ((PlayerInfo*)(peer->data))->rawName;

									outfile.close();


									ENetPeer* currentPeer;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bmuted `2" + name + " `#** `o(`4/rules `oto see the rules!)"));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);

										if (((PlayerInfo*)(currentPeer->data))->rawName == name) {


											((PlayerInfo*)(currentPeer->data))->taped = true;
											((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
											((PlayerInfo*)(currentPeer->data))->cantsay = true;
											sendState(currentPeer);

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You have been muted!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											sendClothes(currentPeer);
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You have muted the player!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											delete p.data;
										}

									}
									delete p2.data;


									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2MUTED `4player `w" + PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1))));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p6.data;


								}
								else {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You need to have a higher admin-level to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}

							else if (str.substr(0, 7) == "/tmute ")
							{

								string ban_info = str;

								size_t extra_space = ban_info.find("  ");
								if (extra_space != std::string::npos) {
									ban_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string ban_user;
								string ban_time;
								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tmute <user> <minutes>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_user = ban_info.substr(0, pos);
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /tmute <user> <minutes>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								ban_time = ban_info;
								//cout << "/tban " << ban_user << " " << ban_time;
								string user = ban_user;
								string muteTime = ban_time;

								bool contains_non_int = !std::regex_match(muteTime, std::regex("^[0-9]+$"));
								if (contains_non_int == true)
								{
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4 Invalid minutes format."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								else
								{
									int konvertuotasInt = stoi(muteTime);
									if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
									{
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Minutes should be between 1-199."));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
									else
									{
										bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
										if (!existx)
										{
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4User doesn't exists."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										else
										{
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully muted for `8" + to_string(konvertuotasInt) + "`2 minutes."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;

										}
									}
								}



							}

							else if (str.substr(0, 7) == "/curse ") { // code by playingohd gaming

								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) continue;
								if (str.substr(7, cch.length() - 7 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(7, cch.length() - 7 - 1)) continue;
								if ((str.substr(7, cch.length() - 7 - 1) == "chandra") || (str.substr(7, cch.length() - 7 - 1) == "jar")) continue;

								if ((str.substr(7, cch.length() - 7 - 1) == "chandra") || (str.substr(7, cch.length() - 7 - 1) == "jar")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}
								string cursename = PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));

								bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(cursename) + ".json");
								if (!existx)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Player `@Not Found! `bCurse `@Aborted!"));

									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								cout << "Server operator " << ((PlayerInfo*)(peer->data))->rawName << " has cursed " << str.substr(7, cch.length() - 7 - 1) << "." << endl;


								std::ofstream outfile("cursedplayers/" + cursename + ".txt");

								outfile << "caused by: " + ((PlayerInfo*)(peer->data))->rawName;

								outfile.close();



								ENetPeer* currentPeer;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bcursed `2" + str.substr(7, cch.length() - 7 - 1) + " `#** `o(`4/rules `oto see the rules!)"));
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);

									if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false && ((PlayerInfo*)(currentPeer->data))->haveGuestId == false) continue;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave used `#Curse `oon `2" + str.substr(7, cch.length() - 7 - 1) + "`o! `#**"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;

										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/hommel.rttex"), "`0Warning from `4System`0: You've been `bCURSED `0from KortexPS."), "audio/explode.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);
										delete ps2.data;

										GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `bCursed `ofrom KortexPS."));
										ENetPacket* packet3 = enet_packet_create(ps3.data,
											ps3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet3);
										delete ps3.data;

										((PlayerInfo*)(currentPeer->data))->isCursed = true;

										sendPlayerToWorld(currentPeer, (PlayerInfo*)(currentPeer->data), "HELL");

									}
								}
								delete p.data;


								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2CURSED `4player `w" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
								delete data;
								delete p6.data;

							}

							else if (str == "/unequip")
							{
								((PlayerInfo*)(peer->data))->cloth_hair = 0;
								((PlayerInfo*)(peer->data))->cloth_shirt = 0;
								((PlayerInfo*)(peer->data))->cloth_pants = 0;
								((PlayerInfo*)(peer->data))->cloth_feet = 0;
								((PlayerInfo*)(peer->data))->cloth_face = 0;
								((PlayerInfo*)(peer->data))->cloth_hand = 0;
								((PlayerInfo*)(peer->data))->cloth_back = 0;
								((PlayerInfo*)(peer->data))->cloth_mask = 0;
								((PlayerInfo*)(peer->data))->cloth_necklace = 0;
								((PlayerInfo*)(peer->data))->effect = 8421376;
								sendState(peer); //here
								sendClothes(peer);
								sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
							}
							else if (str.substr(0, 9) == "/uncurse ") { // code by playingohd gaming
								if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (str.substr(9, cch.length() - 9 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(9, cch.length() - 9 - 1)) continue;
								if ((str.substr(9, cch.length() - 9 - 1) == "chandra") || (str.substr(9, cch.length() - 9 - 1) == "jar")) continue;
								string cursename = str.substr(9, cch.length() - 9 - 1);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4System-Message:`2 " + cursename + " has been uncursed."));
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									remove(("cursedplayers/" + cursename + ".txt").c_str());
									if (((PlayerInfo*)(currentPeer->data))->rawName == cursename)
									{
										((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
										sendClothes(currentPeer);
										((PlayerInfo*)(currentPeer->data))->isCursed = false;
										sendState(currentPeer);


									}
								}
								delete p.data;


								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2UNCURSED `4player `w" + PlayerDB::getProperName(str.substr(9, cch.length() - 9 - 1))));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
								delete data;
								delete p6.data;

							}
							else if (str.substr(0, 7) == "/unban ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								std::ifstream ifff("players/" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1)) + ".json");
								string ubaname = PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));

								if (ifff.fail()) {
									ifff.close();

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Player not found, unban aborted!"));

									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["isBanned"] = 0; //edit

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wBan of player " + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1)) + " set to 0."));

								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;


								std::ofstream o("players/" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1)) + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;


								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2UNBANNED `4player `w" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
								delete data;
								delete p6.data;

							}

							
							

							
							else if (str.substr(0, 3) == "/p ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								string blox = str.substr(2, str.length());
								bool contains_non_alpha
									= !std::regex_match(blox, std::regex("^[0-9]+$"));

								if (contains_non_alpha)
								{
									int bloxint = atoi(str.substr(3).c_str());
									if (bloxint >= 0)
									{
										((PlayerInfo*)(peer->data))->effect = atoi(str.substr(3).c_str());
										PlayerInfo* info = ((PlayerInfo*)(peer->data));
										int netID = info->netID;
										ENetPeer* currentPeer;
										int state = getState(info);
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Punch Effect `9Changed`^!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only positive numbers!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only positive numbers!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

							}
							else if (str.substr(0, 4) == "/pt ") {
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										GamePacket p = packetEnd(appendIntx(appendString(createPacket(), "OnItemEffect"), atoi(str.substr(4).c_str())));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

										//enet_host_flush(server);
										delete p.data;

									}
								}
							}
							else if (str.substr(0, 5) == "/msg ") {
								bool found = false;
								if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!"));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									delete p0.data;
									continue;
								}




								string msg_info = str;

								size_t extra_space = msg_info.find("  ");
								if (extra_space != std::string::npos) {
									msg_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string pm_user;
								string pm_message;
								if ((pos = msg_info.find(delimiter)) != std::string::npos) {
									msg_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease specify a `2player `oyou want your message to be delivered to."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								if ((pos = msg_info.find(delimiter)) != std::string::npos) {
									pm_user = msg_info.substr(0, pos);
									msg_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter your `2message`o."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}



								bool arIgnore = false;

								bool existxx = std::experimental::filesystem::exists("ignoredPlayers/" + PlayerDB::getProperName(pm_user) + ".json");
								if (existxx)
								{
									std::ifstream ifff("ignoredPlayers/" + PlayerDB::getProperName(pm_user) + ".json");

									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {


									}




									json j;
									ifff >> j; //load
									if (j.count("ignoredPlayers") > 0) {

										for (int i = 0; i < j["ignoredPlayers"].size(); i++) {
											if (j["ignoredPlayers"][i] == ((PlayerInfo*)(peer->data))->rawName)
											{
												arIgnore = true;
												break;
											}
										}
									}
								}

								if (arIgnore)
								{
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4WARNING: `wThe player`8 " + pm_user + " `whad added you to the ignore list.`4 Your message was not sent!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}



								pm_message = msg_info;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->msgName == PlayerDB::getProperName(pm_user)) {

										((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
										((PlayerInfo*)(currentPeer->data))->lastMsgerTrue = ((PlayerInfo*)(currentPeer->data))->displayName;
										((PlayerInfo*)(currentPeer->data))->lastMsgWorld = ((PlayerInfo*)(peer->data))->currentWorld;

										//sendConsoleMsg(peer, "`6" + str);
										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`6)"));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										GamePacket p10 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`6) `o(`4NOTE: ``Message a mod `4ONLY ONCE `oabout an issue. Mods dont fix scams or replace gems, they punish players who break the `5/rules`o. For issues related to account recovery or purchasing, send message to creators on discord.)"));
										ENetPacket* packet10 = enet_packet_create(p10.data,
											p10.len,
											ENET_PACKET_FLAG_RELIABLE);
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											enet_peer_send(peer, 0, packet10);
										}
										else {
											enet_peer_send(peer, 0, packet0);
										}
										delete p0.data;
										delete p10.data;
										found = true;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:0_PL:4_OID:_CT:[MSG]_ `c>> from `c(`w" + ((PlayerInfo*)(peer->data))->rawName + "`c) in [`$" + ((PlayerInfo*)(peer->data))->currentWorld + "`c] >`$ " + pm_message + "`o"));
										string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										delete data;
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;
										break;
									}

								}
								if (found == false)
								{
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6Player " + PlayerDB::getProperName(pm_user) + " not found, remember to type all letters small."));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet0);
									delete p0.data;
								}
							}
							else if (str == "/trade")
							{
								GamePacket p2t = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnStartTrade"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->netID));

								//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket* packet2t = enet_packet_create(p2t.data,
									p2t.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2t);
								delete p2t.data;

								GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "OnTradeStatus"), 1));

								//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet3);
								delete p3.data;
							}
							else if (str == "/tradeworld")
							{
								if (getPlyersWorld(peer)->owner == ((PlayerInfo*)(peer->data))->rawName)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oCannot buy your own world!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (getPlyersWorld(peer)->isPublic)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oCannot buy world because it's public!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									ENetPeer* currentPeerpx;

									for (currentPeerpx = server->peers;
										currentPeerpx < &server->peers[server->peerCount];
										++currentPeerpx)
									{
										if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastSellWorld == getPlyersWorld(peer)->name)
										{
											if (((PlayerInfo*)(peer->data))->lastSeller == getPlyersWorld(peer)->owner)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Menu``|left|242|\nadd_label|small|\nadd_button_with_icon|dotrade|Do the Trade!|noflags|1424||\nadd_button|decline|`4Cancel/Decline|noflags||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											else
											{
												cout << "last player sell / buy not true";
											}
										}
										else
										{
											cout << "last sell world not true";
										}
									}
								}
							}

							else if (str == "/battleroyale")
							{
								GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBetaMode"), 1));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								//enet_host_flush(server);
							}
							else if (str == "/uba") {
								if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{
									namespace fs = std::experimental::filesystem;
									fs::remove_all("worldbans/" + getPlyersWorld(peer)->name);

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou unbanned everyone from the world!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}

							else if (str.substr(0, 7) == "/wkick ") {



								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									if (str.substr(7, cch.length() - 7 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(5, cch.length() - 7 - 1)) continue;
									if ((str.substr(7, cch.length() - 7 - 1) == "jar") || (str.substr(7, cch.length() - 7 - 1) == "chandra")) continue;

									cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " Has kicked from the world " << str.substr(7, cch.length() - 7 - 1) << "." << endl;


									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

											sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
											sendWorldOffers(currentPeer);
											((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
										}
									}


								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `2World-Owner `^Or `9MOD `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;


								}

							}
							else if (str == "/bluename") {

								if (((PlayerInfo*)(peer->data))->level < 125)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1 You need to be level `@100 `1to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else {
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild|maxLevel"));
											memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											delete p2.data;
										}
									}
								}
							}
							else if (str == "/hide") {

								GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnDisguiseChanged"), 8));

								memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;


							}

							else if (str.substr(0, 6) == "/mode ") // 9921116 blue fire mode // -529858286286 98156. 888 - ADMIN RANK
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									string modestr = str.substr(6, cch.length() - 6 - 1);


									((PlayerInfo*)(peer->data))->characterState = atoi(modestr.c_str());
									sendState(peer);
								}
								else
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1 You cannot use this command!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

								}


							}
							else if (str == "/testbuystore") {

								/*GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnStoreRequest"), "set_description_text|Welcome to the `2Growtopia Store``!|\nadd_button|lol|Buy!|0|4|0|0||\n"));
								ENetPacket * packets = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packets);
								delete ps.data;*/


								/*GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnStoreBuyConfirm"), 1));

								//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket * packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;*/

								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnStorePurchaseResult"), "`9Bought `6Legendary Katana`w."));

								//memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet3);
								delete p3.data;
							}

							/*else if (str.substr(0, 5) == "/vsb ") {  BUGINTAS BUGINTAS
							if (((PlayerInfo*)(peer->data))->adminLevel != 999 || ((PlayerInfo*)(peer->data))->adminLevel != 666 || ((PlayerInfo*)(peer->data))->adminLevel != 333 || ((PlayerInfo*)(peer->data))->adminLevel != 111) continue;
							if (((PlayerInfo*)(peer->data))->isDuctaped == true)
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Not allowed to VSB while ducttaped!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);


								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							else
							{



								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->lastSB + 15000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
								{
									((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
								}
								else {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Cooldown >> Wait 15 seconds to throw another Super-Broadcast!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_host_flush(server);
									continue;
								}


								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `1VIP-SB `wFrom `$`6" + name + "```` (in `4HIDDEN!``) ** :`` `1 " + str.substr(5, cch.length() - 5 - 1)));
								string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(currentPeer, 0, packet);
								}
								delete data;
								delete p.data;
							}
							*/

							else if (str == "/bye") {
								if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) > 999 || getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) == 1000) {


									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message `o: Restarting server for update in `4ZERO`o seconds! Should be back up in a minute or so. BYE!"));
									string text = "action|play_sfx\nfile|audio/explode.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet);

										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
							}

							else if (str.substr(0, 6) == "/give ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel <= 1000) {
									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									int gembux = atoi(content.c_str());

									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << str.substr(6, str.length());
									myfile.close();

									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), stoi(str.substr(6, cch.length() - 6 - 1))));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
								}
							}

							else if (str.substr(0, 5) == "/gsm ") {

								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (((PlayerInfo*)(peer->data))->adminLevel >= 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " Used Global System Message In World " << ((PlayerInfo*)(peer->data))->currentWorld << " With Message " << str.substr(5, cch.length() - 5 - 1) << endl;
									string name = ((PlayerInfo*)(peer->data))->displayName;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message: `o" + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/sungate.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);



										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
							}



							else if (str == "/roulette") {
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										if (((PlayerInfo*)(peer->data))->unwheel == false)
										{
											((PlayerInfo*)(peer->data))->unwheel = true;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYou can now break roulette wheels, to disable just do /roulette again."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
										else
										{
											((PlayerInfo*)(peer->data))->unwheel = false;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wDisabled roulette-breaking. To enable, type /breakroulette."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}
									else
									{
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou are not the world-owner!"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
								}
							}
							else if (str == "/breaksales") {
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 999) {
										if (((PlayerInfo*)(peer->data))->unsales == false)
										{
											((PlayerInfo*)(peer->data))->unsales = true;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wYou can now break salesman, to disable just do /breaksales again."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
										else
										{
											((PlayerInfo*)(peer->data))->unsales = false;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wDisabled roulette-breaking. To enable, type /breaksales."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}
									else
									{
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou are not the world-owner!"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
								}
							}
							/*	else if (str.substr(0, 9) == "/copyset ") {
									if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "admin") {

										string name = str.substr(9, cch.length() - 9 - 1);
										ENetPeer* currentPeer;

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											if (((PlayerInfo*)(currentPeer->data))->rawName == name || ((PlayerInfo*)(currentPeer->data))->tankIDName == name) {

												((PlayerInfo*)(peer->data))->cloth_hair = ((PlayerInfo*)(currentPeer->data))->cloth_hair;
												((PlayerInfo*)(peer->data))->cloth_shirt = ((PlayerInfo*)(currentPeer->data))->cloth_shirt;
												((PlayerInfo*)(peer->data))->cloth_pants = ((PlayerInfo*)(currentPeer->data))->cloth_pants;
												((PlayerInfo*)(peer->data))->cloth_feet = ((PlayerInfo*)(currentPeer->data))->cloth_feet;
												((PlayerInfo*)(peer->data))->cloth_face = ((PlayerInfo*)(currentPeer->data))->cloth_face;
												((PlayerInfo*)(peer->data))->cloth_hand = ((PlayerInfo*)(currentPeer->data))->cloth_hand;
												((PlayerInfo*)(peer->data))->cloth_back = ((PlayerInfo*)(currentPeer->data))->cloth_back;
												((PlayerInfo*)(peer->data))->cloth_mask = ((PlayerInfo*)(currentPeer->data))->cloth_mask;
												((PlayerInfo*)(peer->data))->cloth_necklace = ((PlayerInfo*)(currentPeer->data))->cloth_necklace;
												((PlayerInfo*)(peer->data))->skinColor = ((PlayerInfo*)(currentPeer->data))->skinColor;
												sendClothes(peer);

												GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), " `^You `9Copied `@Player `4" + ((PlayerInfo*)(currentPeer->data))->displayName + "`^ Clothes!"));
												string text = "action|play_sfx\nfile|audio/change_clothes.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);

												ENetPacket* packet1 = enet_packet_create(p1.data,
													p1.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet1);

												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet2);

												delete p1.data;
												delete data;
											}
										}
									}
								}*/
							else if (str.substr(0, 7) == "/unacc ") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(7, cch.length() - 7 - 1))) {
											WorldInfo info;
											world->worldaccess.erase(std::remove(world->worldaccess.begin(), world->worldaccess.end(), ((PlayerInfo*)(currentPeer->data))->rawName), world->worldaccess.end());
										}
									}
								}
							}
							else if (str.substr(0, 8) == "/access ") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(8, cch.length() - 8 - 1))) {
											if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You can't access yourself"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											else {
												WorldInfo info;
												world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You got world access!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet2);
											}
										}
									}
								}
							}

							else if (str.substr(0, 8) == "/ignore ")
							{
								if (str.substr(8, cch.length() - 8 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) continue;
								if ((str.substr(8, cch.length() - 8 - 1) == "jar") || (str.substr(8, cch.length() - 8 - 1) == "chandra")) continue;
								if ((str.substr(8, cch.length() - 8 - 1) == "chandra")) continue;

								string username = PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1));

								bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(username) + ".json");
								if (!existx)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Player not found, `4ignore `waborted!"));

									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								bool existxx = std::experimental::filesystem::exists("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
								if (!existxx)
								{
									std::ofstream oo("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									json ignoredPlayers;
									json ignoredPlayersArray = json::array();

									ignoredPlayers["ignoredPlayers"] = ignoredPlayersArray;

									oo << ignoredPlayers << std::endl;
								}

								std::ifstream ifff("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {


								}
								vector<string>ignoredPlayers;
								json j;
								ifff >> j; //load
								if (j.count("ignoredPlayers") > 0) {

									for (int i = 0; i < j["ignoredPlayers"].size(); i++) {
										ignoredPlayers.push_back(j["ignoredPlayers"][i]);
									}
								}


								bool arJauIgnorina = false;
								if (j.count("ignoredPlayers") > 0) {
									for (int i = 0; i < ignoredPlayers.size(); i++)
									{
										if (ignoredPlayers[i] == username)
										{
											arJauIgnorina = true;
											break;
										}
									}
								}

								if (!arJauIgnorina)
								{

									ignoredPlayers.push_back(username);

									j["ignoredPlayers"] = ignoredPlayers;

									std::ofstream o("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									o << j << std::endl;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully added player`8 " + username + "`2 to ignore list."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You already ignoring this player!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}

							else if (str.substr(0, 10) == "/unignore ")
							{
								if (str.substr(10, cch.length() - 10 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(10, cch.length() - 10 - 1)) continue;
								if ((str.substr(10, cch.length() - 10 - 1) == "jar") || (str.substr(10, cch.length() - 10 - 1) == "chandra")) continue;
								if ((str.substr(10, cch.length() - 10 - 1) == "chandra")) continue;

								string username = PlayerDB::getProperName(str.substr(10, cch.length() - 10 - 1));

								bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(username) + ".json");
								if (!existx)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Player not found, `4unignore `waborted!"));

									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								bool existxx = std::experimental::filesystem::exists("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
								if (existxx)
								{
									std::ifstream ifff("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {


									}
									vector<string>ignoredPlayers;
									json j;
									ifff >> j; //load
									if (j.count("ignoredPlayers") > 0) {

										for (int i = 0; i < j["ignoredPlayers"].size(); i++) {
											ignoredPlayers.push_back(j["ignoredPlayers"][i]);
										}
									}

									bool arIgnorina = false;
									int kuriVieta = 0;
									for (int i = 0; i < ignoredPlayers.size(); i++)
									{
										if (ignoredPlayers[i] == username)
										{
											arIgnorina = true;
											kuriVieta = i;
											break;
										}
									}

									if (arIgnorina)
									{
										std::ofstream o("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}

										ignoredPlayers.erase(ignoredPlayers.begin() + kuriVieta);
										j["ignoredPlayers"] = ignoredPlayers;
										o << j << std::endl;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully removed player`8 " + username + "`2 from ignore list."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are not ignoring this player!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are not ignoring this player!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}

							else if (str.substr(0, 8) == "/invite ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;
									if (((PlayerInfo*)(peer->data))->lastINV + 300000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
									{
										((PlayerInfo*)(peer->data))->lastINV = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
									}
									else {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Please wait `25 Minutes`o till you can invite someone again!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
										continue;
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Invitation has been `2Sent`o!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wPlayer " + ((PlayerInfo*)(peer->data))->displayName + " has invited you to join the world " + ((PlayerInfo*)(peer->data))->currentWorld + "`w!``|left|660|\n\nadd_spacer|small|\nadd_label_with_icon|small|\nadd_button|nothing|`4IGNORE!|noflags|0|0|\nadd_button|nothing" + ((PlayerInfo*)(peer->data))->currentWorld + "|`2Go to world.|noflags|0|0|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									string imie = str.substr(8, cch.length() - 8 - 1);
									ENetPeer* currentPeer;
									string dupa;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
										{
											dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
											enet_peer_send(currentPeer, 0, packet3);
										}
									}
									delete p2.data;
									delete p3.data;
									continue;
								}
							}


							else if (str == "/magic") {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 555) {
									if (!world) continue;


									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou cast a magic spell!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet);
									delete ps.data;

									string text = "action|play_sfx\nfile|audio/magic.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									float x = ((PlayerInfo*)(peer->data))->x;
									float y = ((PlayerInfo*)(peer->data))->y;
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										Player::OnParticleEffect(currentPeer, 90, x, y, 0);
									}

									bool found = false;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											bool isRev = false;
											for (int i = 5; i < 45; i++) {
												if (isRev == false) {
													Player::OnParticleEffect(currentPeer, 3, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
													Player::OnParticleEffect(currentPeer, 2, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
													isRev = true;
												}
												else {
													Player::OnParticleEffect(currentPeer, 3, x - i * (rand() % 9), y - i * (rand() % 9), i * 100);
													Player::OnParticleEffect(currentPeer, 2, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
													isRev = false;
												}
											}
										}
									}

								}
							}


							else if (str.substr(0, 10) == "/particle ") {
								string p = str.substr(10, str.length());
								if (p.length() > 0 && has_only_digits(p)) Player::OnParticleEffect(peer, atoi(p.c_str()), ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
							}

							else if (str.substr(0, 10) == "/bitshift ") //todo
							{
								((PlayerInfo*)(peer->data))->bitShiftTest = atoi(str.substr(10, cch.length() - 10 - 1).c_str());
							}

							else if (str.substr(0, 13) == "/offlineinfo ") { //this is coded by playingohd gaming special code for nabzgt.



								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}




								if (((PlayerInfo*)(peer->data))->adminLevel >= 999)
								{
									string playerCalled = PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1));
									string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));


									if (playerCalled == "jar" || playerCalled == "fast" || playerCalled == "chandra") {

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Cannot View Player Info Of `^Server Owner's`@!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);


										continue;
										break;
									}
									toUpperCase(wrldname);
									if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
									{
										continue;
										break;
									}

									std::ifstream ifs("players/" + playerCalled + ".json");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));


									std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
									std::string contentp((std::istreambuf_iterator<char>(ifs7)),
										(std::istreambuf_iterator<char>()));
									ifs7.close();



									string x;
									x.append(content);

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^Player Info [`4OFFLINE`^] -> " + x + " `9Gems `^-> `4" + contentp));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									x = x.substr(0, x.length() - 2);

								}
							}
							else if (str.substr(0, 6) == "/info ") { //this is coded by playingohd gaming special code for nabzgt.

								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{
									string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));
									toUpperCase(wrldname);
									if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
									{

									}
									else
									{
										string playerCalled = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

										std::ifstream ifs("players/" + playerCalled + ".json");
										std::string content((std::istreambuf_iterator<char>(ifs)),
											(std::istreambuf_iterator<char>()));


										std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
										std::string contentp((std::istreambuf_iterator<char>(ifs7)),
											(std::istreambuf_iterator<char>()));
										ifs7.close();



										string x;
										x.append(content);

										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											if (((PlayerInfo*)(currentPeer->data))->rawName == playerCalled)
											{

												string showcountry = ((PlayerInfo*)(currentPeer->data))->country;
												string showgameversion = ((PlayerInfo*)(currentPeer->data))->gameversion;
												string showrid = ((PlayerInfo*)(currentPeer->data))->rid;
												string showwk = ((PlayerInfo*)(currentPeer->data))->wkid;
												string showmeta = ((PlayerInfo*)(currentPeer->data))->metaip;
												string showmac = ((PlayerInfo*)(currentPeer->data))->mac;
												string showhash2 = ((PlayerInfo*)(currentPeer->data))->hash2;
												string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
												string showage = ((PlayerInfo*)(currentPeer->data))->player_age;
												string showaid = ((PlayerInfo*)(currentPeer->data))->aid;
												string showgid = ((PlayerInfo*)(currentPeer->data))->gid;
												string showvid = ((PlayerInfo*)(currentPeer->data))->vid;
												string showworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
												string showplainip = ((PlayerInfo*)(currentPeer->data))->charIP;
												string showdeviceversion = ((PlayerInfo*)(currentPeer->data))->deviceversion;
												string showlmode = ((PlayerInfo*)(currentPeer->data))->lmode;
												string showgdpr = ((PlayerInfo*)(currentPeer->data))->gdpr;
												string showuser = ((PlayerInfo*)(currentPeer->data))->user;
												string showtoken = ((PlayerInfo*)(currentPeer->data))->token;
												string showf = ((PlayerInfo*)(currentPeer->data))->f;
												string showfz = ((PlayerInfo*)(currentPeer->data))->fz;
												string showfhash = ((PlayerInfo*)(currentPeer->data))->fhash;
												//string showhid = ((PlayerInfo*)(currentPeer->data))->hpid;
												string showplatidplain;


												if (showplatid == "4")
												{
													showplatidplain = " mobile (android) ";
												}
												else if (showplatid == "0")
												{
													showplatidplain = " PC (Windows) ";
												}
												else if (showplatid == "6")
												{
													showplatidplain = " Mac (OS X) ";
												}
												else
												{
													showplatidplain = " UNIX (Linux, iOS (most likely), FreeBSD etc.) ";
												}
												if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Cannot View Player Info Of `^Server Owner's`@!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^Player Info [`2ONLINE`^] -> " + x + " `9Gems `^-> `4" + contentp + " " + "`^Current world: `4" + showworld + " `^country: `4" + showcountry + " `^gameversion: `4" + showgameversion + " ^rid: `4" + showrid + " `^aid: `4" + showaid + " `^gid: `4" + showgid + " `^vid: `4" + showvid + " `^wk identity (SID): `4" + showwk + " `^meta: `4" + showmeta + " ^mac: `4" + showmac + " `^hash2: `4" + showhash2 + " `^platform: `4" + showplatidplain + " `^device-version: `4" + showdeviceversion + " `^L-mode: `4" + showlmode + " `^GDPR: `4" + showgdpr + " `^User: `4" + showuser + " `^Token: `4" + showtoken + " `^F-Identity: `4" + showf + " `^FZ-Identity: `4" + showfz + +" `^fhash: `4" + showfhash + " `^age: `4" + showage));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}

												x = x.substr(0, x.length() - 2);


											}
										}

									}
								}
							}
							else if (str.substr(0, 9) == "/ipcheck ") {


								string playerCalled = str.substr(9, cch.length() - 9 - 1);
								cout << "/ipcheck from " + ((PlayerInfo*)(peer->data))->rawName + " on: " + playerCalled << endl;
								std::thread second((Fctor()), peer, playerCalled);
								second.detach();
							}

							else if (str == "/hardban")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /hardban <user>"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}

							else if (str.substr(0, 9) == "/hardban ") { //This is a special code by PlayIngoHD Gaming extra for NabzGT!
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(9, cch.length() - 9 - 1)) continue;
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra")
								{
									ENetPeer* currentPeer;
									string playerCalled = str.substr(9, cch.length() - 9 - 1);
									bool existh = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerCalled) + ".json");

									if (existh)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4permanently hard banned `2" + playerCalled + " `#** `o(`4/rules `oto see the rules!)"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);

											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(playerCalled))
											{
												cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used HARDBAN on " << ((PlayerInfo*)(currentPeer->data))->rawName << endl;

												std::ofstream outfile("ridbans/" + ((PlayerInfo*)(currentPeer->data))->rid + ".txt");

												outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
												outfile << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

												outfile.close();

												string checkaid = ((PlayerInfo*)(currentPeer->data))->aid;
												if (checkaid.length() > 4)
												{
													std::ofstream outfile2("aidbans/" + ((PlayerInfo*)(currentPeer->data))->aid + ".txt");

													outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
													outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

													outfile2.close();
												}

												string checkgid = ((PlayerInfo*)(currentPeer->data))->gid;
												if (checkgid.length() > 4)
												{
													std::ofstream outfile3("gidbans/" + ((PlayerInfo*)(currentPeer->data))->gid + ".txt");

													outfile3 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
													outfile3 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

													outfile3.close();
												}

												string checkvid = ((PlayerInfo*)(currentPeer->data))->vid;
												if (checkvid.length() > 4)
												{
													std::ofstream outfile4("vidbans/" + ((PlayerInfo*)(currentPeer->data))->vid + ".txt");

													outfile4 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
													outfile4 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

													outfile4.close();
												}

												string checksid = ((PlayerInfo*)(currentPeer->data))->wkid;
												if (checksid.length() > 8)
												{
													std::ofstream outfile5("sidbans/" + ((PlayerInfo*)(currentPeer->data))->wkid + ".txt");

													outfile5 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
													outfile5 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

													outfile5.close();
												}

												/*	if (((PlayerInfo*)(currentPeer->data))->mac != "02:00:00:00:00:00" && ((PlayerInfo*)(currentPeer->data))->mac != "00:00:00:00:00:00")
													{
														std::string mac(((PlayerInfo*)(currentPeer->data))->mac);
														Remove(mac, ":");

														std::ofstream outfile6("macbans/" + mac + ".txt"); // c = filteredmac

														outfile6 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

														outfile6.close();
													}*/
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully `5HARD `4BANNED `w" + ((PlayerInfo*)(currentPeer->data))->rawName + " !! (hardbans cannot be removed from the game, only from server itself)"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;

												enet_peer_disconnect_later(currentPeer, 0);
											}
										}
										delete p2.data;
									}
								}

							}

							else if (str.substr(0, 11) == "/deviceban ") { //This is a special code by PlayIngoHD Gaming extra for NabzGT!
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888)
								{
									string playerCalled = str.substr(11, cch.length() - 11 - 1);
									bool exist = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerCalled) + ".json");

									if (exist)
									{


										std::ifstream ifs("players/" + PlayerDB::getProperName(playerCalled) + ".json");
										if (ifs.is_open()) {
											json j;
											ifs >> j;

											int ipID = j["ipID"];
											string ipIDstr = to_string(ipID);

											if (ipIDstr.length() < 4)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR`` >> `4Banning ``aborted, error while fetching proper IP. Please try again!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;
											}
											else
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Device of player with ID:\n " + ipIDstr + " added to ban list. Abusing this command will lead into ban and demote!\n"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;

												std::ofstream outfile("devicebans/" + ipIDstr + ".txt");

												outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

												outfile.close();
											}
										}
										else
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Banning`` aborted, player was not found. If you are sure this player exists, please try again!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
										}
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Banning`` aborted, player was not found. If you are sure this player exists, please try again!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
									}


									/*std::ofstream outfile("devicebans/" + playerCalled + ".txt");

									outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

									outfile.close();




									string x;
									x.append(playerCalled);


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Device of player with ID:\n " + x + " added to ban list. Abusing this command will lead into ban and demote!\n"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);


									x = x.substr(0, x.length() - 2);
									delete p.data;*/
								}


							}

							else if (str == "/nick")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 555) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Premium `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								string name2;
								string namemsg = ((PlayerInfo*)(peer->data))->rawName;
								((PlayerInfo*)(peer->data))->isNicked = false;
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
								{
									name2 = "[`4SC`w]`c" + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
								{
									name2 = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
								{
									name2 = "`c@" + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
								{
									name2 = "`o@" + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
								{
									name2 = "`w[`1VIP`w]" + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";

								}

								else if (((PlayerInfo*)(peer->data))->adminLevel == 0)
								{
									name2 = "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								((PlayerInfo*)(peer->data))->displayName = name2;
								((PlayerInfo*)(peer->data))->msgName = namemsg;
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor

								((PlayerInfo*)(peer->data))->displayName = name2;
								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);



								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
								delete p7.data;

								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYour nickname has been reverted!"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet);
								delete ps.data;

							}


							if (str == "/giverole")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Please include `2Player Name That you want to `4Give rank`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}

							else if (str.substr(0, 11) == "/giveowner ") {
								if (((PlayerInfo*)(peer->data))->rawName == "chandra" || ((PlayerInfo*)(peer->data))->rawName == "jar") {
									string name = str.substr(11, str.length());


									ENetPeer* currentPeer;


									bool found = false;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;


										string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


										std::transform(name.begin(), name.end(), name.begin(), ::tolower);
										std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);


										if (name == name2) {
											GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "You received `4Server Creator!"), "audio/hub_open.wav"), 0));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											((PlayerInfo*)(currentPeer->data))->adminLevel = 1000;
											std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");


											if (ifff.fail()) {
												ifff.close();


											}
											if (ifff.is_open()) {
											}
											json j;
											ifff >> j; //load


											j["adminLevel"] = ((PlayerInfo*)(currentPeer->data))->adminLevel; //edit




											std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << j << std::endl;
											found = true;
											enet_peer_disconnect_later(currentPeer, 0);
										}
									}
									if (found) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9You give owner to player " + name + "."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
									}
									else {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player not found!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
									}
								}
							}

							else if (str.substr(0, 10) == "/giverole ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									ENetPeer* currentPeer;
									string imie = str.substr(10, cch.length() - 10 - 1);
									string role = "";
									int level = 0;
									bool bonus = false;
									bool r = true;
									int c = 0;
									string rankName = "";
									if (imie.find(" ") != std::string::npos)
									{
										role = imie.substr(imie.find(" ") + 1).c_str();
										imie = imie.substr(0, imie.find(" "));
									}

									std::ifstream iff("players/" + imie + ".json");


									if (iff.fail()) {
										iff.close();


									}
									if (iff.is_open()) {
									}
									json x;
									iff >> x; //load

									c = x["adminLevel"];




									std::ofstream o("players/" + imie + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << x << std::endl;

									if (c == 1000) continue;
									if (role != "") {
										if (role == "vip") {
											bonus = true;
											rankName = "`1VIP";
											r = true;
											level = c;
											if (c < 555) {
												level = 555;
											}
										}
										if (role == "mod") {
											bonus = false;
											rankName = "`^MOD";
											level = 666;
											r = true;
										}
										if (role == "god") {
											rankName = "`9GOD";
											bonus = false;
											level = 777;
											r = true;
										}
										if (role == "divine") {
											rankName = "`cDivine";
											bonus = false;
											level = 888;
											r = true;
										}
										if (role == "admin") {
											rankName = "`4Admin";
											bonus = false;
											level = 999;
											r = true;
										}
										else
										{
										}
									}
									if (r == false) continue;
									std::ifstream ifff("players/" + imie + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["isvip"] = bonus; //edit
									j["adminLevel"] = level;



									std::ofstream f("players/" + imie + ".json"); //save
									if (!f.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									f << j << std::endl;

									cout << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /giverole " << imie << " " << role;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `4have Changed `2 " + imie + " `4Role To " + rankName + ""));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;

									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2GAVE THE `8" + rankName + "`2 RANK TO `4player `w" + imie));
									string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (r == false)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);


											//enet_host_flush(server);
										}
										if (currentPeer->state == ENET_PEER_STATE_CONNECTED)
										{
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
										}
									}
									delete data;
									delete p6.data;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (r == false)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == imie) {
											GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: your rank has been `5Changed to `8" + rankName + ""));
											ENetPacket* packet3 = enet_packet_create(ps3.data,
												ps3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet3);
											delete ps3.data;
											enet_peer_disconnect_later(currentPeer, 0);
										}

									}
								}
							}

							/*else if (str.substr(0, 10) == "/giverole ") {

								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (str.substr(10, cch.length() - 10 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(10, cch.length() - 10 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to edit your rank!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								if ((str.substr(10, cch.length() - 10 - 1) == "chandra") || (str.substr(10, cch.length() - 10 - 1) == "jar")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}



								string ban_info = str;

								size_t extra_space = ban_info.find("  ");
								if (extra_space != std::string::npos) {
									ban_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string ban_user;
								string ban_time;
								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /giverole <user> <rankname>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}

								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_user = ban_info.substr(0, pos);
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /giverole <user> <rankname>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}

								ban_time = ban_info;
								//cout << "administrator "<<((PlayerInfo*)(peer->data))->rawName <<"used /giverank " << ban_user << " " << ban_time;
								string playerName = ban_user;
								string rankName = ban_time;

								if (((PlayerInfo*)(peer->data))->rawName == playerName) continue;

								int countranks, rankNumber;
								string rankText;
								bool arRado = false;
								ifstream ranks("giverank.txt");
								ranks >> countranks;
								for (int i = 0; i < countranks; i++)
								{
									ranks >> rankNumber >> rankText;
									if (rankText == rankName)
									{
										arRado = true;
										break;
									}

								}
								ranks.close();
								if (arRado == false)
								{
									continue;
								}

								bool success = false;
								GiveRank(rankName, playerName, success);
								if (success)
								{
									cout << "administrator " << ((PlayerInfo*)(peer->data))->rawName << "used /giverole " << ban_user << " " << ban_time;



									ENetPeer* currentPeer;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `4have Changed `2 " + playerName + " `4Role To " + rankName + ""));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);

										if (((PlayerInfo*)(currentPeer->data))->rawName == playerName)
										{
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {
												GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: your rank has been `5Changed to `8" + rankName + ""));
												ENetPacket* packet3 = enet_packet_create(ps3.data,
													ps3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet3);
												delete ps3.data;
												enet_peer_disconnect_later(currentPeer, 0);
											}
										}

									}
									delete p2.data;



									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2GAVE THE `8" + rankName + "`2 RANK TO `4player `w" + playerName));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p6.data;

								}
								else
								{
									GamePacket pse = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4An error occurred.`2It could be because you entered the wrong player name or rank name."));
									ENetPacket* packete = enet_packet_create(pse.data,
										pse.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packete);
									delete pse.data;
									continue;
								}
							}*/


							else if (str.substr(0, 11) == "/delstatus ") {


								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (str.substr(11, cch.length() - 11 - 1) == "") continue;
								if ((str.substr(11, cch.length() - 11 - 1) == "cmd") || (str.substr(11, cch.length() - 11 - 1) == "ttika") || (str.substr(5, cch.length() - 11 - 1) == "alpht")) continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(11, cch.length() - 11 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to edit your status!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;

								}

								if ((str.substr(11, cch.length() - 11 - 1) == "chandra") || (str.substr(11, cch.length() - 11 - 1) == "jar")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}


								cout << "Server creator " << ((PlayerInfo*)(peer->data))->rawName << " has removed " << str.substr(11, cch.length() - 11 - 1) << " from Staff team" << endl;

								ENetPeer* currentPeer;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `5Removed `2 " + str.substr(11, cch.length() - 11 - 1) + " `#from Staff Team."));
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);

									if (((PlayerInfo*)(currentPeer->data))->rawName == str.substr(11, cch.length() - 11 - 1)) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave Removed `5 " + str.substr(11, cch.length() - 11 - 1) + " `#from Staff Team."));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Warning from `4System`0: You've been `5REMOVED `#from Staff team"), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);
										GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `5Removed `5from Staff Team."));
										ENetPacket* packet3 = enet_packet_create(ps3.data,
											ps3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet3);
										if (((PlayerInfo*)(currentPeer->data))->isIn)
										{
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {


												/*for (int i = 0; i < admins.size(); i++) {
													Admin admin = admins[i];
													if (admin.username == ((PlayerInfo*)(peer->data))->rawName && admin.password == ((PlayerInfo*)(peer->data))->tankIDPass) {
														admins.erase(remove_if(admins.begin(), admins.end(), [&toKill](const admin& u) {return u.username == toKill; }), admins.end());
													}
												}*/

												PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
												p->adminLevel = 0;
												string username = PlayerDB::getProperName(p->rawName);

												std::ofstream o("players/" + username + ".json");
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												json j;

												int ban = p->ban;
												int clothback = p->cloth_back;
												int clothhand = p->cloth_hand;
												int clothface = p->cloth_face;
												int clothhair = p->cloth_hair;
												int clothfeet = p->cloth_feet;
												int clothpants = p->cloth_pants;
												int clothneck = p->cloth_necklace;
												int clothshirt = p->cloth_shirt;
												int clothmask = p->cloth_mask;
												int clothances = p->cloth_ances;
												string guild = p->guild;
												bool joinguild = p->joinguild;
												int level = p->level;
												int xp = p->xp;


												string password = ((PlayerInfo*)(currentPeer->data))->tankIDPass;
												j["username"] = username;
												j["password"] = hashPassword(password);
												j["adminLevel"] = p->adminLevel;
												j["ClothBack"] = clothback;
												j["ClothHand"] = clothhand;
												j["ClothFace"] = clothface;
												j["ClothShirt"] = clothshirt;
												j["ClothPants"] = clothpants;
												j["ClothNeck"] = clothneck;
												j["ClothHair"] = clothhair;
												j["ClothFeet"] = clothfeet;
												j["ClothMask"] = clothmask;
												j["ClothAnces"] = clothances;


												j["isBanned"] = ban;
												int ip;
												j["ipID"] = peer->address.host;
												j["effect"] = ((PlayerInfo*)(currentPeer->data))->effect;
												j["friends"] = ((PlayerInfo*)(currentPeer->data))->friendinfo;
												j["ip"] = ((PlayerInfo*)(currentPeer->data))->charIP;
												j["kxpswl"] = ((PlayerInfo*)(currentPeer->data))->kxpswl;
												j["lastlog"] = ((PlayerInfo*)(currentPeer->data))->lastlog;
												j["login"] = ((PlayerInfo*)(currentPeer->data))->login;
												j["onquest"] = ((PlayerInfo*)(currentPeer->data))->onquest;
												j["boughtLGW"] = ((PlayerInfo*)(currentPeer->data))->boughtLGW;
												j["boughtLGK"] = ((PlayerInfo*)(currentPeer->data))->boughtLGK;
												j["boughtLGD"] = ((PlayerInfo*)(currentPeer->data))->boughtLGD;
												j["boughtLGB"] = ((PlayerInfo*)(currentPeer->data))->boughtLGB;
												j["boughtLKW"] = ((PlayerInfo*)(currentPeer->data))->boughtLKW;
												j["boughtCWD"] = ((PlayerInfo*)(currentPeer->data))->boughtCWD;
												j["boughtRFS"] = ((PlayerInfo*)(currentPeer->data))->boughtRFS;
												j["boughtCDG"] = ((PlayerInfo*)(currentPeer->data))->boughtCDG;
												j["boughtLTIT"] = ((PlayerInfo*)(currentPeer->data))->boughtLTIT;
												j["aap"] = ((PlayerInfo*)(currentPeer->data))->isAAP;
												j["receivedwarns"] = ((PlayerInfo*)(currentPeer->data))->warns;
												j["receivedbans"] = ((PlayerInfo*)(currentPeer->data))->bans;
												j["guild"] = guild;
												j["joinguild"] = joinguild;
												j["level"] = level;
												j["xp"] = xp;
												j["rubble"] = p->rubble;
												j["rubblexp"] = p->rubblexp;
												j["amberxp"] = p->amberxp;
												j["amber"] = p->amber;

												j["opalxp"] = p->opalxp;
												j["opal"] = p->opal;


												j["goldxp"] = p->goldxp;
												j["gold"] = p->gold;


												j["sapphirexp"] = p->sapphirexp;
												j["sapphire"] = p->sapphire;


												j["diamondxp"] = p->diamondxp;
												j["diamond"] = p->diamond;


												j["emeraldxp"] = p->emeraldxp;
												j["emerald"] = p->emerald;
												j["worldsowned"] = ((PlayerInfo*)(currentPeer->data))->worldsowned;
												o << j << std::endl;
											}
										}
										delete ps.data;
										enet_peer_disconnect_later(currentPeer, 0);

									}

									enet_peer_send(currentPeer, 0, packet);

									//enet_host_flush(server);
								}
								delete p.data;



							}

							else if (str.substr(0, 6) == "/nick ") {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra" || ((PlayerInfo*)(peer->data))->adminLevel >= 555) {
									string name2 = "`w`w" + str.substr(6, cch.length() - 6 - 1);
									((PlayerInfo*)(peer->data))->msgName = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

									string lognickname = str.substr(6, cch.length() - 6 - 1);
									if (name2.length() < 5 && ((PlayerInfo*)(peer->data))->adminLevel != 1000)
									{
										GamePacket psa = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Only Owners can change nick to nothing."));
										ENetPacket* packetsa = enet_packet_create(psa.data,
											psa.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packetsa);
										delete psa.data;
									}
									else
									{

										cout << ((PlayerInfo*)(peer->data))->rawName << " nicked into " << lognickname << endl;




										((PlayerInfo*)(peer->data))->displayName = str.substr(6, cch.length() - 6 - 1);
										((PlayerInfo*)(peer->data))->country = "jp";
										((PlayerInfo*)(peer->data))->isNicked = true;




										GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
										memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor

										((PlayerInfo*)(peer->data))->displayName = name2;
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);



										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
										delete p7.data;

										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Your nickname has been changed to `2" + str.substr(6, cch.length() - 6 - 1) + "`o! Type /nick (only /nick, to get default name back!)"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet);
										delete ps.data;
										string name = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Changing `2Nickname `4To `w" + str.substr(6, cch.length() - 6 - 1)));

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 777) {
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet);

												//enet_host_flush(server);
											}
										}
										delete p.data;
									}
								}
							}

							else if (str.substr(0, 8) == "/remove ") { //This is a special code by PlayIngoHD Gaming extra for NabzGT!

								if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {
									string ipidx = str.substr(8, cch.length() - 8 - 1);

									bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(ipidx) + ".json");
									if (existx)
									{
										std::ifstream ifs("players/" + PlayerDB::getProperName(ipidx) + ".json");
										if (ifs.is_open()) {
											json j;
											ifs >> j;

											int ipID = j["ipID"];
											string ipIDstr = to_string(ipID);




											bool exist = std::experimental::filesystem::exists("devicebans/" + ipIDstr + ".txt");
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Working..."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packet);
											delete ps.data;

											if (exist == true)
											{
												string remipid = "devicebans/" + ipIDstr + ".txt";
												remove(remipid.c_str());
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Successfully removed ipID from ban list."));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet);
												delete ps.data;
											}
											else
											{
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ipID (" + ipIDstr + ") of player not found in ban list`w, aborting."));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packet);
												delete ps.data;
											}
										}
									}
									else
									{
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Player (" + ipidx + ") not found`w, aborting."));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
								}
							}
							else if (str.substr(0, 9) == "/weather ") {
								if (world->name != "ADMIN" || world->name != "HELL") {
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->adminLevel >= 888)


										{
											ENetPeer* currentPeer;


											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlayer `2" + ((PlayerInfo*)(peer->data))->displayName + "`o has just changed the world's weather!"));
													ENetPacket* packet1 = enet_packet_create(p1.data,
														p1.len,
														ENET_PACKET_FLAG_RELIABLE);


													enet_peer_send(currentPeer, 0, packet1);
													delete p1.data;

													if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
													{
														getPlyersWorld(peer)->weather = atoi(str.substr(9).c_str());
													}
													GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), atoi(str.substr(9).c_str())));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);


													enet_peer_send(currentPeer, 0, packet2);
													delete p2.data;
													continue; /*CODE UPDATE /WEATHER FOR EVERYONE!*/
												}
											}
										}
									}
								}
							}
							else if (str == "/count") {
								if (((PlayerInfo*)(peer->data))->adminLevel < 777) continue;
								int count = 0;
								ENetPeer* currentPeer;
								string name = "";
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									count++;
								}
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "There are " + std::to_string(count) + " people online out of 1024 limit."));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								//enet_host_flush(server);

							}
							else if (str.substr(0, 8) == "/system ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " In World " << ((PlayerInfo*)(peer->data))->currentWorld << " Used System Broadcast With Message: " << str.substr(5, cch.length() - 5 - 1) << endl;
								GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), str.substr(8, cch.length() - 8 - 1).c_str()), "audio/hub_open.wav"), 0));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									enet_peer_send(currentPeer, 0, packet);
								}

								//enet_host_flush(server);
								delete p.data;
							}


							else if (str == "/invis") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 554) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}



								//sendConsoleMsg(peer, "`6" + str);
								if (pData->isinv == false) {

									pData->isinv = true;
									sendConsoleMsg(peer, "`oSilent,invisible,deadly.(`$Ninja Stealth `omod added)");
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Invisible Mode `2Enabled`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									ENetPeer* currentPeer;
									GamePacket p0 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));

									memcpy(p0.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									string text = "action|play_sfx\nfile|audio/boo_ghost_be_gone.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packet6 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet6);
									delete data;
									delete p0.data;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{


											((PlayerInfo*)(peer->data))->isinv = 1;
											GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));

											memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											delete p2.data;

											float x = ((PlayerInfo*)(peer->data))->x;
											float y = ((PlayerInfo*)(peer->data))->y;
											int i = 5; i < 45; i++;
											int effect = 105;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x + i * (rand() % 18), y + i * (rand() % 18), i * 100));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;

											GamePacket psp2 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x + i * (rand() % 9), y + i * (rand() % 9), i * 100));

											ENetPacket* packetd2 = enet_packet_create(psp2.data,
												psp2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd2);
											delete psp2.data;

											GamePacket psp3 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x + i * (rand() % 24), y + i * (rand() % 24), i * 100));

											ENetPacket* packetd3 = enet_packet_create(psp3.data,
												psp3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd3);
											delete psp3.data;

											GamePacket psp4 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x + i * (rand() % 13), y + i * (rand() % 13), i * 100));

											ENetPacket* packetd4 = enet_packet_create(psp4.data,
												psp4.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd4);
											delete psp4.data;

											GamePacket psp5 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x + i * (rand() % 24), y + i * (rand() % 24), i * 100));

											ENetPacket* packetd5 = enet_packet_create(psp5.data,
												psp5.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd5);
											delete psp5.data;

											GamePacket psp6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x + i * (rand() % 13), y + i * (rand() % 13), i * 100));

											ENetPacket* packetd6 = enet_packet_create(psp6.data,
												psp6.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd6);
											delete psp6.data;

										}
									}

								}
								else {
									sendConsoleMsg(peer, "`oYou are less sneaky now.(`$Ninja Stealth `omod removed)");
									((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Invisible Mode `4Disabled`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									GamePacket p5 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));
									memcpy(p5.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet5 = enet_packet_create(p5.data,
										p5.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet5);
									delete p5.data;



									pData->isinv = false;

									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayName));
									memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									string text = "action|play_sfx\nfile|audio/boo_proton_glove.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packet8 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet8);
									delete data;
									delete p3.data;

									ENetPeer* currentPeer;
									GamePacket penter1 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									GamePacket penter2 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									GamePacket penter3 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									GamePacket penter4 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									GamePacket penter8 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									GamePacket penter5 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									GamePacket penter6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									GamePacket penter7 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)(peer->data))->x1 + 10, ((PlayerInfo*)(peer->data))->y1 + 15));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											if (!((PlayerInfo*)(peer->data))->isGhost)
											{
												ENetPacket* packet5 = enet_packet_create(penter1.data,
													penter1.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet5);

												ENetPacket* packet6 = enet_packet_create(penter2.data,
													penter2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet6);

												ENetPacket* packet7 = enet_packet_create(penter3.data,
													penter3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet7);

												ENetPacket* packet8 = enet_packet_create(penter4.data,
													penter4.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet8);

												ENetPacket* packet9 = enet_packet_create(penter5.data,
													penter5.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet9);

												ENetPacket* packet10 = enet_packet_create(penter6.data,
													penter6.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet10);

												ENetPacket* packet11 = enet_packet_create(penter7.data,
													penter7.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet11);

												ENetPacket* packet12 = enet_packet_create(penter8.data,
													penter8.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet12);
												GamePacket pis = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));

												memcpy(pis.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packetpis = enet_packet_create(pis.data,
													pis.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packetpis);
												delete pis.data;
											}


											if (((PlayerInfo*)(peer->data))->rawName != ((PlayerInfo*)(currentPeer->data))->rawName)
											{
												enet_peer_send(currentPeer, 0, packet3);
											}
										}
									}

									sendState(peer);
									sendClothes(peer);
								}

							}
							else if (str.substr(0, 5) == "/jsb ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5Super-Broadcast`` from `$`2" + name + "```` in (`$`4JAMMED!``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;



								}
							}

							else if (str.substr(0, 3) == "/v ") {
								if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) >= 555) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[VIP CHAT] `2" + ((PlayerInfo*)(peer->data))->tankIDName + "`3(" + ((PlayerInfo*)(peer->data))->displayName + "`3): `6" + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (getAdminLevel(((PlayerInfo*)(currentPeer->data))->rawName, ((PlayerInfo*)(currentPeer->data))->tankIDPass) >= 555) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
							}
							if (str == "/mod")
							{


								//if (getPlyersWorld(peer)->allowMod == false && world->owner != ((PlayerInfo*)(currentPeer->data))->rawName)





								if (getPlyersWorld(peer)->allowMod == false && ((PlayerInfo*)(peer->data))->rawName != world->owner) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7You are not allowed to enable the /mod command in this world cause it is deactivated by owner."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									((PlayerInfo*)(peer->data))->skinColor = atoi("-155");
									sendClothes(peer);
									((PlayerInfo*)(peer->data))->isModState = true;
									((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
									sendState(peer);
								}
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oModerator mode has been `2enabled`o! You can now walk through blocks!``"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p.data;
								delete data;
							}
							else if (str.substr(0, 3) == "/m ") {
								if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) >= 666) {
									using namespace std::chrono;
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r[MOD CHAT] `2" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(" + ((PlayerInfo*)(peer->data))->displayName + "`r): `6" + str.substr(3, cch.length() - 3 - 1)));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (getAdminLevel(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass) >= 666) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p.data;
								}
							}
							else if (str.substr(0, 3) == "/g ") {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 700) {
									using namespace std::chrono;
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`s[GLOBAL CHAT] `o" + ((PlayerInfo*)(peer->data))->tankIDName + "`5(" + ((PlayerInfo*)(peer->data))->displayName + "`5): `6" + str.substr(3, cch.length() - 3 - 1)));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p.data;
								}
							}


							else if (str.substr(0, 5) == "/sdb ") {
								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Not allowed to SDB while ducttaped!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									if (((PlayerInfo*)(peer->data))->level < 10)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> `4OOPS: `oTo cut down on `4spam `o the broadcast features available to who are level `55 `oand higher."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {

										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 19999)
										{
											using namespace std::chrono;
											string message = str.substr(5, cch.length() - 5 - 1);
											string world = ((PlayerInfo*)(peer->data))->currentWorld;
											if (((PlayerInfo*)(peer->data))->lastSB + 30000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											}
											else {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Cooldown >> Wait 30 seconds to throw another Super-Broadcast!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												continue;
											}
											int gemcalc10k = b - 20000;


											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;

											GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ">> Super duper broadcast send to all Player!"));
											ENetPacket* packet5 = enet_packet_create(p5.data,
												p5.len,
												ENET_PACKET_FLAG_RELIABLE);



											enet_peer_send(peer, 0, packet5);
											delete p5.data;

											string name = ((PlayerInfo*)(peer->data))->rawName; /*"`#[`eVIP-SB`#] `5** From (`6" + name + "`#) in [`4HIDDEN!`#] ** : `9"*/
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`oSuper Duper Broadcast|left|3138|\nadd_textbox|`5from : `o" + name + "``|left|100|\nadd_spacer|small|\nadd_textbox|`5" + message + "``|left|100|\nadd_spacer|small|\nadd_button|warpsdb|`5Warp To`o " + world + "``|noflags|0|0|\nadd_button|idontwantto|`oIgnore|noflags|0|0|"));
											string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;


											std::ifstream iff("sdbworld.json");


											if (iff.fail()) {
												iff.close();


											}
											if (iff.is_open()) {
											}
											json x;
											iff >> x; //load


											x["World"] = ((PlayerInfo*)(peer->data))->currentWorld;




											std::ofstream o("sdbworld.json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << x << std::endl;




											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;

												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet);




												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet2);

												//enet_host_flush(server);
											}
											delete data;
											delete p.data;
										}
										else
										{
											int needgems = 20000 - b;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need " + to_string(needgems) + " gems more to send Super-Broadcast"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}
								}
							}
							else if (str.substr(0, 7) == "/achat ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`4Admin CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 888 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}






							else if (str.substr(0, 7) == "/vchat ") {
								if (((PlayerInfo*)(peer->data))->adminLevel > 554 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5VIP CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 555 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}

							else if (str.substr(0, 7) == "/lchat ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`6Admin CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}




							else if (str.substr(0, 7) == "/ochat ")      {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`9Server-Creator CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel > 1000)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}



							/*else if (str.substr(0, 7) == "/d ") {
							if (((PlayerInfo*)(peer->data))->adminLevel == 1111 || ((PlayerInfo*)(peer->data))->rawName == "admin") {
								using namespace std::chrono;

								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`ejar CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "admin") {
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);

										//enet_host_flush(server);
									}
								}

								delete p.data;
							}
							}
							*/
							else if (str.substr(0, 7) == "/  ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 666 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5MOD CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}



							else if (str.substr(0, 3) == "/g ") {

								if (((PlayerInfo*)(peer->data))->joinguild == true) {

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5GUILD CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);


										}
									}

									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^You must join a Guild or create one to use this command."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

							}

































							else if (str.substr(0, 7) == "/nchat ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 333 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5Ninja CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 333 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Ninja `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}

















							else if (str.substr(0, 7) == "/kchat ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 444 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5King CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 444 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9King `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}
















							else if (str.substr(0, 7) == "/pchat ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 666 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`9Premium CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 666 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Premium `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}








							}
							else if (str.substr(0, 6) == "/radio") {
								GamePacket p;
								if (((PlayerInfo*)(peer->data))->radio) {
									p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You won't see broadcasts anymore."));
									((PlayerInfo*)(peer->data))->radio = false;
								}
								else {
									p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You will now see broadcasts again."));
									((PlayerInfo*)(peer->data))->radio = true;
								}


								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);


								enet_peer_send(peer, 0, packet);
								delete p.data;
								//enet_host_flush(server);
							}
							else if (str == "/restart") {

								if (restartForUpdate)
								{
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								cout << "[DEBUG] /Reset have been used by " << ((PlayerInfo*)(peer->data))->displayName << endl;
								cout << " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n " << endl;
								GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "Restarting soon!"), "audio/mp3/suspended.mp3"), 0));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									enet_peer_send(currentPeer, 0, packet);
								}
								delete p.data;
								//enet_host_flush(server);

								restartForUpdate = true;
								//RestartForUpdate();

							}

							else if (str == "/delete") {

								if (restartForUpdate)
								{
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								cout << "[DEBUG] /Reset have been used by " << ((PlayerInfo*)(peer->data))->displayName << endl;
								cout << " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n " << endl;
								GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "Deleting Server!!! Bye :) im gonna miss u guys  - Chandra -"), "audio/mp3/suspended.mp3"), 0));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									enet_peer_send(currentPeer, 0, packet);
								}
								delete p.data;
								//enet_host_flush(server);

								restartForUpdate = true;
								//RestartForUpdate();

							}

							/*else if (str.substr(0, 7) == "/clear "){
							if (!canClear(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass)) continue;
							cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
							WorldInfo* wrld = getPlyersWorld(peer);
							string wName = str.substr(4, cch.length() - 4 - 1);
							for (auto & c : wName) c = toupper(c);
							for (int i = 0; i < worlds.size(); i++)
							{
							if (wrld == NULL) continue;
							if (wName == wrld->name)
							{
							worlds.at(i) = generateWorld(wrld->name, wrld->width, wrld->height);
							ENetPeer * currentPeer;
							for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
							{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
							if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
							{
							sendWorld(currentPeer, &worlds.at(i));


							int x = 3040;
							int y = 736;


							for (int j = 0; j < worlds.at(i).width*worlds.at(i).height; j++)
							{
							if (worlds.at(i).items[j].foreground == 6) {
							x = (j%worlds.at(i).width) * 32;
							y = (j / worlds.at(i).width) * 32;
							}
							}
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
							//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
							ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);

							enet_host_flush(server);
							delete p.data;
							((PlayerInfo*)(currentPeer->data))->netID = cId;
							onPeerConnect(currentPeer);
							cId++;


							sendInventory(((PlayerInfo*)(event.peer->data))->inventory);
							}


							}
							enet_host_flush(server);
							}
							}
							}*/
							else if (str.substr(0, 15) == "/sseditworldbg ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Server-Creator `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {
									if (((PlayerInfo*)(peer->data))->rawName == "jar" || ((PlayerInfo*)(peer->data))->rawName == "fast" || ((PlayerInfo*)(peer->data))->rawName == "chandra")
									{
										string editforeg = str.substr(15, cch.length() - 15 - 1);


										int editforegint = atoi(editforeg.c_str());
										if (editforegint == 0 || editforegint > 0 && editforegint < 7000) {



											vector<WorldInfo> worlds;


											cout << "[DEBUG] World Background Edited By " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
											cout << " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n " << endl;
											WorldInfo* wrld = getPlyersWorld(peer);



											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												//if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
												//{
												string act = ((PlayerInfo*)(peer->data))->currentWorld;
												//WorldInfo info = worldDB.get(act);
												// sendWorld(currentPeer, &info);
												int x = 3040;
												int y = 736;



												for (int i = 0; i < world->width * world->height; i++)
												{
													if (world->items[i].foreground == 6) {
														//world->items[i].foreground =0;
													}
													else if (world->items[i].foreground == 8 || world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188 || world->items[i].foreground == 4802 || world->items[i].foreground == 5260 || world->items[i].foreground == 2950 || world->items[i].foreground == 5980 || world->items[i].foreground == 8470) {

													}
													else {
														world->items[i].background = editforegint;

													}



													//}
												}


												//ENetPeer* currentPeer;


												bool found = false;


												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;

													if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used edit mod on world`0! `6No abuse, please. `#] `oSupported item ids: 0-7000"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														sendPlayerToWorld(currentPeer, (PlayerInfo*)(peer->data), ((PlayerInfo*)(peer->data))->currentWorld);
													}


												}
											}
										}
									}
								}
							}

							else if (str.substr(0, 16) == "/superclearworld") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used clear mod on world`0! `6No abuse, please. `#]"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int x = 3040;
									int y = 736;





									vector<WorldInfo> worlds;

									cout << "World /superclearworld cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
									cout << " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n " << endl;
									WorldInfo* wrld = getPlyersWorld(peer);

									PlayerMoving data2;
									data2.packetType = 0x3;
									data2.characterState = 0x0; // animation
									data2.x = 3040;
									data2.y = 736;
									data2.punchX = 0;
									data2.punchY = 0;
									data2.XSpeed = 0;
									data2.YSpeed = 0;
									data2.netID = ((PlayerInfo*)(peer->data))->netID;
									data2.plantingTree = 0;

									PlayerMoving data;
									data.packetType = 0x3;
									data.characterState = 0x0; // animation
									data.x = 3040;
									data.y = 736;
									data.punchX = 0;
									data.punchY = 0;
									data.XSpeed = 0;
									data.YSpeed = 0;
									data.netID = ((PlayerInfo*)(peer->data))->netID;
									data.plantingTree = 6864;

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
										{


											for (int i = 0; i < world->width * world->height; i++)
											{
												//sendTileUpdate(i, i, 758, ((PlayerInfo*)(peer->data))->netID, peer);

												if (world->items[i].foreground == 6) {
													//world->items[i].foreground =0;
												}
												else if (world->items[i].foreground == 8 || world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188 || world->items[i].foreground == 4802 || world->items[i].foreground == 5260 || world->items[i].foreground == 2950 || world->items[i].foreground == 5980 || world->items[i].foreground == 8470) {

												}
												else {
													world->items[i].foreground = 0;
													world->items[i].background = 0;

													data.x = (i % world->width) * 32;
													data.y = (i / world->width) * 32;
													data2.x = (i % world->width) * 32;
													data2.y = (i / world->width) * 32;
													data.punchX = (i % world->width) * 1;
													data.punchY = (i / world->width) * 1;
													data2.punchX = (i % world->width) * 1;
													data2.punchY = (i / world->width) * 1;


													if (isHere(peer, currentPeer)) {
														SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														SendPacketRaw(4, packPlayerMoving(&data2), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
													}

												}
											}
										}
									}
								}
							}




							else if (str.substr(0, 6) == "/clear") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 999 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									WorldInfo* wrld = getPlyersWorld(peer);

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
										{
											string act = ((PlayerInfo*)(peer->data))->currentWorld;
											//WorldInfo info = worldDB.get(act);
											// sendWorld(currentPeer, &info);
											int x = 3040;
											int y = 736;



											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 6) {
													//world->items[i].foreground =0;
												}
												else if (world->items[i].foreground == 8) {

												}
												else if (world->items[i].foreground == 8 || world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188 || world->items[i].foreground == 4802 || world->items[i].foreground == 5260 || world->items[i].foreground == 2950 || world->items[i].foreground == 5980 || world->items[i].foreground == 8470) {

												}
												else {
													world->items[i].foreground = 0;
													world->items[i].background = 0;
												}
											}

											sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
											joinWorld(currentPeer, act, 0, 0);

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^World Cleared!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;





										}

									}
								}
							}
							else if (str == "/spl") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									WorldInfo* wrld = getPlyersWorld(peer);

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
										{
											world->isEvent = true;
											string act = ((PlayerInfo*)(peer->data))->currentWorld;
											//WorldInfo info = worldDB.get(act);
											// sendWorld(currentPeer, &info);
											int x = 3040;
											int y = 736;



											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 0) {
													world->items[i].foreground = 1000;
												}
											}

											sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
											joinWorld(currentPeer, act, 0, 0);





										}

									}
								}
							}
							else if (str == "/rpl") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->rawName == "chandra") {

									WorldInfo* wrld = getPlyersWorld(peer);

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
										{
											string act = ((PlayerInfo*)(peer->data))->currentWorld;
											//WorldInfo info = worldDB.get(act);
											// sendWorld(currentPeer, &info);
											int x = 3040;
											int y = 736;



											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 1000) {
													world->items[i].foreground = 0;
												}
											}

											sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
											joinWorld(currentPeer, act, 0, 0);





										}

									}
								}
							}
							else if (str == "/unghost")
							{



								if (world->name == "HELL") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^This World Is Too `bCursed `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}

								if (world->name == "JUMPS") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^This World Is Too `9Special `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
								((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
								((PlayerInfo*)(peer->data))->isModState = false;
								((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
								sendState(peer);
								sendClothes(peer);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^Moderator Mode `4Disabled`^!``"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
								}
								string text = "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);
								enet_peer_send(peer, 0, packet2);
								delete p.data;
								delete data;
								/*PlayerMoving data;
								data.packetType = 0x14;
								data.characterState = 0x0; // animation
								data.x = 1000;
								data.y = 1;
								data.punchX = 0;
								data.punchY = 0;
								data.XSpeed = 300;
								data.YSpeed = 600;
								data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.plantingTree = 0x0;
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);*/
							}
							/*else if (str == "/clearworld")
							{
							cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;

							int x = 3040;
							int y = 736;
							generateWorld("CLEARZ", x, y);


							enet_host_flush;

							}
							else if (str == "/alt") {
								GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBetaMode"), 1));
								ENetPacket * packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								//enet_host_flush(server);
							}*/



							/*
								else if (str == "/inventory")
								{
									sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
								}

								else if (str.substr(0, 6) == "/item ")
									{

										PlayerInventory inventory;
										InventoryItem item;
										int proitem = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
										if (proitem == 1874 || proitem == 1876 || proitem == 1986 || proitem == 2970 || proitem == 1780 || proitem == 1782 || proitem == 1784 || proitem == 7734 || proitem == 5026)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wThe `9Legendary Wizard`w has invited you to come to `2LEGEND`w!``|left|1790|\n\nadd_spacer|small|\nadd_label_with_icon|small|set_default_color|`o\n\nadd_label_with_icon|big|`wThe `4Ring Master`w has invited you to come to `2CARNIVAL`w!``|left|1900|\n\nadd_spacer|small|\nadd_label_with_icon|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											//enet_host_flush(server);
											delete p.data;
										}

										else {
											string id = (str.substr(6, cch.length() - 6 - 1).c_str());
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Item `w" + id + "`o has been `2added `oto your inventory."));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;

											size_t invsize = 30;
											if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {
												PlayerInventory inventory;
												InventoryItem item;
												item.itemID = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
												item.itemCount = 200;
												inventory.items.push_back(item);
												item.itemCount = 1;
												item.itemID = 18;
												inventory.items.push_back(item);
												item.itemID = 32;
												inventory.items.push_back(item);
												((PlayerInfo*)(peer->data))->inventory = inventory;
											}
											else {
												InventoryItem item;
												item.itemID = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
												item.itemCount = 200;
												((PlayerInfo*)(peer->data))->inventory.items.push_back(item);
											}
											sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
										}
									}
									else
										if (str.substr(0, 9) == "/cleaninv")
										{
											PlayerInventory inventory;
											InventoryItem item;
											item.itemID = ((PlayerInfo*)(peer->data))->invitem1;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem2;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem3;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem4;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem5;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem6;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem7;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem8;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem9;
											item.itemCount = 200;
											inventory.items.push_back(item);


											item.itemCount = 1;
											item.itemID = 18;
											inventory.items.push_back(item);
											item.itemID = 32;
											inventory.items.push_back(item);
											sendInventory(peer, inventory);

										}
										*/
							else if (str.substr(0, 6) == "/team ")
							{
								int val = 0;
								val = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
								PlayerMoving data;
								//data.packetType = 0x14;
								data.packetType = 0x1B;
								//data.characterState = 0x924; // animation
								data.characterState = 0x0; // animation
								data.x = 0;
								data.y = 0;
								data.punchX = val;
								data.punchY = 0;
								data.XSpeed = 0;
								data.YSpeed = 0;
								data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.plantingTree = 0;
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);


							}

							if (str.substr(0, 7) == "/color ")
							{
								((PlayerInfo*)(peer->data))->skinColor = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
								sendClothes(peer);
							}
							if (str.substr(0, 4) == "/who")
							{
								sendWho(peer);


							}

						}

						if (!((PlayerInfo*)(event.peer->data))->isIn)
						{
							/*std::ifstream ifs("hash.txt");
							std::string contentha((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));

							int serverhash = std::atoi(contentha.c_str());
							cout << "client connected successfuly, server hash: " + serverhash;*/
							// current hash: 92642518053
							if (itemdathash == 0) {
								enet_peer_disconnect_later(peer, 0);
							}
							GamePacket p = packetEnd(appendString(appendString(appendString(appendString(appendInt(appendString(createPacket(), "OnSuperMainStartAcceptLogonHrdxs47254722215a"), itemdathash), "51.178.53.125"), "growtopia/cache/"), "cc.cz.madkite.freedom org.aqua.gg idv.aqua.bulldog com.cih.gamecih2 com.cih.gamecih com.cih.game_cih cn.maocai.gamekiller com.gmd.speedtime org.dax.attack com.x0.strai.frep com.x0.strai.free org.cheatengine.cegui org.sbtools.gamehack com.skgames.traffikrider org.sbtoods.gamehaca com.skype.ralder org.cheatengine.cegui.xx.multi1458919170111 com.prohiro.macro me.autotouch.autotouch com.cygery.repetitouch.free com.cygery.repetitouch.pro com.proziro.zacro com.slash.gamebuster"), "proto=42|choosemusic=audio/mp3/about_theme.mp3|active_holiday=0|"));
							//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							//enet_host_flush(server);
							delete p.data;
							std::stringstream ss(GetTextPointerFromPacket(event.packet));
							std::string to;
							while (std::getline(ss, to, '\n')) {
								string id = to.substr(0, to.find("|"));
								string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
								if (id == "tankIDName")
								{
									((PlayerInfo*)(event.peer->data))->tankIDName = act;
									((PlayerInfo*)(event.peer->data))->haveGrowId = true;
								}
								else if (id == "tankIDPass")
								{
									((PlayerInfo*)(event.peer->data))->tankIDPass = act;
								}
								else if (id == "requestedName")
								{
									((PlayerInfo*)(event.peer->data))->requestedName = act;
								}
								else if (id == "country")
								{
									//((PlayerInfo*)(event.peer->data))->country = act;
								}
								else if (id == "game_version") {
									((PlayerInfo*)(event.peer->data))->gameversion = act;
								}
								else if (id == "rid") {
									((PlayerInfo*)(event.peer->data))->rid = act;
									if (std::experimental::filesystem::exists("bans/rid/" + act + ".txt")) {
										((PlayerInfo*)(peer->data))->evadeRID = true;
									}
									if (act.length() < 32) autoBan(peer, true, 1);
									if (act.length() > 36) autoBan(peer, true, 1);

								}
								else if (id == "wk") {
									bool valid = true;
									if (act.substr(0, 4) == "NONE" || act.substr(1, 4) == "NONE" || act.substr(3, 4) == "NONE") valid = false;
									if (valid) {
										((PlayerInfo*)(event.peer->data))->sid = act;
										if (act.length() < 32) autoBan(peer, true, 1);
										if (act.length() > 36) autoBan(peer, true, 1);
									}

								}
								else if (id == "zf") {
									if (act.length() < 4) autoBan(peer, true, 1);
									((PlayerInfo*)(event.peer->data))->zf = act;
								}
								else if (id == "meta")
								{

									((PlayerInfo*)(event.peer->data))->metaip = act;
								}
								else if (id == "hash2") {
									if (act.length() != 0) {
										if (act.length() < 6) autoBan(peer, true, 1);
										if (act.length() > 16) autoBan(peer, true, 1);
									}
								}
								else if (id == "platformID") {
									if (act.length() == 0) autoBan(peer, true, 1);
									((PlayerInfo*)(event.peer->data))->platformID = act;
								}
								else if (id == "player_age")
								{
									((PlayerInfo*)(event.peer->data))->player_age = act;
								}
								else if (id == "fhash")
								{
									((PlayerInfo*)(event.peer->data))->fhash = act;
								}
								else if (id == "mac") {
									((PlayerInfo*)(event.peer->data))->mac = act;
									if (act.length() < 16) autoBan(peer, true, 1);
									if (act.length() > 20) autoBan(peer, true, 1);
								}
								else if (id == "hash") {
									if (act.length() != 0) {
										if (act.length() < 6) autoBan(peer, true, 1);
										if (act.length() > 16) autoBan(peer, true, 1);
									}
								}
								else if (id == "aid")
								{
									((PlayerInfo*)(event.peer->data))->aid = act;
								}
								else if (id == "houstonProductID")
								{
									((PlayerInfo*)(event.peer->data))->hpid = act;
								}
								else if (id == "gid")
								{
									((PlayerInfo*)(event.peer->data))->gid = act;
								}
								else if (id == "vid")
								{
									((PlayerInfo*)(event.peer->data))->vid = act;
								}
								else if (id == "f")
								{
									((PlayerInfo*)(event.peer->data))->f = act;
								}
								else if (id == "fz")
								{
									((PlayerInfo*)(event.peer->data))->fz = act;
								}
								else if (id == "lmode")
								{
									((PlayerInfo*)(event.peer->data))->lmode = act;
								}
								else if (id == "user")
								{
									((PlayerInfo*)(event.peer->data))->user = act;
								}
								else if (id == "token")
								{
									((PlayerInfo*)(event.peer->data))->token = act;
								}
								else if (id == "GDPR")
								{
									((PlayerInfo*)(event.peer->data))->gdpr = act;
								}
								else if (id == "deviceVersion")
								{
									((PlayerInfo*)(event.peer->data))->deviceversion = act;
								}


							}
							if (((PlayerInfo*)(event.peer->data))->rid == "" || ((PlayerInfo*)(event.peer->data))->player_age == "")
							{
								enet_peer_disconnect_now(peer, 0);
							}

							if (!((PlayerInfo*)(event.peer->data))->haveGrowId)
							{
								((PlayerInfo*)(event.peer->data))->rawName = "" + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
								((PlayerInfo*)(event.peer->data))->haveGuestId = true;
								((PlayerInfo*)(event.peer->data))->msgName = std::to_string(event.peer->address.host);
								((PlayerInfo*)(event.peer->data))->displayName = "" + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
								((PlayerInfo*)(event.peer->data))->tankIDName = "" + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
								((PlayerInfo*)(event.peer->data))->displayNamebackup = ((PlayerInfo*)(event.peer->data))->displayName;
							}
							else {
								((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
								((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
#ifdef REGISTRATION
								int logStatus = PlayerDB::playerLogin(peer, ((PlayerInfo*)(event.peer->data))->rawName, ((PlayerInfo*)(event.peer->data))->tankIDPass);
								if (logStatus == -5) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `@Your connection have been cancelled!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									enet_peer_disconnect_later(peer, 0);
								}
								if (logStatus == -4) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `4Your account have been locked for security reasons, If you believe its an mistake please contact Jar and Chandra"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									enet_peer_disconnect_later(peer, 0);
								}
								if (logStatus == -3) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Sorry, this account (`5" + ((PlayerInfo*)(event.peer->data))->rawName + "`4) has been suspended.If you have a question contact `5Chandra and Jar`4!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_peer_disconnect_later(peer, 0);
								}
								else if (logStatus == 1) {

									//((PlayerInfo*)(peer->data))->adminLevel = 999;

									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (iffff.fail()) {
										iffff.close();


									}
									if (iffff.is_open()) {
									}
									json j;
									iffff >> j; //load

									((PlayerInfo*)(peer->data))->adminLevel = j["adminLevel"];




									bool arrestartedmn;
									ifstream fdarest("restartedmaintenance.txt");
									fdarest >> arrestartedmn;
									fdarest.close();


									bool ar;
									ifstream fdar("maintenance/maintenance.txt");
									fdar >> ar;
									fdar.close();



									if (ar && ((PlayerInfo*)(peer->data))->adminLevel < 1000)
									{

										string text = "action|log\nmsg|`5The Server has Been Deleted by `oChandra `5i'll miss u guys :)\n";
										string text3 = "action|logon_fail\n";
										string dc = "https://discord.gg/yZ2kwUb";
										string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


										BYTE* data = new BYTE[5 + text.length()];
										BYTE* data3 = new BYTE[5 + text3.length()];
										BYTE* dataurl = new BYTE[5 + url.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										memcpy(dataurl, &type, 4);
										memcpy(dataurl + 4, url.c_str(), url.length());
										memcpy(dataurl + 4 + url.length(), &zero, 1);

										memcpy(data3, &type, 4);
										memcpy(data3 + 4, text3.c_str(), text3.length());
										memcpy(data3 + 4 + text3.length(), &zero, 1);

										ENetPacket* p = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p);
										ENetPacket* p3 = enet_packet_create(dataurl,
											5 + url.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p3);
										ENetPacket* p2 = enet_packet_create(data3,
											5 + text3.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p2);

										delete data;
										delete dataurl;
										delete data3;

										break;
									}



									if (arrestartedmn)
									{

										string text = "action|log\nmsg|`5The game is currently undergoing maintenance. We will be back in few minutes.\n";
										string text3 = "action|logon_fail\n";
										string dc = "https://discord.gg/yZ2kwUb";
										string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


										BYTE* data = new BYTE[5 + text.length()];
										BYTE* data3 = new BYTE[5 + text3.length()];
										BYTE* dataurl = new BYTE[5 + url.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										memcpy(dataurl, &type, 4);
										memcpy(dataurl + 4, url.c_str(), url.length());
										memcpy(dataurl + 4 + url.length(), &zero, 1);

										memcpy(data3, &type, 4);
										memcpy(data3 + 4, text3.c_str(), text3.length());
										memcpy(data3 + 4 + text3.length(), &zero, 1);

										ENetPacket* p = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p);
										ENetPacket* p3 = enet_packet_create(dataurl,
											5 + url.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p3);
										ENetPacket* p2 = enet_packet_create(data3,
											5 + text3.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p2);

										delete data;
										delete dataurl;
										delete data3;

										break;
									}


									/*	int isInVectorAlreadyAdmin = 0;

										if (((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 555 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
										{

											for (int i = 0; i < admins.size(); i++) {
												Admin admin = admins[i];
												if (admin.username == ((PlayerInfo*)(peer->data))->rawName && admin.password == ((PlayerInfo*)(peer->data))->tankIDPass) {
													isInVectorAlreadyAdmin++;
												}
											}

											if (isInVectorAlreadyAdmin == 0)
											{
												addAdmin(((PlayerInfo*)(peer->data))->rawName, ((PlayerInfo*)(peer->data))->tankIDPass, ((PlayerInfo*)(event.peer->data))->adminLevel);
											}

										}*/

									short invsize = 0;
									ifstream invfd("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									invfd >> invsize;
									invfd.close();

									((PlayerInfo*)(peer->data))->currentInventorySize = invsize;



									int level = ((PlayerInfo*)(peer->data))->level;
									((PlayerInfo*)(event.peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName;
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`4SC`w]`c" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "[`5SC`w]`o" + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
										((PlayerInfo*)(event.peer->data))->displayName = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
										((PlayerInfo*)(event.peer->data))->displayName = "`c@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`c@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
										((PlayerInfo*)(event.peer->data))->displayName = "`o@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`o@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
										((PlayerInfo*)(event.peer->data))->displayName = "`#@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`#@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`1VIP`w]" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`1VIP`w]" + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									/*else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`eKing`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`eKing`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`bNinja`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`bNinja`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`@Samurai`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`@Samurai`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`1Warrior`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`1Warrior`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}*/
									else if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
										((PlayerInfo*)(event.peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = ((PlayerInfo*)(event.peer->data))->tankIDName;
									}


								}
								else {
									string text = "action|log\nmsg|`4GrowID or password is wrong!`7 Incase you want to recover your account, contact Jar and Chandra!";
									string text3 = "action|logon_fail\n";
									string dc = "https://discord.gg/yZ2kwUb";
									string url = "action|set_url\nurl|" + dc + "\nlabel|Join KortexPS Discord\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE* data3 = new BYTE[5 + text3.length()];
									BYTE* dataurl = new BYTE[5 + url.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									memcpy(dataurl, &type, 4);
									memcpy(dataurl + 4, url.c_str(), url.length());
									memcpy(dataurl + 4 + url.length(), &zero, 1);

									memcpy(data3, &type, 4);
									memcpy(data3 + 4, text3.c_str(), text3.length());
									memcpy(data3 + 4 + text3.length(), &zero, 1);

									ENetPacket* p = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p);
									ENetPacket* p3 = enet_packet_create(dataurl,
										5 + url.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p3);
									ENetPacket* p2 = enet_packet_create(data3,
										5 + text3.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p2);
									enet_peer_disconnect_later(peer, 0);
									delete data;
									delete dataurl;
									delete data3;
									enet_peer_disconnect_later(peer, 0);
									//cout << "[KXPS] Uzfiksuotas nepavikes loginas!" << endl;
									//cout << "GrowID: " + ((PlayerInfo*)(peer->data))->tankIDName << endl;
									//cout << "Password: " + ((PlayerInfo*)(peer->data))->tankIDPass << endl;										
									ofstream wuplog("wuplog.txt", std::ios_base::app);
									wuplog << "GROWID: " << ((PlayerInfo*)(peer->data))->tankIDName << " PASSWORD: " << ((PlayerInfo*)(peer->data))->tankIDPass << " !" << endl;
									wuplog.close();
									continue;
									break;
								}
#else

								((PlayerInfo*)(event.peer->data))->displayName = PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->tankIDName.substr(0, ((PlayerInfo*)(event.peer->data))->tankIDName.length() > 18 ? 18 : ((PlayerInfo*)(event.peer->data))->tankIDName.length()));
								if (((PlayerInfo*)(event.peer->data))->displayName.length() < 3) ((PlayerInfo*)(event.peer->data))->displayName = "Person that doesn't know how the name looks!";
#endif
							}
							for (char c : ((PlayerInfo*)(event.peer->data))->displayName) if (c < 0x20 || c>0x7A) ((PlayerInfo*)(event.peer->data))->displayName = "Bad characters in name, remove them!";

							if (((PlayerInfo*)(event.peer->data))->country.length() > 4)
							{
								((PlayerInfo*)(event.peer->data))->country = "us";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(event.peer->data))->country = "rtsoft";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(event.peer->data))->country = "rtsoft";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(event.peer->data))->country = "atomic_button";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 666)
							{
								((PlayerInfo*)(event.peer->data))->country = "atomic_button";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(event.peer->data))->country = "star";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(event.peer->data))->country = "legendary";
							}
							/*GamePacket p3= packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|4278190335\nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
							//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
							ENetPacket * packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);
							enet_host_flush(server);*/


							GamePacket p2 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), ((PlayerInfo*)(event.peer->data))->haveGrowId), ((PlayerInfo*)(peer->data))->tankIDName), ((PlayerInfo*)(peer->data))->tankIDPass));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet2);
							delete p2.data;



						}
						string pStr = GetTextPointerFromPacket(event.packet);
						//if (strcmp(GetTextPointerFromPacket(event.packet), "action|enter_game\n") == 0 && !((PlayerInfo*)(event.peer->data))->isIn)
						if (pStr.substr(0, 17) == "action|enter_game" && !((PlayerInfo*)(event.peer->data))->isIn)
						{
#ifdef TOTAL_LOG
							cout << "And we are in!" << endl;
#endif
							ENetPeer* currentPeer;
							if (((PlayerInfo*)(event.peer->data))->rawName == "")
							{
								enet_peer_disconnect_now(event.peer, 0);
							}
							else
							{
								((PlayerInfo*)(event.peer->data))->isIn = true;
							}

							if (std::experimental::filesystem::exists("cursedplayers/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
							{
								((PlayerInfo*)(peer->data))->isCursed = true;
							}

							if (std::experimental::filesystem::exists("mutedplayers/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
							{
								((PlayerInfo*)(peer->data))->taped = true;
								((PlayerInfo*)(peer->data))->isDuctaped = true;
								((PlayerInfo*)(peer->data))->cantsay = true;
							}
							/*for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
							{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;


							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player `o" + ((PlayerInfo*)(event.peer->data))->tankIDName + "`o just entered the game..."));
							ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);

							enet_host_flush(server);
							delete p.data;
							}*/
							if (((PlayerInfo*)(peer->data))->haveGrowId) {
								sendWorldOffers(peer);
							}
							int counts = 0;

							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								counts++;
							}
							if (((PlayerInfo*)(peer->data))->haveGrowId) {


								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"));
								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet7);
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket pp = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Server Made By `4Chandra`w `5& `4Jar"));
								ENetPacket* packetp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packetp);
								delete pp.data;
								GamePacket pps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Server `cCoded `1By `2Haruko + chandra"));
								ENetPacket* packetps = enet_packet_create(pps.data,
									pps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packetps);
								delete pps.data;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWelcome back In The `4KXPS, `6" + name + "`o. `6[`wThere are `2" + to_string(counts) + " `wplayers online! Help add`1]"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), news));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete p3.data;
								GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Connecting.... `1[`4GT`wID`b S2`1] `w(c)`2Chandra `w& `2Chandra`w!!"));
								ENetPacket* packeto = enet_packet_create(po.data,
									po.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete po.data;
								GamePacket p2ssw = packetEnd(appendString(appendInt(appendString(createPacket(), "OnEmoticonDataChanged"), 201560520), "(wl)|Ä|1&(yes)|Ä‚|1&(no)|Äƒ|1&(love)|Ä„|1&(oops)|Ä…|1&(shy)|Ä†|1&(wink)|Ä‡|1&(tongue)|Äˆ|1&(agree)|Ä‰|1&(sleep)|ÄŠ|1&(punch)|Ä‹|1&(music)|ÄŒ|1&(build)|Ä|1&(megaphone)|ÄŽ|1&(sigh)|Ä|1&(mad)|Ä|1&(wow)|Ä‘|1&(dance)|Ä’|1&(see-no-evil)|Ä“|1&(bheart)|Ä”|1&(heart)|Ä•|1&(grow)|Ä–|1&(gems)|Ä—|1&(kiss)|Ä˜|1&(gtoken)|Ä™|1&(lol)|Äš|1&(smile)|Ä€|1&(cool)|Äœ|1&(cry)|Ä|1&(vend)|Äž|1&(bunny)|Ä›|1&(cactus)|ÄŸ|1&(pine)|Ä¤|1&(peace)|Ä£|1&(terror)|Ä¡|1&(troll)|Ä¢|1&(evil)|Ä¢|1&(fireworks)|Ä¦|1&(football)|Ä¥|1&(alien)|Ä§|1&(party)|Ä¨|1&(pizza)|Ä©|1&(clap)|Äª|1&(song)|Ä«|1&(ghost)|Ä¬|1&(nuke)|Ä­|1&(halo)|Ä®|1&(turkey)|Ä¯|1&(gift)|Ä°|1&(cake)|Ä±|1&(heartarrow)|Ä²|1&(lucky)|Ä³|1&(shamrock)|Ä´|1&(grin)|Äµ|1&(ill)|Ä¶|1&"));


								ENetPacket* packet2ssw = enet_packet_create(p2ssw.data,
									p2ssw.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2ssw);
								delete p2ssw.data;

								//enet_host_flush(server);

								std::ifstream ifff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {


								}
								json j;
								ifff >> j; //load

								if (j["items"][0]["itemid"] != 18 || j["items"][1]["itemid"] != 32)
								{
									j["items"][0]["itemid"] = 18;
									j["items"][1]["itemid"] = 32;

									j["items"][0]["quantity"] = 1;
									j["items"][1]["quantity"] = 1;

									std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									oo << j << std::endl;
									//cout << "zaidejas " << ((PlayerInfo*)(peer->data))->rawName << " prisijunkdamas turejo inventoriuje pirmus 2 elementus ne ranka arba ne wrench." << endl;
								}

								PlayerInventory inventory;
								{
									InventoryItem item;

									for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
									{
										int itemid = j["items"][i]["itemid"];
										int quantity = j["items"][i]["quantity"];
										if (itemid != 0 && quantity != 0)
										{
											item.itemCount = quantity;
											item.itemID = itemid;
											inventory.items.push_back(item);
											sendInventory(peer, inventory);
										}

									}
								}
								((PlayerInfo*)(event.peer->data))->inventory = inventory;
							}
							else {
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

								}
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wRegistration Agreement``|left|6128|small|\n\nadd_spacer|\nadd_label_with_icon|small|`wUsing any hack clients that can harm the server is not allowed! And will result in a IP SHARE & PERMANENT BAN! All ranks, gems are not refundable!|left|828|\n\nadd_spacer|\nadd_button|sutikimas|`2Accept|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								enet_host_flush(server);
								delete p.data;
							}

							if (((PlayerInfo*)(peer->data))->haveGrowId) {

								PlayerInfo* p = ((PlayerInfo*)(peer->data));
								std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
								json j;
								ifff >> j;

								//p->currentWorld = worldInfo->name;



								vector <string>frns;
								if (j.count("friends") == 1) {
									for (int i = 0; i < j["friends"].size(); i++) {
										frns.push_back(j["friends"][i]);
									}
								}
								else {
									frns = {};
								}

								((PlayerInfo*)(peer->data))->effect = j["effect"];


								p->friendinfo = frns;
								ifff.close();
							}
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								string name = ((PlayerInfo*)(currentPeer->data))->rawName;
								if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `2logged on`o."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
								}
								/*if (((PlayerInfo*)(currentPeer->data))->adminLevel != 10) {
									string name = ((PlayerInfo*)(currentPeer->data))->displayName;
									int level = ((PlayerInfo*)(currentPeer->data))->adminLevel;
									string role = "";
									if (level > 776) {
										if (level == 777) {
											role = "A `sGod`w";
										}
										if (level == 888) {
											role = "A `cDivine`w";
										}
										if (level == 999) {
											role = "An `4Admin`w";
										}
										if (level == 1000) {
											role = "`oOur Beloved `5Server Creator`w";
										}
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3LOGS ALERT: `o" + role + " (" + name + " ) `ohas `2logged on`o."));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);
									}
									else
									{
									}
								}*/
							}
							{
								PlayerInfo* pData = ((PlayerInfo*)(peer->data));
								//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wThe Growtopia Gazette``|left|5016|\n\nadd_spacer|small|\n\nadd_image_button|banner|interface/large/news_banner.rttex|noflags|||\n\nadd_spacer|small|\n\nadd_textbox|`wSeptember 10:`` `5Surgery Stars end!``|left|\n\nadd_spacer|small|\n\n\n\nadd_textbox|Hello Growtopians,|left|\n\nadd_spacer|small|\n\n\n\nadd_textbox|Surgery Stars is over! We hope you enjoyed it and claimed all your well-earned Summer Tokens!|left|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\nadd_textbox|As we announced earlier, this month we are releasing the feature update a bit later, as we're working on something really cool for the monthly update and we're convinced that the wait will be worth it!|left|\n\nadd_spacer|small|\n\nadd_textbox|Check the Forum here for more information!|left|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wSeptember Updates Delay``|noflags|https://www.growtopiagame.com/forums/showthread.php?510657-September-Update-Delay&p=3747656|Open September Update Delay Announcement?|0|0|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\nadd_textbox|Also, we're glad to invite you to take part in our official Growtopia survey!|left|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wTake Survey!``|noflags|https://ubisoft.ca1.qualtrics.com/jfe/form/SV_1UrCEhjMO7TKXpr?GID=26674|Open the browser to take the survey?|0|0|\n\nadd_spacer|small|\n\nadd_textbox|Click on the button above and complete the survey to contribute your opinion to the game and make Growtopia even better! Thanks in advance for taking the time, we're looking forward to reading your feedback!|left|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\nadd_textbox|And for those who missed PAW, we made a special video sneak peek from the latest PAW fashion show, check it out on our official YouTube channel! Yay!|left|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wPAW 2018 Fashion Show``|noflags|https://www.youtube.com/watch?v=5i0IcqwD3MI&feature=youtu.be|Open the Growtopia YouTube channel for videos and tutorials?|0|0|\n\nadd_spacer|small|\n\nadd_textbox|Lastly, check out other September updates:|left|\n\nadd_spacer|small|\n\nadd_label_with_icon|small|IOTM: The Sorcerer's Tunic of Mystery|left|24|\n\nadd_label_with_icon|small|New Legendary Summer Clash Branch|left|24|\n\nadd_spacer|small|\n\nadd_textbox|`$- The Growtopia Team``|left|\n\nadd_spacer|small|\n\nadd_spacer|small|\n\n\n\n\n\nadd_url_button|comment|`wOfficial YouTube Channel``|noflags|https://www.youtube.com/c/GrowtopiaOfficial|Open the Growtopia YouTube channel for videos and tutorials?|0|0|\n\nadd_url_button|comment|`wSeptember's IOTM: `8Sorcerer's Tunic of Mystery!````|noflags|https://www.growtopiagame.com/forums/showthread.php?450065-Item-of-the-Month&p=3392991&viewfull=1#post3392991|Open the Growtopia website to see item of the month info?|0|0|\n\nadd_spacer|small|\n\nadd_label_with_icon|small|`4WARNING:`` `5Drop games/trust tests`` and betting games (like `5Casinos``) are not allowed and will result in a ban!|left|24|\n\nadd_label_with_icon|small|`4WARNING:`` Using any kind of `5hacked client``, `5spamming/text pasting``, or `5bots`` (even with an alt) will likely result in losing `5ALL`` your accounts. Seriously.|left|24|\n\nadd_label_with_icon|small|`4WARNING:`` `5NEVER enter your GT password on a website (fake moderator apps, free gemz, etc) - it doesn't work and you'll lose all your stuff!|left|24|\n\nadd_spacer|small|\n\nadd_url_button|comment|`wGrowtopia on Facebook``|noflags|http://growtopiagame.com/facebook|Open the Growtopia Facebook page in your browser?|0|0|\n\nadd_spacer|small|\n\nadd_button|rules|`wHelp - Rules - Privacy Policy``|noflags|0|0|\n\n\nadd_quick_exit|\n\nadd_spacer|small|\nadd_url_button|comment|`wVisit Growtopia Forums``|noflags|http://www.growtopiagame.com/forums|Visit the Growtopia forums?|0|0|\nadd_spacer|small|\nadd_url_button||`wWOTD: `1THELOSTGOLD`` by `#iWasToD````|NOFLAGS|OPENWORLD|THELOSTGOLD|0|0|\nadd_spacer|small|\nadd_url_button||`wVOTW: `1Yodeling Kid - Growtopia Animation``|NOFLAGS|https://www.youtube.com/watch?v=UMoGmnFvc58|Watch 'Yodeling Kid - Growtopia Animation' by HyerS on YouTube?|0|0|\nend_dialog|gazette||OK|"));

							}
						}
						if (strcmp(GetTextPointerFromPacket(event.packet), "action|refresh_item_data\n") == 0)
						{
							if (itemsDat != NULL) {
								ENetPacket* packet = enet_packet_create(itemsDat,
									itemsDatSize + 60,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								((PlayerInfo*)(peer->data))->isUpdating = true;
								enet_peer_disconnect_later(peer, 0);
								//enet_host_flush(server);
							}
							// TODO FIX refresh_item_data ^^^^^^^^^^^^^^
						}
						break;
					}
					default:
						cout << "Unknown packet type " << messageType << endl;
						break;
					case 3:
					{
						//cout << GetTextPointerFromPacket(event.packet) << endl;
						std::stringstream ss(GetTextPointerFromPacket(event.packet));
						std::string to;
						bool isJoinReq = false;
						while (std::getline(ss, to, '\n')) {
							string id = to.substr(0, to.find("|"));
							string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
							if (id == "name" && isJoinReq)
							{
#ifdef TOTAL_LOG
								cout << "Entering some world..." << endl;
#endif
								try {
									if (act.length() > 30) {
										sendConsoleMsg(peer, "`4Sorry, but world names with more than 30 characters are not allowed!");
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									toUpperCase(act);



									if (act == "HELL")
									{
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										((PlayerInfo*)(peer->data))->isModState = false;
										((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
										sendState(peer);
										sendClothes(peer);
									}


									if (act == "JUMPS")
									{
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										((PlayerInfo*)(peer->data))->isModState = false;
										((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
										sendState(peer);
										sendClothes(peer);
									}



									if (act == "SERVER")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel != 1000) {
											((PlayerInfo*)(peer->data))->currentWorld = "START";
											GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `4You can't visit this world!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;*/
											sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), "EXIT");
											//enet_peer_disconnect_now(peer, 0);
										}
									}


									if (act == "CON" || act == "NUL" || act == "PRN" || act == "AUX" || act == "CLOCK$" || act == "COM0" || act == "COM1" || act == "COM2" || act == "COM3" || act == "COM4" || act == "COM5" || act == "COM6" || act == "COM7" || act == "COM8" || act == "COM9" || act == "LPT0" || act == "LPT1" || act == "LPT2" || act == "LPT3" || act == "LPT4" || act == "LPT5" || act == "LPT6" || act == "LPT7" || act == "LPT8" || act == "LPT9")
									{
										enet_peer_disconnect_now(peer, 0);
									}
									else
									{
										/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}*/
										WorldInfo info = worldDB.get(act);
										WorldInfo info2 = worldDB.get("HELL");
										WorldInfo info3 = worldDB.get("START");


										bool existsban = std::experimental::filesystem::exists("worldbans/" + info.name + "/" + ((PlayerInfo*)(peer->data))->rawName);
										if (existsban)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Oh no! ``You've been banned from that world by its owner! Try again later after ban wears off."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;

											GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											delete p3.data;

											continue;
											break;
										}




										if (((PlayerInfo*)(peer->data))->isCursed == true)
										{
											((PlayerInfo*)(peer->data))->currentWorld = "HELL";
											sendWorldCursed(peer, &info2);
											ofstream myfile;

											std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifs)),
												(std::istreambuf_iterator<char>()));


											ofstream myfilet;
											myfilet.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfilet << content;
											myfilet.close();

											int gembuxc = std::atoi(content.c_str());
											GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembuxc));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packet);
											delete p.data;

											((PlayerInfo*)(peer->data))->isInWorld = true;




											int x = 3040;
											int y = 736;


											for (int j = 0; j < info2.width * info2.height; j++)
											{
												if (info2.items[j].foreground == 6) {
													x = (j % info2.width) * 32;
													y = (j / info2.width) * 32;
												}
											}

											if (((PlayerInfo*)(peer->data))->adminLevel >= 666) {
												if (((PlayerInfo*)(peer->data))->isinv == true)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;

												}

												int count = 0;
												ENetPeer* currentPeer;
												string name = "";
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													count++;
												}


												int countx = 0;
												//ENetPeer * currentPeer;
												string namex = "";
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													countx++;
												}


												int otherpeople = 0;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
														otherpeople++;
												}
												int otherpeoples = otherpeople - 1;
												string ownerworld = info.owner;
												string nameworld = info.name;


												string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet7 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet7);

												/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
													((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
													((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
												}*/
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
														if (((PlayerInfo*)(peer->data))->isinv == false)
														{

														}
													enet_peer_send(currentPeer, 0, packet7);

												}
												if (ownerworld != "") {
													GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
													ENetPacket* packet3x = enet_packet_create(p3x.data,
														p3x.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3x);
													delete p3x.data;
													/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
														((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
														((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
													}*/
												}



											}

											else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
											{
												if (((PlayerInfo*)(peer->data))->isinv == true)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|1\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;
												}

											}
											else
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
												//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
												((PlayerInfo*)(event.peer->data))->netID = cId;
												onPeerConnect(peer);
												cId++;
											}


											if (((PlayerInfo*)(peer->data))->haveGrowId == false)
											{
											}
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->haveGrowId == false && ((PlayerInfo*)(peer->data))->haveGuestId == false)
											{
												sendWorld(peer, &info);

												string cworld = act;
												std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

												((PlayerInfo*)(peer->data))->currentWorld = cworld;


												((PlayerInfo*)(peer->data))->isInWorld = true;


											}
											else
											{


												if (act.length() < 16) {

													if (info.nuked)
													{
														if (((PlayerInfo*)(peer->data))->adminLevel < 666)
														{


															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wThis world is inaccessible.``"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;

															GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
															ENetPacket* packet3 = enet_packet_create(p3.data,
																p3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet3);
															delete p3.data;

														}

														else
														{
															{
																std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																std::string content((std::istreambuf_iterator<char>(ifs)),
																	(std::istreambuf_iterator<char>()));

																sendWorld(peer, &info);

																string cworld = act;
																std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

																((PlayerInfo*)(peer->data))->currentWorld = cworld;



																ofstream myfile;
																myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																myfile << content;
																myfile.close();
																int gembux = std::atoi(content.c_str());
																GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembux));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(peer, 0, packet);
																delete p.data;


																((PlayerInfo*)(peer->data))->isInWorld = true;

																int x = 3040;
																int y = 736;


																for (int j = 0; j < info.width * info.height; j++)
																{
																	if (info.items[j].foreground == 6) {
																		x = (j % info.width) * 32;
																		y = (j / info.width) * 32;
																	}
																}

																if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
																	if (((PlayerInfo*)(peer->data))->isinv == true)
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}
																	else
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}
																}

																else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
																{
																	if (((PlayerInfo*)(peer->data))->isinv == true)
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}
																	else
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|1\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}

																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
																	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	//enet_host_flush(server);
																	delete p.data;
																	((PlayerInfo*)(event.peer->data))->netID = cId;
																	onPeerConnect(peer);
																	cId++;


																}


																if (((PlayerInfo*)(peer->data))->haveGrowId == false)
																{
																}

																int countx = 0;
																ENetPeer* currentPeer;
																string namex = "";
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	countx++;
																}


																int otherpeople = 0;

																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer))
																		otherpeople++;
																}
																int otherpeoples = otherpeople - 1;
																string ownerworld = info.owner;
																string nameworld = info.name;



																string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
																BYTE* data = new BYTE[5 + text.length()];
																BYTE zero = 0;
																int type = 3;
																memcpy(data, &type, 4);
																memcpy(data + 4, text.c_str(), text.length());
																memcpy(data + 4 + text.length(), &zero, 1);
																ENetPacket* packet7 = enet_packet_create(data,
																	5 + text.length(),
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet7);

																/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
																	((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																	((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																}*/
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer))
																		if (((PlayerInfo*)(peer->data))->isinv == false)
																		{

																		}
																	enet_peer_send(currentPeer, 0, packet7);

																}
																if (ownerworld != "") {
																	GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
																	ENetPacket* packet3x = enet_packet_create(p3x.data,
																		p3x.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet3x);
																	delete p3x.data;
																	/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
																		((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																		((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																	}*/
																}
															}
														}

													}


													else
													{
														std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifs)),
															(std::istreambuf_iterator<char>()));

														sendWorld(peer, &info);

														string cworld = act;
														std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

														((PlayerInfo*)(peer->data))->currentWorld = cworld;



														ofstream myfile;
														myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile << content;
														myfile.close();
														int gembux = std::atoi(content.c_str());
														GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembux));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet);
														delete p.data;


														((PlayerInfo*)(peer->data))->isInWorld = true;

														int x = 3040;
														int y = 736;


														for (int j = 0; j < info.width * info.height; j++)
														{
															if (info.items[j].foreground == 6) {
																x = (j % info.width) * 32;
																y = (j / info.width) * 32;
															}
														}

														if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
															if (((PlayerInfo*)(peer->data))->isinv == true)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}
														}
														else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
														{
															if (((PlayerInfo*)(peer->data))->isinv == true)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|1\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|1\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}

														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
															//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															//enet_host_flush(server);
															delete p.data;
															((PlayerInfo*)(event.peer->data))->netID = cId;
															onPeerConnect(peer);
															cId++;
														}


														if (((PlayerInfo*)(peer->data))->haveGrowId == false)
														{
														}

														int countx = 0;
														ENetPeer* currentPeer;
														string namex = "";
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															countx++;
														}


														int otherpeople = 0;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
																otherpeople++;
														}




														int otherpeoples = otherpeople - 1;
														string ownerworld = info.Displayowner;
														string nameworld = info.name;
														string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);

														if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {

																if (((PlayerInfo*)(peer->data))->isinv == false) {
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Silently entered world!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;


																}

															}
														}

														if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {

																if (((PlayerInfo*)(peer->data))->isinv == false) {
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Entered World!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;


																}

															}
														}

														if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {

															ENetPacket* packet7 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet7);
															GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));
															ENetPacket* packet6 = enet_packet_create(p6.data,
																p6.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet6);
															delete p6.data;


															GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"), 0));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;


														}

														if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																ENetPeer* currentPeer;
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {
																/*ENetPeer* currentPeer;
																int effect = 92;
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer)) {

																		int x = ((PlayerInfo*)(peer->data))->x;
																		int y = ((PlayerInfo*)(peer->data))->y;
																		GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

																		ENetPacket* packetd = enet_packet_create(psp.data,
																			psp.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(currentPeer, 0, packetd);
																		delete psp.data;
																	}
																}*/
																GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																ENetPacket* packet6 = enet_packet_create(p6.data,
																	p6.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet6);
																delete p6.data;
															}
														}

														if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																ENetPeer* currentPeer;
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {
																/*ENetPeer* currentPeer;
																int effect = 92;
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer)) {

																		int x = ((PlayerInfo*)(peer->data))->x;
																		int y = ((PlayerInfo*)(peer->data))->y;
																		GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

																		ENetPacket* packetd = enet_packet_create(psp.data,
																			psp.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(currentPeer, 0, packetd);
																		delete psp.data;
																	}
																}*/
																GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																ENetPacket* packet6 = enet_packet_create(p6.data,
																	p6.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet6);
																delete p6.data;
															}
														}
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
																if (((PlayerInfo*)(peer->data))->isinv == false)
																{

																}


														}
														if (ownerworld != "") {
															GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
															ENetPacket* packet3x = enet_packet_create(p3x.data,
																p3x.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet3x);
															delete p3x.data;
															/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
																((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
															}*/
														}


													}


												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld name cannot be longer than 15 characters."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													enet_peer_disconnect_now(peer, 0);


													GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3);
													delete p3.data;


													continue;
													//enet_peer_disconnect_later(peer, 0);
												}

											}


										}

										sendState(peer); //here
										sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);





										if (info.allowMod == false && ((PlayerInfo*)(peer->data))->ghostalr == false && info.owner != ((PlayerInfo*)(peer->data))->rawName)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNoclipping `wis disabled in here!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;

											((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
											((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;

											sendClothes(peer);
											sendState(peer); //here
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->isModState == true || ((PlayerInfo*)(peer->data))->ghostalr == true)
											{
												((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
												((PlayerInfo*)(peer->data))->canDoubleJump = true; //here


												//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->puncheffect);
												//sendState(peer); //here

											}
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = false;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
											((PlayerInfo*)(peer->data))->haveHauntedShadows = true;
										}
										/*	if (((PlayerInfo*)(peer->data))->level > 100) {
												((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
												((PlayerInfo*)(peer->data))->isShining = false;
											}*/


										if (info.weather != 0) {
											GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBaseWeather"), info.weather));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


										/*int resx = 95;
										int resy = 23;*/


										/*for (int i = 0; i < world.width*world.height; i++)
										{
										if (world.items[i].foreground == 6) {
										resx = i%world.width;
										resy = i / world.width;
										}
										}


										GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "SetRespawnPos"), resx + (world.width*resy)));
										memcpy(p2.data + 8, &(((PlayerInfo*)(event.peer->data))->netID), 4);
										ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										enet_host_flush(server);*/

										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
									}
								}
								catch (int e) {
									if (e == 1) {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@ You have exited the world."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
									else if (e == 2) {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@ You have entered bad characters in the world name!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
									else if (e == 3) {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@ You can't visit this world!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
									else {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@ I know this menu is magical and all, but it has its limitations! You can't visit this world!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
								}
							}

							if (id == "action")
							{
								if (act == "join_request")
								{
									isJoinReq = true;
								}
								if (act == "quit_to_exit")
								{

									if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
										string act = "START";
										joinWorld(peer, act, 0, 0);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0Make GrowID First!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}

									else if (((PlayerInfo*)(event.peer->data))->canExit)
									{




										string online = "";
										int total = 0;
										ENetPeer* currentPeer;

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0) {
												total++;
											}
										}
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Where would you like to go? (`w" + to_string(total) + " `oonline)"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;

										sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
										sendWorldOffers(peer);


										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
									}
								}

								/*if (act == "quit_to_exit")
								{
									match.playersInGame--;
									((PlayerInfo*)(peer->data))->isInGame = false;
									sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
									((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
									sendWorldOffers(peer);
									Player::PlayAudio(peer, "audio/door_shut.wav", 0);

								}*/
								if (act == "quit")
								{
									if (((PlayerInfo*)(peer->data))->isWaitingForMatch) {
										((PlayerInfo*)(peer->data))->isWaitingForMatch = false;
										match.playersInQueue--;
									}
									if (((PlayerInfo*)(peer->data))->isInGame) {
										((PlayerInfo*)(peer->data))->isInGame = false;
										match.playersInGame--;
									}
									enet_peer_disconnect_later(peer, 0);
								}
							}
						}
						break;
					}
					case 4:
					{
						{
							BYTE* tankUpdatePacket = GetStructPointerFromTankPacket(event.packet);

							if (tankUpdatePacket)
							{
								PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket);

								if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT")
								{

									continue;

								}
								//string cchzzz = GetTextPointerFromPacket(event.packet);



								((PlayerInfo*)(event.peer->data))->posX = (int)pMov->x;
								((PlayerInfo*)(event.peer->data))->posY = (int)pMov->y;

								int posX = ((PlayerInfo*)(event.peer->data))->posX / 32;
								int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;



								if (world->items[posX + (posY * world->width)].foreground == 20 || world->items[posX + (posY * world->width)].foreground == 24 || world->items[posX + (posY * world->width)].foreground == 26 || world->items[posX + (posY * world->width)].foreground == 28 || world->items[posX + (posY * world->width)].foreground == 608 || world->items[posX + (posY * world->width)].foreground == 780 || world->items[posX + (posY * world->width)].foreground == 986 || world->items[posX + (posY * world->width)].foreground == 1426 || world->items[posX + (posY * world->width)].foreground == 1428 || world->items[posX + (posY * world->width)].foreground == 1430 || world->items[posX + (posY * world->width)].foreground == 1432 || world->items[posX + (posY * world->width)].foreground == 1446 || world->items[posX + (posY * world->width)].foreground == 780 || world->items[posX + (posY * world->width)].foreground == 1906 || world->items[posX + (posY * world->width)].foreground == 2396 || world->items[posX + (posY * world->width)].foreground == 2414 || world->items[posX + (posY * world->width)].foreground == 2586 || world->items[posX + (posY * world->width)].foreground == 2948 || world->items[posX + (posY * world->width)].foreground == 3758 || world->items[posX + (posY * world->width)].foreground == 4470 || world->items[posX + (posY * world->width)].foreground == 4488 || world->items[posX + (posY * world->width)].foreground == 5622 || world->items[posX + (posY * world->width)].foreground == 6102 || world->items[posX + (posY * world->width)].foreground == 6272)
								{
									((PlayerInfo*)(event.peer->data))->SignPosX = (int)pMov->x;
									((PlayerInfo*)(event.peer->data))->SignPosY = (int)pMov->y;
									int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
									int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
									string world = ((PlayerInfo*)(peer->data))->currentWorld;
									string posx = std::to_string(yy);
									string posy = std::to_string(xx);
									bool exist = std::experimental::filesystem::exists("signs/" + world + posx + posy + ".txt");

									if (exist)
									{
										WorldInfo* worldInfo = getPlyersWorld(peer);
										int squaresign = yy + (xx * 100);
										std::ifstream ifs("signs/" + world + posx + posy + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifs)),
											(std::istreambuf_iterator<char>()));
										updateSign(peer, worldInfo->items[squaresign].foreground, squaresign % worldInfo->width, squaresign / worldInfo->width, content, worldInfo->items[squaresign].background);
									}
									else
									{
									}
								}
							}


							if (tankUpdatePacket)
							{
								PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket);

								if (((PlayerInfo*)(event.peer->data))->isInWorld)
								{



									((PlayerInfo*)(event.peer->data))->posXY = (int)pMov->x + (int)pMov->y;
									sendPuncheffect(peer, ((PlayerInfo*)(event.peer->data))->effect);
									//((PlayerInfo*)(peer->data))->canDoubleJump = true; //here
									//sendState(peer); //here


								}

								// checkpoint system by cmd code start from here 
								if (tankUpdatePacket)
								{
									PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket); // to get player step

									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT")
									{

										continue; // to avoid server crash

									}

									((PlayerInfo*)(event.peer->data))->posX = (int)pMov->x; // posx is player move x
									((PlayerInfo*)(event.peer->data))->posY = (int)pMov->y; // posy is player move y

									int posX = ((PlayerInfo*)(event.peer->data))->posX / 32; // good value is actually 31.16-31.33
									int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;

									if (world->items[posX + (posY * world->width)].foreground == 7992 || world->items[posX + (posY * world->width)].foreground == 410 || world->items[posX + (posY * world->width)].foreground == 1770 || world->items[posX + (posY * world->width)].foreground == 1832 || world->items[posX + (posY * world->width)].foreground == 4720 || world->items[posX + (posY * world->width)].foreground == 4882 || world->items[posX + (posY * world->width)].foreground == 6392) //checkpoints id 
									{
										if (((PlayerInfo*)(peer->data))->cpX == posX * 32 && ((PlayerInfo*)(peer->data))->cpY == posY * 32)
										{

										}
										else
										{
											((PlayerInfo*)(peer->data))->usedCP = true;
											((PlayerInfo*)(peer->data))->cpX = posX * 32;
											((PlayerInfo*)(peer->data))->cpY = posY * 32;

											GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "SetRespawnPos"), posX + (posY * world->width)));
											memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);

											delete p3.data;
										}
									}
								}
								//checkpoint system by cmd end here ...


								if (tankUpdatePacket)
								{
									PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket); // to get player step

									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT")
									{

										continue; // to avoid server crash

									}

									((PlayerInfo*)(event.peer->data))->posX = (int)pMov->x; // posx is player move x
									((PlayerInfo*)(event.peer->data))->posY = (int)pMov->y; // posy is player move y

									int posX = ((PlayerInfo*)(event.peer->data))->posX;
									int posY = ((PlayerInfo*)(event.peer->data))->posY;

									//cout << "x: " << posX << endl;
									//cout << "y: " << posY << endl;
									if (posY < -1)
									{

										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You were out of the world."), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;

										cout << "WARNING: player " << ((PlayerInfo*)(peer->data))->rawName << " was out of the world. Y position was - " << posY << endl;
										cout << " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n " << endl;

										sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										sendWorldOffers(peer);
									}
								}

								switch (pMov->packetType)
								{
								case 0:

									((PlayerInfo*)(event.peer->data))->x = pMov->x;
									((PlayerInfo*)(event.peer->data))->y = pMov->y;
									((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
									sendPData(peer, pMov);



									if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
									{
										((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
										updateAllClothes(peer);
										updateInvis(peer);
										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);

										if (((PlayerInfo*)(peer->data))->ghostalr)
										{
											((PlayerInfo*)(peer->data))->canDoubleJump = true; //here

											sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
										}

										if (((PlayerInfo*)(peer->data))->currentWorld == "PVP") {
											Player::OnCountdownStart(peer, ((PlayerInfo*)(peer->data))->netID, 420, 0);
										}
										//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
										/*GamePacket p222 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), ((PlayerInfo*)(peer->data))->gem));
										ENetPacket * packet222 = enet_packet_create(p222.data,
											p222.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet222);*/



										if (((PlayerInfo*)(peer->data))->isinv == 1) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), " `^You are in invisibility mode, no one can see you!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}


									break;

								default:
									break;
								}
								switch (pMov->packetType)
								{
								case 0:
									((PlayerInfo*)(event.peer->data))->x = pMov->x;
									((PlayerInfo*)(event.peer->data))->y = pMov->y;
									((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
									sendPData(peer, pMov);
									if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
									{
										((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
										updateAllClothes(peer);

										if (((PlayerInfo*)(peer->data))->currentWorld == "PVP") {
											Player::OnCountdownStart(peer, ((PlayerInfo*)(peer->data))->netID, 420, 0);
										}
									}

									break;


								default:
									break;
								}

								PlayerMoving* data2 = unpackPlayerMoving(tankUpdatePacket);
								if (data2->packetType == 11)
								{
									//int lastdropitemcount = 0;
									//int lastdropitem = 0;
									//short int currentItemCount = 0;
									/*for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
									{
										if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastdropitem)
										{
											currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
										}
									}*/



									//cout << pMov->x << ";" << pMov->y << ";" << pMov->plantingTree << ";" << pMov->punchX << endl					
									int playerditemcount = ((PlayerInfo*)(event.peer->data))->droppeditemcount;
									//if (!world) continue;
									sendCollect(peer, ((PlayerInfo*)(event.peer->data))->netID, pMov->x, pMov->y, pMov->plantingTree, pMov->plantingTree, playerditemcount);





								}
								if (data2->packetType == 7)
								{
									WhiteDoor(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
								}

								if (data2->packetType == 25) {
									/*cout << "pasla naxuj" << endl;
									ENetPeer* currentPeer;

									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from KortexPS for 7 days", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 24 * 7);*/
								}


								if (data2->packetType == 23) {
									if (((PlayerInfo*)(peer->data))->currentWorld == "PVP") {
										if (((PlayerInfo*)(peer->data))->x != 0 && ((PlayerInfo*)(peer->data))->y != 0) {
											int puX = (int)((PlayerInfo*)(peer->data))->x / 32;
											int puY = (int)((PlayerInfo*)(peer->data))->y / 32;
											if (puX == ((PlayerInfo*)(peer->data))->respawnX / 32 && puY == ((PlayerInfo*)(peer->data))->respawnY / 32) continue;
											string killedBy = "(unknown)";
											string killedByrawname = "(unknown)";
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer)) {
													if (((PlayerInfo*)(currentPeer->data))->lastPVPcoord || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord2 || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord3 || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord4 || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord5 || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord6 || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord7 == data2->plantingTree) {
														if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->rawName) continue;
														killedBy = ((PlayerInfo*)(currentPeer->data))->displayName;
														killedByrawname = ((PlayerInfo*)(currentPeer->data))->rawName;
														((PlayerInfo*)(currentPeer->data))->lastPVPcoord = -1;
														((PlayerInfo*)(currentPeer->data))->lastPVPcoord2 = -1;
														((PlayerInfo*)(currentPeer->data))->lastPVPcoord3 = -1;
														((PlayerInfo*)(currentPeer->data))->lastPVPcoord4 = -1;
														((PlayerInfo*)(currentPeer->data))->lastPVPcoord5 = -1;
														((PlayerInfo*)(currentPeer->data))->lastPVPcoord6 = -1;
														((PlayerInfo*)(currentPeer->data))->lastPVPcoord7 = -1;


														int pTime = GetCurrentTimeInternalSeconds() - match.timePVPStarted;

														((PlayerInfo*)(peer->data))->health = ((PlayerInfo*)(peer->data))->health - 25;
														if (((PlayerInfo*)(peer->data))->health <= 0) {
															((PlayerInfo*)(currentPeer->data))->totalKills++;
															((PlayerInfo*)(currentPeer->data))->score = ((PlayerInfo*)(currentPeer->data))->score + 100;
															((PlayerInfo*)(peer->data))->health = 100;

															playerRespawn(peer, false);
															Player::OnConsoleMessage(peer, "`oYou were `4killed `oby `w" + killedBy + "`o.``");
															Player::OnCountdownStart(currentPeer, ((PlayerInfo*)(currentPeer->data))->netID, match.gameduration - pTime, ((PlayerInfo*)(currentPeer->data))->score);
														}


														break; // found player
														// soon resetting currentpeer's coordinates infos to 0, for safer/more accurate pvp system!
													}
												}
											}
										}
									}
								}


								if (data2->packetType == 10)
								{
									//cout << pMov->x << ";" << pMov->y << ";" << pMov->plantingTree << ";" << pMov->punchX << ";" << pMov->punchY << ";" << pMov->characterState << endl;
									ItemDefinition def;
									try {
										def = getItemDef(pMov->plantingTree);
									}
									catch (int e) {
										goto END_CLOTHSETTER_FORCE;
									}
									if (((PlayerInfo*)(event.peer->data))->boughtRAY == false) {
										if (pMov->plantingTree == 5480) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtLGK == false) {
										if (pMov->plantingTree == 2592) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtLGD == false) {
										if (pMov->plantingTree == 1782) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtLGW == false) {
										if (pMov->plantingTree == 1784) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtLGB == false) {
										if (pMov->plantingTree == 1780) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtLKW == false) {
										if (pMov->plantingTree == 7734) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtLWHIP == false) {
										if (pMov->plantingTree == 6026) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									
									if (((PlayerInfo*)(peer->data))->adminLevel <= 887) {
										if (pMov->plantingTree == 7564) {
											sendConsoleMsg(peer, "`4This item only avaiable For `cDivine`4!");
											break;
										}
									}
									if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
										if (pMov->plantingTree == 9058) {
											sendConsoleMsg(peer, "`4This item only avaiable For `2Chandra `cOnly`4!");
											break;
										}
									}
									if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
										if (pMov->plantingTree == 1442) {
											sendConsoleMsg(peer, "`4This item only avaiable For `2Chandra `cOnly`4!");
											break;
										}
									}
									if (((PlayerInfo*)(peer->data))->adminLevel <= 887) {
										if (pMov->plantingTree == 8452) {
											sendConsoleMsg(peer, "`4This item only avaiable For `cDivine`4!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtTK == false) {
										if (pMov->plantingTree == 8834) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									if (((PlayerInfo*)(event.peer->data))->boughtSPD == false) {
										if (pMov->plantingTree == 2952) {
											sendConsoleMsg(peer, "`4This item must be purchased! `6Type /purchase!");
											break;
										}
									}
									switch (def.clothType) {
									case 0:
										if (pMov->plantingTree == 4626) {

										}




										else if (pMov->plantingTree == 3462) {

										}
										if (((PlayerInfo*)(event.peer->data))->cloth0 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth0 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth0 = pMov->plantingTree;
										break;
									case 1:


										if (((PlayerInfo*)(event.peer->data))->cloth1 == pMov->plantingTree)
										{
											((PlayerInfo*)(peer->data))->effect = 8421376;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											((PlayerInfo*)(event.peer->data))->cloth1 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth1 = pMov->plantingTree;
										if (pMov->plantingTree = 1780) {
											((PlayerInfo*)(peer->data))->effect = 8421474;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										break;
									case 2:



										if (((PlayerInfo*)(event.peer->data))->cloth2 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth2 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth2 = pMov->plantingTree;
										break;
									case 3:



										if (((PlayerInfo*)(event.peer->data))->cloth3 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth3 = 0;
											break;
										}
										if (pMov->plantingTree == 8834) {

										}
										((PlayerInfo*)(event.peer->data))->cloth3 = pMov->plantingTree;
										break;
									case 4:




										if (((PlayerInfo*)(event.peer->data))->cloth4 == pMov->plantingTree)
										{
											((PlayerInfo*)(peer->data))->effect = 8421376;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											((PlayerInfo*)(event.peer->data))->cloth4 = 0;
											break;
										}
										if (pMov->plantingTree == 1204) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oGive people the evil eye. (`oFocused eyes mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421386;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										((PlayerInfo*)(event.peer->data))->cloth4 = pMov->plantingTree;
										break;
									case 5:

										if (pMov->plantingTree == 2592) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNone can stand against you! (`oLegendary Swordsmaster mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421399;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}

										else if (pMov->plantingTree == 6782) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou are feeling like `2Infinity `4Power `oStarts to go out of you!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421509;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 8452) {
											((PlayerInfo*)(peer->data))->effect = 8421412;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 5480) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWho needs arms when you have these? (`oRayman fist! mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421456;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 18) {

											((PlayerInfo*)(peer->data))->effect = 8421376;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
										}
										else if (pMov->plantingTree == 1782) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou should be very very nice to your pet. (`oLegendary! mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421397;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 1868) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou command a mighty (violent) dragon! (`oDrakeborn mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421399;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 1804) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou electrocute things. (`oFistful Of Thunder mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421398;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 9058) {
											((PlayerInfo*)(peer->data))->effect = 8421512;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}

										if (pMov->plantingTree == 1204) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oGive people the evil eye. (`oFocused eyes mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421386;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 7564) {
											if (((PlayerInfo*)(peer->data))->adminLevel >= 887) {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`cWhat?!?! Suddenly you felt an amazing power possesed your body!!. `o(`cInfinity Mode On`o)"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;
												((PlayerInfo*)(peer->data))->effect = 8421412;
												sendState(peer); //here
												sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											}
											else
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4The Ancients Gods laugh at you!!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);

												delete p2.data;
											}
										}

										else if (pMov->plantingTree == 7912) {
											((PlayerInfo*)(peer->data))->effect = 8421413;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 6026) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oThe truth is yours! (`oWhip of Truth mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421452;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 2952) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou Can Now Dig Fastee! (`oFaster Dig mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421405;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 1836) {

										}




										if (((PlayerInfo*)(event.peer->data))->cloth5 == pMov->plantingTree)
										{
											((PlayerInfo*)(peer->data))->effect = 8421376;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											((PlayerInfo*)(event.peer->data))->cloth5 = 0;
											break;
										}
										if (pMov->plantingTree == 1782) {
											((PlayerInfo*)(peer->data))->effect = 8424213;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1804) {
											((PlayerInfo*)(peer->data))->effect = 8424214;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1868) {
											((PlayerInfo*)(peer->data))->effect = 8424215;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2572) {
											((PlayerInfo*)(peer->data))->effect = 8424234;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2756) {
											((PlayerInfo*)(peer->data))->effect = 8424239;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 6026) {
											((PlayerInfo*)(peer->data))->effect = 8421452;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2872) {
											((PlayerInfo*)(peer->data))->effect = 8424243;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 3066) {
											((PlayerInfo*)(peer->data))->effect = 8424249;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2592) {
											((PlayerInfo*)(peer->data))->effect = 8424235;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2476) {
											((PlayerInfo*)(peer->data))->effect = 8424231;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1874) {
											((PlayerInfo*)(peer->data))->effect = 8424216;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1204) {
											((PlayerInfo*)(peer->data))->effect = 8421386;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										((PlayerInfo*)(event.peer->data))->cloth5 = pMov->plantingTree;
										break;
									case 6:

										if (pMov->plantingTree == 1784) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}

										else if (pMov->plantingTree == 1674) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}

										else if (pMov->plantingTree == 6334) {

										}

										else if (pMov->plantingTree == 1970) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}
										else if (pMov->plantingTree == 8286) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}
										else if (pMov->plantingTree == 9036) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}

										else if (pMov->plantingTree == 7734) {

										}



										if (((PlayerInfo*)(event.peer->data))->cloth6 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth6 = 0;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
											sendState(peer);
											break;
										}
										{
											((PlayerInfo*)(event.peer->data))->cloth6 = pMov->plantingTree;
											int item = pMov->plantingTree;
											if (item == 156 || item == 362 || item == 678 || item == 736 || item == 7734 || item == 7762 || item == 818 || item == 1206 || item == 1460 || item == 1550 || item == 1574 || item == 1668 || item == 1672 || item == 1674 || item == 1784 || item == 1824 || item == 1936 || item == 1938 || item == 1970 || item == 2254 || item == 2256 || item == 2258 || item == 2260 || item == 2262 || item == 2264 || item == 2390 || item == 2392 || item == 3120 || item == 3308 || item == 3512 || item == 4534 || item == 4986 || item == 5754 || item == 6144 || item == 6334 || item == 6694 || item == 6818 || item == 6842 || item == 1934 || item == 3134 || item == 6004 || item == 1780 || item == 2158 || item == 2160 || item == 2162 || item == 2164 || item == 2166 || item == 2168 || item == 2438 || item == 2538 || item == 2778 || item == 3858 || item == 350 || item == 998 || item == 1738 || item == 2642 || item == 2982 || item == 3104 || item == 3144 || item == 5738 || item == 3112 || item == 2722 || item == 3114 || item == 4970 || item == 4972 || item == 5020 || item == 6284 || item == 4184 || item == 4628 || item == 5322 || item == 4112 || item == 4114 || item == 3442 || item == 8286 || item == 8302 || item == 8306 || item == 8308 || item == 8366 || item == 8552 || item == 8576 || item == 8578 || item == 8580 || item == 8582 || item == 8620 || item == 8862 || item == 8914 || item == 9006 || item == 9064 || item == 9088 || item == 9114 || item == 9172 || item == 9182 || item == 9190 || item == 9120 || item == 9036) {
												((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											}
											else {
												((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
											}
											// ^^^^ wings
											sendState(peer);
										}
										break;

									case 7:


										if (((PlayerInfo*)(event.peer->data))->cloth7 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth7 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth7 = pMov->plantingTree;
										break;
									case 8:




										if (((PlayerInfo*)(event.peer->data))->cloth8 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth8 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth8 = pMov->plantingTree;
										break;
									default:
										if (
											def.id == 7166
											|| def.id == 5078 || def.id == 5080 || def.id == 5082 || def.id == 5084 || def.id == 5134
											|| def.id == 5126 || def.id == 5128 || def.id == 5130 || def.id == 5132 || def.id == 5152
											|| def.id == 5144 || def.id == 5146 || def.id == 5148 || def.id == 5150 || def.id == 5170
											|| def.id == 5162 || def.id == 5164 || def.id == 5166 || def.id == 5168 || def.id == 5188
											|| def.id == 5180 || def.id == 5182 || def.id == 5184 || def.id == 5186 || def.id == 9212
											|| def.id == 7168 || def.id == 7170 || def.id == 7172 || def.id == 7174
											) {
											if (((PlayerInfo*)(event.peer->data))->boughtAAC == false)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This item must be purchased! `6Type /purchase`o."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;


												break;
												//((PlayerInfo*)(event.peer->data))->cloth0 = 0;
											}
											if (((PlayerInfo*)(event.peer->data))->cloth_ances == pMov->plantingTree) {

												((PlayerInfo*)(event.peer->data))->cloth_ances = 0;
												break;
											}

											((PlayerInfo*)(event.peer->data))->cloth_ances = pMov->plantingTree;

										}
#ifdef TOTAL_LOG
										cout << "Invalid item activated: " << pMov->plantingTree << " by " << ((PlayerInfo*)(event.peer->data))->displayName << endl;
#endif
										break;
									}
									sendClothes(peer);
									// activate item
								END_CLOTHSETTER_FORCE:;





								}



								if (data2->packetType == 18)
								{
									sendPData(peer, pMov);
									// add talk buble
								}
								if (data2->punchX != -1 && data2->punchY != -1) {
									//cout << data2->packetType << endl;
									if (data2->packetType == 3)
									{
										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->lastBREAK + 150 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
										{
											((PlayerInfo*)(peer->data))->lastBREAK = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											if (((PlayerInfo*)(event.peer->data))->cloth_hand == 5480) {
												if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {
													((PlayerInfo*)(event.peer->data))->RotatedLeft = true;
												}
												else {
													((PlayerInfo*)(event.peer->data))->RotatedLeft = false;
												}
												if (data2->punchY == ((PlayerInfo*)(event.peer->data))->y / 32) {
													if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 3, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 4, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 5, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 6, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
													}
													else {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 3, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 4, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 5, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 6, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);


													}
												}
												else if (data2->punchX == ((PlayerInfo*)(event.peer->data))->x / 32) {
													if (data2->punchY > ((PlayerInfo*)(event.peer->data))->y / 32) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 4, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 5, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 6, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

													}
													else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 4, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 5, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 6, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

													}
													else {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

													}
												}
												else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
													if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 3, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 4, data2->punchY - 4, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 5, data2->punchY - 5, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 6, data2->punchY - 6, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

													}
													else {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 3, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 4, data2->punchY - 4, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 5, data2->punchY - 5, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 6, data2->punchY - 6, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

													}
												}
												else if (data2->punchY > ((PlayerInfo*)(event.peer->data))->y / 32) {
													if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 3, data2->punchY + 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 4, data2->punchY + 4, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 5, data2->punchY + 5, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 6, data2->punchY + 6, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

													}
													else {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 3, data2->punchY + 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 4, data2->punchY + 4, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 5, data2->punchY + 5, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 6, data2->punchY + 6, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

													}

												}

											}
											if (((PlayerInfo*)(peer->data))->cloth_hand == 7564) {


												if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {

													for (int i = 0; i < 2; i++)
													{
														for (int j = 0; j < 2; j++)
														{
															sendTileUpdate(data2->punchX + j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

														}
													}

												}
												else {

													for (int i = 0; i < 2; i++)
													{
														for (int j = 0; j < 2; j++)
														{
															sendTileUpdate(data2->punchX + j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

														}
													}

												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_hand == 9058) {


												if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {

													for (int i = 0; i < 2; i++)
													{
														for (int j = 0; j < 2; j++)
														{
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX + j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

														}
													}

												}
												else {

													for (int i = 0; i < 2; i++)
													{
														for (int j = 0; j < 2; j++)
														{
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX + j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
															sendTileUpdate(data2->punchX - j, data2->punchY + i, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

														}
													}

												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_hand == 2952) {
												sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
												sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
												sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
												sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);

											}
											else {
												sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
											}
										}

									}


								}




								delete data2;
								delete pMov;

							}
							else {
								cout << "Got bad tank packet";
							}
							/*char buffer[2048];
							for (int i = 0; i < event->packet->dataLength; i++)
							{
							sprintf(&buffer[2 * i], "%02X", event->packet->data[i]);
							}
							cout << buffer;*/
						}
					}
					break;
					case 5:
						break;
					case 6:
						//cout << GetTextPointerFromPacket(event.packet) << endl;
						break;
					}
					enet_packet_destroy(event.packet);
					break;
				}
				// changeis was made here
				case ENET_EVENT_TYPE_DISCONNECT:
#ifdef TOTAL_LOG
					printf("Peer disconnected.\n");
#endif
					ENetPeer* currentPeer;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						string name = ((PlayerInfo*)(currentPeer->data))->rawName;

						if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `4logged off`o."));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);
							delete p.data;
						}
					}
					/* Reset the peer's client information. */
					/*ENetPeer* currentPeer;
					for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
					{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;


					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player `o" + ((PlayerInfo*)(event.peer->data))->tankIDName + "`o just left the game..."));
					ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
					enet_host_flush(server);
					}*/


					if (((PlayerInfo*)(peer->data))->passedCaptcha2 == true)
					{
						if (((PlayerInfo*)(peer->data))->haveGrowId) {


							PlayerInfo* p = ((PlayerInfo*)(peer->data));

							string username = PlayerDB::getProperName(p->rawName);
							{


								std::ofstream o("players/" + username + ".json");
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								json j;

								int ban = p->ban;
								int clothback = p->cloth_back;
								int clothhand = p->cloth_hand;
								int clothface = p->cloth_face;
								int clothhair = p->cloth_hair;
								int clothfeet = p->cloth_feet;
								int clothpants = p->cloth_pants;
								int clothneck = p->cloth_necklace;
								int clothshirt = p->cloth_shirt;
								int clothmask = p->cloth_mask;
								int clothances = p->cloth_ances;
								string guild = p->guild;
								bool joinguild = p->joinguild;
								int level = p->level;
								int xp = p->xp;


								string password = ((PlayerInfo*)(peer->data))->tankIDPass;
								j["username"] = username;
								j["password"] = hashPassword(password);
								j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
								j["ClothBack"] = clothback;
								j["ClothHand"] = clothhand;
								j["ClothFace"] = clothface;
								j["ClothShirt"] = clothshirt;
								j["ClothPants"] = clothpants;
								j["ClothNeck"] = clothneck;
								j["ClothHair"] = clothhair;
								j["ClothFeet"] = clothfeet;
								j["ClothMask"] = clothmask;
								j["ClothAnces"] = clothances;


								j["isBanned"] = ban;
								int ip;
								j["ipID"] = peer->address.host;
								j["effect"] = ((PlayerInfo*)(peer->data))->effect;
								j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
								j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
								j["kxpswl"] = ((PlayerInfo*)(peer->data))->kxpswl;
								j["lastlog"] = ((PlayerInfo*)(peer->data))->lastlog;
								j["login"] = ((PlayerInfo*)(peer->data))->login;
								j["isvip"] = ((PlayerInfo*)(peer->data))->isvip;
								j["onquest"] = ((PlayerInfo*)(peer->data))->onquest;
								j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
								j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
								j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
								j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
								j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
								j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
								j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
								j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
								j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
								j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
								j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
								j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
								j["guild"] = guild;
								j["joinguild"] = joinguild;
								j["level"] = level;
								j["xp"] = xp;
								j["rubble"] = p->rubble;
								j["rubblexp"] = p->rubblexp;
								j["amberxp"] = p->amberxp;
								j["amber"] = p->amber;

								j["opalxp"] = p->opalxp;
								j["opal"] = p->opal;


								j["goldxp"] = p->goldxp;
								j["gold"] = p->gold;


								j["sapphirexp"] = p->sapphirexp;
								j["sapphire"] = p->sapphire;


								j["diamondxp"] = p->diamondxp;
								j["diamond"] = p->diamond;


								j["emeraldxp"] = p->emeraldxp;
								j["emerald"] = p->emerald;
								j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;
								o << j << std::endl;

							}
						}
					}

					sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
					((PlayerInfo*)(event.peer->data))->inventory.items.clear();
					delete event.peer->data;
					event.peer->data = NULL;
				}
			}
		cout << "Program ended??? Huh?" << endl;
		while (1);
		return 0;
	}
};